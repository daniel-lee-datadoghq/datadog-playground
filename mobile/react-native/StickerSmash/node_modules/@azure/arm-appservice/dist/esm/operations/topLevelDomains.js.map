{"version":3,"file":"topLevelDomains.js","sourceRoot":"","sources":["../../../src/operations/topLevelDomains.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { TopLevelDomains } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { WebSiteManagementClient } from \"../webSiteManagementClient.js\";\nimport {\n  TopLevelDomain,\n  TopLevelDomainsListNextOptionalParams,\n  TopLevelDomainsListOptionalParams,\n  TopLevelDomainsListResponse,\n  TldLegalAgreement,\n  TopLevelDomainAgreementOption,\n  TopLevelDomainsListAgreementsNextOptionalParams,\n  TopLevelDomainsListAgreementsOptionalParams,\n  TopLevelDomainsListAgreementsResponse,\n  TopLevelDomainsGetOptionalParams,\n  TopLevelDomainsGetResponse,\n  TopLevelDomainsListNextResponse,\n  TopLevelDomainsListAgreementsNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing TopLevelDomains operations. */\nexport class TopLevelDomainsImpl implements TopLevelDomains {\n  private readonly client: WebSiteManagementClient;\n\n  /**\n   * Initialize a new instance of the class TopLevelDomains class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WebSiteManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Description for Get all top-level domains supported for registration.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: TopLevelDomainsListOptionalParams,\n  ): PagedAsyncIterableIterator<TopLevelDomain> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: TopLevelDomainsListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<TopLevelDomain[]> {\n    let result: TopLevelDomainsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: TopLevelDomainsListOptionalParams,\n  ): AsyncIterableIterator<TopLevelDomain> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Gets all legal agreements that user needs to accept before purchasing a domain.\n   * @param name Name of the top-level domain.\n   * @param agreementOption Domain agreement options.\n   * @param options The options parameters.\n   */\n  public listAgreements(\n    name: string,\n    agreementOption: TopLevelDomainAgreementOption,\n    options?: TopLevelDomainsListAgreementsOptionalParams,\n  ): PagedAsyncIterableIterator<TldLegalAgreement> {\n    const iter = this.listAgreementsPagingAll(name, agreementOption, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listAgreementsPagingPage(\n          name,\n          agreementOption,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listAgreementsPagingPage(\n    name: string,\n    agreementOption: TopLevelDomainAgreementOption,\n    options?: TopLevelDomainsListAgreementsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<TldLegalAgreement[]> {\n    let result: TopLevelDomainsListAgreementsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listAgreements(name, agreementOption, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listAgreementsNext(\n        name,\n        agreementOption,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listAgreementsPagingAll(\n    name: string,\n    agreementOption: TopLevelDomainAgreementOption,\n    options?: TopLevelDomainsListAgreementsOptionalParams,\n  ): AsyncIterableIterator<TldLegalAgreement> {\n    for await (const page of this.listAgreementsPagingPage(\n      name,\n      agreementOption,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get all top-level domains supported for registration.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: TopLevelDomainsListOptionalParams,\n  ): Promise<TopLevelDomainsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Description for Get details of a top-level domain.\n   * @param name Name of the top-level domain.\n   * @param options The options parameters.\n   */\n  get(\n    name: string,\n    options?: TopLevelDomainsGetOptionalParams,\n  ): Promise<TopLevelDomainsGetResponse> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Gets all legal agreements that user needs to accept before purchasing a domain.\n   * @param name Name of the top-level domain.\n   * @param agreementOption Domain agreement options.\n   * @param options The options parameters.\n   */\n  private _listAgreements(\n    name: string,\n    agreementOption: TopLevelDomainAgreementOption,\n    options?: TopLevelDomainsListAgreementsOptionalParams,\n  ): Promise<TopLevelDomainsListAgreementsResponse> {\n    return this.client.sendOperationRequest(\n      { name, agreementOption, options },\n      listAgreementsOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: TopLevelDomainsListNextOptionalParams,\n  ): Promise<TopLevelDomainsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListAgreementsNext\n   * @param name Name of the top-level domain.\n   * @param agreementOption Domain agreement options.\n   * @param nextLink The nextLink from the previous successful call to the ListAgreements method.\n   * @param options The options parameters.\n   */\n  private _listAgreementsNext(\n    name: string,\n    agreementOption: TopLevelDomainAgreementOption,\n    nextLink: string,\n    options?: TopLevelDomainsListAgreementsNextOptionalParams,\n  ): Promise<TopLevelDomainsListAgreementsNextResponse> {\n    return this.client.sendOperationRequest(\n      { name, agreementOption, nextLink, options },\n      listAgreementsNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopLevelDomainCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopLevelDomain,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listAgreementsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TldLegalAgreementCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.agreementOption,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.name],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopLevelDomainCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listAgreementsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TldLegalAgreementCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.name,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\n"]}