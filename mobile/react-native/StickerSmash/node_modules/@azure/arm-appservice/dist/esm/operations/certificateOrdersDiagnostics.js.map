{"version":3,"file":"certificateOrdersDiagnostics.js","sourceRoot":"","sources":["../../../src/operations/certificateOrdersDiagnostics.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { CertificateOrdersDiagnostics } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { WebSiteManagementClient } from \"../webSiteManagementClient.js\";\nimport {\n  DetectorResponse,\n  CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextOptionalParams,\n  CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptionalParams,\n  CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse,\n  CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptionalParams,\n  CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseResponse,\n  CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing CertificateOrdersDiagnostics operations. */\nexport class CertificateOrdersDiagnosticsImpl\n  implements CertificateOrdersDiagnostics\n{\n  private readonly client: WebSiteManagementClient;\n\n  /**\n   * Initialize a new instance of the class CertificateOrdersDiagnostics class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WebSiteManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Description for Microsoft.CertificateRegistration to get the list of detectors for this RP.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName The certificate order name for which the response is needed.\n   * @param options The options parameters.\n   */\n  public listAppServiceCertificateOrderDetectorResponse(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptionalParams,\n  ): PagedAsyncIterableIterator<DetectorResponse> {\n    const iter = this.listAppServiceCertificateOrderDetectorResponsePagingAll(\n      resourceGroupName,\n      certificateOrderName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listAppServiceCertificateOrderDetectorResponsePagingPage(\n          resourceGroupName,\n          certificateOrderName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listAppServiceCertificateOrderDetectorResponsePagingPage(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DetectorResponse[]> {\n    let result: CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listAppServiceCertificateOrderDetectorResponse(\n        resourceGroupName,\n        certificateOrderName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listAppServiceCertificateOrderDetectorResponseNext(\n        resourceGroupName,\n        certificateOrderName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listAppServiceCertificateOrderDetectorResponsePagingAll(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptionalParams,\n  ): AsyncIterableIterator<DetectorResponse> {\n    for await (const page of this.listAppServiceCertificateOrderDetectorResponsePagingPage(\n      resourceGroupName,\n      certificateOrderName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Microsoft.CertificateRegistration to get the list of detectors for this RP.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName The certificate order name for which the response is needed.\n   * @param options The options parameters.\n   */\n  private _listAppServiceCertificateOrderDetectorResponse(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptionalParams,\n  ): Promise<CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, options },\n      listAppServiceCertificateOrderDetectorResponseOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Microsoft.CertificateRegistration call to get a detector response from App Lens.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName The certificate order name for which the response is needed.\n   * @param detectorName The detector name which needs to be run.\n   * @param options The options parameters.\n   */\n  getAppServiceCertificateOrderDetectorResponse(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    detectorName: string,\n    options?: CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptionalParams,\n  ): Promise<CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, detectorName, options },\n      getAppServiceCertificateOrderDetectorResponseOperationSpec,\n    );\n  }\n\n  /**\n   * ListAppServiceCertificateOrderDetectorResponseNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName The certificate order name for which the response is needed.\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListAppServiceCertificateOrderDetectorResponse method.\n   * @param options The options parameters.\n   */\n  private _listAppServiceCertificateOrderDetectorResponseNext(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    nextLink: string,\n    options?: CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextOptionalParams,\n  ): Promise<CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, nextLink, options },\n      listAppServiceCertificateOrderDetectorResponseNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listAppServiceCertificateOrderDetectorResponseOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/detectors\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DetectorResponseCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.certificateOrderName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getAppServiceCertificateOrderDetectorResponseOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/detectors/{detectorName}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DetectorResponse,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    queryParameters: [\n      Parameters.apiVersion,\n      Parameters.startTime,\n      Parameters.endTime,\n      Parameters.timeGrain,\n    ],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.certificateOrderName,\n      Parameters.detectorName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listAppServiceCertificateOrderDetectorResponseNextOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DetectorResponseCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.certificateOrderName,\n      Parameters.nextLink,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\n"]}