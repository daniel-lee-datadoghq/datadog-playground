{"version":3,"file":"workflowRunActionRepetitions.js","sourceRoot":"","sources":["../../../src/operations/workflowRunActionRepetitions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { WorkflowRunActionRepetitions } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { WebSiteManagementClient } from \"../webSiteManagementClient.js\";\nimport {\n  WorkflowRunActionRepetitionDefinition,\n  WorkflowRunActionRepetitionsListNextOptionalParams,\n  WorkflowRunActionRepetitionsListOptionalParams,\n  WorkflowRunActionRepetitionsListResponse,\n  ExpressionRoot,\n  WorkflowRunActionRepetitionsListExpressionTracesNextOptionalParams,\n  WorkflowRunActionRepetitionsListExpressionTracesOptionalParams,\n  WorkflowRunActionRepetitionsListExpressionTracesResponse,\n  WorkflowRunActionRepetitionsGetOptionalParams,\n  WorkflowRunActionRepetitionsGetResponse,\n  WorkflowRunActionRepetitionsListNextResponse,\n  WorkflowRunActionRepetitionsListExpressionTracesNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing WorkflowRunActionRepetitions operations. */\nexport class WorkflowRunActionRepetitionsImpl\n  implements WorkflowRunActionRepetitions\n{\n  private readonly client: WebSiteManagementClient;\n\n  /**\n   * Initialize a new instance of the class WorkflowRunActionRepetitions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WebSiteManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get all of a workflow run action repetitions.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionRepetitionsListOptionalParams,\n  ): PagedAsyncIterableIterator<WorkflowRunActionRepetitionDefinition> {\n    const iter = this.listPagingAll(\n      resourceGroupName,\n      name,\n      workflowName,\n      runName,\n      actionName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          name,\n          workflowName,\n          runName,\n          actionName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionRepetitionsListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<WorkflowRunActionRepetitionDefinition[]> {\n    let result: WorkflowRunActionRepetitionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionRepetitionsListOptionalParams,\n  ): AsyncIterableIterator<WorkflowRunActionRepetitionDefinition> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      name,\n      workflowName,\n      runName,\n      actionName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists a workflow run expression trace.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param repetitionName The workflow repetition.\n   * @param options The options parameters.\n   */\n  public listExpressionTraces(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    repetitionName: string,\n    options?: WorkflowRunActionRepetitionsListExpressionTracesOptionalParams,\n  ): PagedAsyncIterableIterator<ExpressionRoot> {\n    const iter = this.listExpressionTracesPagingAll(\n      resourceGroupName,\n      name,\n      workflowName,\n      runName,\n      actionName,\n      repetitionName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listExpressionTracesPagingPage(\n          resourceGroupName,\n          name,\n          workflowName,\n          runName,\n          actionName,\n          repetitionName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listExpressionTracesPagingPage(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    repetitionName: string,\n    options?: WorkflowRunActionRepetitionsListExpressionTracesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<ExpressionRoot[]> {\n    let result: WorkflowRunActionRepetitionsListExpressionTracesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listExpressionTraces(\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        repetitionName,\n        options,\n      );\n      let page = result.inputs || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listExpressionTracesNext(\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        repetitionName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.inputs || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listExpressionTracesPagingAll(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    repetitionName: string,\n    options?: WorkflowRunActionRepetitionsListExpressionTracesOptionalParams,\n  ): AsyncIterableIterator<ExpressionRoot> {\n    for await (const page of this.listExpressionTracesPagingPage(\n      resourceGroupName,\n      name,\n      workflowName,\n      runName,\n      actionName,\n      repetitionName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get all of a workflow run action repetitions.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionRepetitionsListOptionalParams,\n  ): Promise<WorkflowRunActionRepetitionsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, name, workflowName, runName, actionName, options },\n      listOperationSpec,\n    );\n  }\n\n  /**\n   * Get a workflow run action repetition.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param repetitionName The workflow repetition.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    repetitionName: string,\n    options?: WorkflowRunActionRepetitionsGetOptionalParams,\n  ): Promise<WorkflowRunActionRepetitionsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        repetitionName,\n        options,\n      },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Lists a workflow run expression trace.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param repetitionName The workflow repetition.\n   * @param options The options parameters.\n   */\n  private _listExpressionTraces(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    repetitionName: string,\n    options?: WorkflowRunActionRepetitionsListExpressionTracesOptionalParams,\n  ): Promise<WorkflowRunActionRepetitionsListExpressionTracesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        repetitionName,\n        options,\n      },\n      listExpressionTracesOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    nextLink: string,\n    options?: WorkflowRunActionRepetitionsListNextOptionalParams,\n  ): Promise<WorkflowRunActionRepetitionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        nextLink,\n        options,\n      },\n      listNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListExpressionTracesNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param repetitionName The workflow repetition.\n   * @param nextLink The nextLink from the previous successful call to the ListExpressionTraces method.\n   * @param options The options parameters.\n   */\n  private _listExpressionTracesNext(\n    resourceGroupName: string,\n    name: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    repetitionName: string,\n    nextLink: string,\n    options?: WorkflowRunActionRepetitionsListExpressionTracesNextOptionalParams,\n  ): Promise<WorkflowRunActionRepetitionsListExpressionTracesNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        name,\n        workflowName,\n        runName,\n        actionName,\n        repetitionName,\n        nextLink,\n        options,\n      },\n      listExpressionTracesNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkflowRunActionRepetitionDefinitionCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.workflowName1,\n    Parameters.runName,\n    Parameters.actionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkflowRunActionRepetitionDefinition,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.workflowName1,\n    Parameters.runName,\n    Parameters.actionName,\n    Parameters.repetitionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listExpressionTracesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ExpressionTraces,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.workflowName1,\n    Parameters.runName,\n    Parameters.actionName,\n    Parameters.repetitionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkflowRunActionRepetitionDefinitionCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.nextLink,\n    Parameters.workflowName1,\n    Parameters.runName,\n    Parameters.actionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listExpressionTracesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ExpressionTraces,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.name,\n    Parameters.nextLink,\n    Parameters.workflowName1,\n    Parameters.runName,\n    Parameters.actionName,\n    Parameters.repetitionName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}