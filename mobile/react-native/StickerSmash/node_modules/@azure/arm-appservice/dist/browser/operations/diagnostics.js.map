{"version":3,"file":"diagnostics.js","sourceRoot":"","sources":["../../../src/operations/diagnostics.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { Diagnostics } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { WebSiteManagementClient } from \"../webSiteManagementClient.js\";\nimport {\n  DetectorResponse,\n  DiagnosticsListHostingEnvironmentDetectorResponsesNextOptionalParams,\n  DiagnosticsListHostingEnvironmentDetectorResponsesOptionalParams,\n  DiagnosticsListHostingEnvironmentDetectorResponsesResponse,\n  DiagnosticsListSiteDetectorResponsesNextOptionalParams,\n  DiagnosticsListSiteDetectorResponsesOptionalParams,\n  DiagnosticsListSiteDetectorResponsesResponse,\n  DiagnosticCategory,\n  DiagnosticsListSiteDiagnosticCategoriesNextOptionalParams,\n  DiagnosticsListSiteDiagnosticCategoriesOptionalParams,\n  DiagnosticsListSiteDiagnosticCategoriesResponse,\n  AnalysisDefinition,\n  DiagnosticsListSiteAnalysesNextOptionalParams,\n  DiagnosticsListSiteAnalysesOptionalParams,\n  DiagnosticsListSiteAnalysesResponse,\n  DetectorDefinitionResource,\n  DiagnosticsListSiteDetectorsNextOptionalParams,\n  DiagnosticsListSiteDetectorsOptionalParams,\n  DiagnosticsListSiteDetectorsResponse,\n  DiagnosticsListSiteDetectorResponsesSlotNextOptionalParams,\n  DiagnosticsListSiteDetectorResponsesSlotOptionalParams,\n  DiagnosticsListSiteDetectorResponsesSlotResponse,\n  DiagnosticsListSiteDiagnosticCategoriesSlotNextOptionalParams,\n  DiagnosticsListSiteDiagnosticCategoriesSlotOptionalParams,\n  DiagnosticsListSiteDiagnosticCategoriesSlotResponse,\n  DiagnosticsListSiteAnalysesSlotNextOptionalParams,\n  DiagnosticsListSiteAnalysesSlotOptionalParams,\n  DiagnosticsListSiteAnalysesSlotResponse,\n  DiagnosticsListSiteDetectorsSlotNextOptionalParams,\n  DiagnosticsListSiteDetectorsSlotOptionalParams,\n  DiagnosticsListSiteDetectorsSlotResponse,\n  DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams,\n  DiagnosticsGetHostingEnvironmentDetectorResponseResponse,\n  DiagnosticsGetSiteDetectorResponseOptionalParams,\n  DiagnosticsGetSiteDetectorResponseResponse,\n  DiagnosticsGetSiteDiagnosticCategoryOptionalParams,\n  DiagnosticsGetSiteDiagnosticCategoryResponse,\n  DiagnosticsGetSiteAnalysisOptionalParams,\n  DiagnosticsGetSiteAnalysisResponse,\n  DiagnosticsExecuteSiteAnalysisOptionalParams,\n  DiagnosticsExecuteSiteAnalysisResponse,\n  DiagnosticsGetSiteDetectorOptionalParams,\n  DiagnosticsGetSiteDetectorResponse,\n  DiagnosticsExecuteSiteDetectorOptionalParams,\n  DiagnosticsExecuteSiteDetectorResponse,\n  DiagnosticsGetSiteDetectorResponseSlotOptionalParams,\n  DiagnosticsGetSiteDetectorResponseSlotResponse,\n  DiagnosticsGetSiteDiagnosticCategorySlotOptionalParams,\n  DiagnosticsGetSiteDiagnosticCategorySlotResponse,\n  DiagnosticsGetSiteAnalysisSlotOptionalParams,\n  DiagnosticsGetSiteAnalysisSlotResponse,\n  DiagnosticsExecuteSiteAnalysisSlotOptionalParams,\n  DiagnosticsExecuteSiteAnalysisSlotResponse,\n  DiagnosticsGetSiteDetectorSlotOptionalParams,\n  DiagnosticsGetSiteDetectorSlotResponse,\n  DiagnosticsExecuteSiteDetectorSlotOptionalParams,\n  DiagnosticsExecuteSiteDetectorSlotResponse,\n  DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse,\n  DiagnosticsListSiteDetectorResponsesNextResponse,\n  DiagnosticsListSiteDiagnosticCategoriesNextResponse,\n  DiagnosticsListSiteAnalysesNextResponse,\n  DiagnosticsListSiteDetectorsNextResponse,\n  DiagnosticsListSiteDetectorResponsesSlotNextResponse,\n  DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse,\n  DiagnosticsListSiteAnalysesSlotNextResponse,\n  DiagnosticsListSiteDetectorsSlotNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Diagnostics operations. */\nexport class DiagnosticsImpl implements Diagnostics {\n  private readonly client: WebSiteManagementClient;\n\n  /**\n   * Initialize a new instance of the class Diagnostics class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WebSiteManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Description for List Hosting Environment Detector Responses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site Name\n   * @param options The options parameters.\n   */\n  public listHostingEnvironmentDetectorResponses(\n    resourceGroupName: string,\n    name: string,\n    options?: DiagnosticsListHostingEnvironmentDetectorResponsesOptionalParams,\n  ): PagedAsyncIterableIterator<DetectorResponse> {\n    const iter = this.listHostingEnvironmentDetectorResponsesPagingAll(\n      resourceGroupName,\n      name,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listHostingEnvironmentDetectorResponsesPagingPage(\n          resourceGroupName,\n          name,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listHostingEnvironmentDetectorResponsesPagingPage(\n    resourceGroupName: string,\n    name: string,\n    options?: DiagnosticsListHostingEnvironmentDetectorResponsesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DetectorResponse[]> {\n    let result: DiagnosticsListHostingEnvironmentDetectorResponsesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listHostingEnvironmentDetectorResponses(\n        resourceGroupName,\n        name,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listHostingEnvironmentDetectorResponsesNext(\n        resourceGroupName,\n        name,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listHostingEnvironmentDetectorResponsesPagingAll(\n    resourceGroupName: string,\n    name: string,\n    options?: DiagnosticsListHostingEnvironmentDetectorResponsesOptionalParams,\n  ): AsyncIterableIterator<DetectorResponse> {\n    for await (const page of this.listHostingEnvironmentDetectorResponsesPagingPage(\n      resourceGroupName,\n      name,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for List Site Detector Responses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param options The options parameters.\n   */\n  public listSiteDetectorResponses(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDetectorResponsesOptionalParams,\n  ): PagedAsyncIterableIterator<DetectorResponse> {\n    const iter = this.listSiteDetectorResponsesPagingAll(\n      resourceGroupName,\n      siteName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteDetectorResponsesPagingPage(\n          resourceGroupName,\n          siteName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteDetectorResponsesPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDetectorResponsesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DetectorResponse[]> {\n    let result: DiagnosticsListSiteDetectorResponsesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteDetectorResponses(\n        resourceGroupName,\n        siteName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteDetectorResponsesNext(\n        resourceGroupName,\n        siteName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteDetectorResponsesPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDetectorResponsesOptionalParams,\n  ): AsyncIterableIterator<DetectorResponse> {\n    for await (const page of this.listSiteDetectorResponsesPagingPage(\n      resourceGroupName,\n      siteName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get Diagnostics Categories\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param options The options parameters.\n   */\n  public listSiteDiagnosticCategories(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesOptionalParams,\n  ): PagedAsyncIterableIterator<DiagnosticCategory> {\n    const iter = this.listSiteDiagnosticCategoriesPagingAll(\n      resourceGroupName,\n      siteName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteDiagnosticCategoriesPagingPage(\n          resourceGroupName,\n          siteName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteDiagnosticCategoriesPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DiagnosticCategory[]> {\n    let result: DiagnosticsListSiteDiagnosticCategoriesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteDiagnosticCategories(\n        resourceGroupName,\n        siteName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteDiagnosticCategoriesNext(\n        resourceGroupName,\n        siteName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteDiagnosticCategoriesPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesOptionalParams,\n  ): AsyncIterableIterator<DiagnosticCategory> {\n    for await (const page of this.listSiteDiagnosticCategoriesPagingPage(\n      resourceGroupName,\n      siteName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get Site Analyses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param options The options parameters.\n   */\n  public listSiteAnalyses(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteAnalysesOptionalParams,\n  ): PagedAsyncIterableIterator<AnalysisDefinition> {\n    const iter = this.listSiteAnalysesPagingAll(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteAnalysesPagingPage(\n          resourceGroupName,\n          siteName,\n          diagnosticCategory,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteAnalysesPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteAnalysesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<AnalysisDefinition[]> {\n    let result: DiagnosticsListSiteAnalysesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteAnalyses(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteAnalysesNext(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteAnalysesPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteAnalysesOptionalParams,\n  ): AsyncIterableIterator<AnalysisDefinition> {\n    for await (const page of this.listSiteAnalysesPagingPage(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get Detectors\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param options The options parameters.\n   */\n  public listSiteDetectors(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteDetectorsOptionalParams,\n  ): PagedAsyncIterableIterator<DetectorDefinitionResource> {\n    const iter = this.listSiteDetectorsPagingAll(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteDetectorsPagingPage(\n          resourceGroupName,\n          siteName,\n          diagnosticCategory,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteDetectorsPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteDetectorsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DetectorDefinitionResource[]> {\n    let result: DiagnosticsListSiteDetectorsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteDetectors(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteDetectorsNext(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteDetectorsPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteDetectorsOptionalParams,\n  ): AsyncIterableIterator<DetectorDefinitionResource> {\n    for await (const page of this.listSiteDetectorsPagingPage(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for List Site Detector Responses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  public listSiteDetectorResponsesSlot(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorResponsesSlotOptionalParams,\n  ): PagedAsyncIterableIterator<DetectorResponse> {\n    const iter = this.listSiteDetectorResponsesSlotPagingAll(\n      resourceGroupName,\n      siteName,\n      slot,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteDetectorResponsesSlotPagingPage(\n          resourceGroupName,\n          siteName,\n          slot,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteDetectorResponsesSlotPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorResponsesSlotOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DetectorResponse[]> {\n    let result: DiagnosticsListSiteDetectorResponsesSlotResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteDetectorResponsesSlot(\n        resourceGroupName,\n        siteName,\n        slot,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteDetectorResponsesSlotNext(\n        resourceGroupName,\n        siteName,\n        slot,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteDetectorResponsesSlotPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorResponsesSlotOptionalParams,\n  ): AsyncIterableIterator<DetectorResponse> {\n    for await (const page of this.listSiteDetectorResponsesSlotPagingPage(\n      resourceGroupName,\n      siteName,\n      slot,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get Diagnostics Categories\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  public listSiteDiagnosticCategoriesSlot(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesSlotOptionalParams,\n  ): PagedAsyncIterableIterator<DiagnosticCategory> {\n    const iter = this.listSiteDiagnosticCategoriesSlotPagingAll(\n      resourceGroupName,\n      siteName,\n      slot,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteDiagnosticCategoriesSlotPagingPage(\n          resourceGroupName,\n          siteName,\n          slot,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteDiagnosticCategoriesSlotPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesSlotOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DiagnosticCategory[]> {\n    let result: DiagnosticsListSiteDiagnosticCategoriesSlotResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteDiagnosticCategoriesSlot(\n        resourceGroupName,\n        siteName,\n        slot,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteDiagnosticCategoriesSlotNext(\n        resourceGroupName,\n        siteName,\n        slot,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteDiagnosticCategoriesSlotPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesSlotOptionalParams,\n  ): AsyncIterableIterator<DiagnosticCategory> {\n    for await (const page of this.listSiteDiagnosticCategoriesSlotPagingPage(\n      resourceGroupName,\n      siteName,\n      slot,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get Site Analyses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  public listSiteAnalysesSlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteAnalysesSlotOptionalParams,\n  ): PagedAsyncIterableIterator<AnalysisDefinition> {\n    const iter = this.listSiteAnalysesSlotPagingAll(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      slot,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteAnalysesSlotPagingPage(\n          resourceGroupName,\n          siteName,\n          diagnosticCategory,\n          slot,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteAnalysesSlotPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteAnalysesSlotOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<AnalysisDefinition[]> {\n    let result: DiagnosticsListSiteAnalysesSlotResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteAnalysesSlot(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        slot,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteAnalysesSlotNext(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        slot,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteAnalysesSlotPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteAnalysesSlotOptionalParams,\n  ): AsyncIterableIterator<AnalysisDefinition> {\n    for await (const page of this.listSiteAnalysesSlotPagingPage(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      slot,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get Detectors\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  public listSiteDetectorsSlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorsSlotOptionalParams,\n  ): PagedAsyncIterableIterator<DetectorDefinitionResource> {\n    const iter = this.listSiteDetectorsSlotPagingAll(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      slot,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listSiteDetectorsSlotPagingPage(\n          resourceGroupName,\n          siteName,\n          diagnosticCategory,\n          slot,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listSiteDetectorsSlotPagingPage(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorsSlotOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DetectorDefinitionResource[]> {\n    let result: DiagnosticsListSiteDetectorsSlotResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listSiteDetectorsSlot(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        slot,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listSiteDetectorsSlotNext(\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        slot,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listSiteDetectorsSlotPagingAll(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorsSlotOptionalParams,\n  ): AsyncIterableIterator<DetectorDefinitionResource> {\n    for await (const page of this.listSiteDetectorsSlotPagingPage(\n      resourceGroupName,\n      siteName,\n      diagnosticCategory,\n      slot,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for List Hosting Environment Detector Responses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site Name\n   * @param options The options parameters.\n   */\n  private _listHostingEnvironmentDetectorResponses(\n    resourceGroupName: string,\n    name: string,\n    options?: DiagnosticsListHostingEnvironmentDetectorResponsesOptionalParams,\n  ): Promise<DiagnosticsListHostingEnvironmentDetectorResponsesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, name, options },\n      listHostingEnvironmentDetectorResponsesOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Hosting Environment Detector Response\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name App Service Environment Name\n   * @param detectorName Detector Resource Name\n   * @param options The options parameters.\n   */\n  getHostingEnvironmentDetectorResponse(\n    resourceGroupName: string,\n    name: string,\n    detectorName: string,\n    options?: DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams,\n  ): Promise<DiagnosticsGetHostingEnvironmentDetectorResponseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, name, detectorName, options },\n      getHostingEnvironmentDetectorResponseOperationSpec,\n    );\n  }\n\n  /**\n   * Description for List Site Detector Responses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param options The options parameters.\n   */\n  private _listSiteDetectorResponses(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDetectorResponsesOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorResponsesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, options },\n      listSiteDetectorResponsesOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get site detector response\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param detectorName Detector Resource Name\n   * @param options The options parameters.\n   */\n  getSiteDetectorResponse(\n    resourceGroupName: string,\n    siteName: string,\n    detectorName: string,\n    options?: DiagnosticsGetSiteDetectorResponseOptionalParams,\n  ): Promise<DiagnosticsGetSiteDetectorResponseResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, detectorName, options },\n      getSiteDetectorResponseOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Diagnostics Categories\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param options The options parameters.\n   */\n  private _listSiteDiagnosticCategories(\n    resourceGroupName: string,\n    siteName: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesOptionalParams,\n  ): Promise<DiagnosticsListSiteDiagnosticCategoriesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, options },\n      listSiteDiagnosticCategoriesOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Diagnostics Category\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param options The options parameters.\n   */\n  getSiteDiagnosticCategory(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsGetSiteDiagnosticCategoryOptionalParams,\n  ): Promise<DiagnosticsGetSiteDiagnosticCategoryResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, options },\n      getSiteDiagnosticCategoryOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Site Analyses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param options The options parameters.\n   */\n  private _listSiteAnalyses(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteAnalysesOptionalParams,\n  ): Promise<DiagnosticsListSiteAnalysesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, options },\n      listSiteAnalysesOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Site Analysis\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param analysisName Analysis Name\n   * @param options The options parameters.\n   */\n  getSiteAnalysis(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    analysisName: string,\n    options?: DiagnosticsGetSiteAnalysisOptionalParams,\n  ): Promise<DiagnosticsGetSiteAnalysisResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        analysisName,\n        options,\n      },\n      getSiteAnalysisOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Execute Analysis\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Category Name\n   * @param analysisName Analysis Resource Name\n   * @param options The options parameters.\n   */\n  executeSiteAnalysis(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    analysisName: string,\n    options?: DiagnosticsExecuteSiteAnalysisOptionalParams,\n  ): Promise<DiagnosticsExecuteSiteAnalysisResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        analysisName,\n        options,\n      },\n      executeSiteAnalysisOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Detectors\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param options The options parameters.\n   */\n  private _listSiteDetectors(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsListSiteDetectorsOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, options },\n      listSiteDetectorsOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Detector\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param detectorName Detector Name\n   * @param options The options parameters.\n   */\n  getSiteDetector(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    detectorName: string,\n    options?: DiagnosticsGetSiteDetectorOptionalParams,\n  ): Promise<DiagnosticsGetSiteDetectorResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        detectorName,\n        options,\n      },\n      getSiteDetectorOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Execute Detector\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param detectorName Detector Resource Name\n   * @param diagnosticCategory Category Name\n   * @param options The options parameters.\n   */\n  executeSiteDetector(\n    resourceGroupName: string,\n    siteName: string,\n    detectorName: string,\n    diagnosticCategory: string,\n    options?: DiagnosticsExecuteSiteDetectorOptionalParams,\n  ): Promise<DiagnosticsExecuteSiteDetectorResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        detectorName,\n        diagnosticCategory,\n        options,\n      },\n      executeSiteDetectorOperationSpec,\n    );\n  }\n\n  /**\n   * Description for List Site Detector Responses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  private _listSiteDetectorResponsesSlot(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorResponsesSlotOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorResponsesSlotResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, slot, options },\n      listSiteDetectorResponsesSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get site detector response\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param detectorName Detector Resource Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  getSiteDetectorResponseSlot(\n    resourceGroupName: string,\n    siteName: string,\n    detectorName: string,\n    slot: string,\n    options?: DiagnosticsGetSiteDetectorResponseSlotOptionalParams,\n  ): Promise<DiagnosticsGetSiteDetectorResponseSlotResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, detectorName, slot, options },\n      getSiteDetectorResponseSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Diagnostics Categories\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  private _listSiteDiagnosticCategoriesSlot(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesSlotOptionalParams,\n  ): Promise<DiagnosticsListSiteDiagnosticCategoriesSlotResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, slot, options },\n      listSiteDiagnosticCategoriesSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Diagnostics Category\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  getSiteDiagnosticCategorySlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsGetSiteDiagnosticCategorySlotOptionalParams,\n  ): Promise<DiagnosticsGetSiteDiagnosticCategorySlotResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, slot, options },\n      getSiteDiagnosticCategorySlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Site Analyses\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  private _listSiteAnalysesSlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteAnalysesSlotOptionalParams,\n  ): Promise<DiagnosticsListSiteAnalysesSlotResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, slot, options },\n      listSiteAnalysesSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Site Analysis\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param analysisName Analysis Name\n   * @param slot Slot - optional\n   * @param options The options parameters.\n   */\n  getSiteAnalysisSlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    analysisName: string,\n    slot: string,\n    options?: DiagnosticsGetSiteAnalysisSlotOptionalParams,\n  ): Promise<DiagnosticsGetSiteAnalysisSlotResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        analysisName,\n        slot,\n        options,\n      },\n      getSiteAnalysisSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Execute Analysis\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Category Name\n   * @param analysisName Analysis Resource Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  executeSiteAnalysisSlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    analysisName: string,\n    slot: string,\n    options?: DiagnosticsExecuteSiteAnalysisSlotOptionalParams,\n  ): Promise<DiagnosticsExecuteSiteAnalysisSlotResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        analysisName,\n        slot,\n        options,\n      },\n      executeSiteAnalysisSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Detectors\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  private _listSiteDetectorsSlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsListSiteDetectorsSlotOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorsSlotResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, slot, options },\n      listSiteDetectorsSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get Detector\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param detectorName Detector Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  getSiteDetectorSlot(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    detectorName: string,\n    slot: string,\n    options?: DiagnosticsGetSiteDetectorSlotOptionalParams,\n  ): Promise<DiagnosticsGetSiteDetectorSlotResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        detectorName,\n        slot,\n        options,\n      },\n      getSiteDetectorSlotOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Execute Detector\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param detectorName Detector Resource Name\n   * @param diagnosticCategory Category Name\n   * @param slot Slot Name\n   * @param options The options parameters.\n   */\n  executeSiteDetectorSlot(\n    resourceGroupName: string,\n    siteName: string,\n    detectorName: string,\n    diagnosticCategory: string,\n    slot: string,\n    options?: DiagnosticsExecuteSiteDetectorSlotOptionalParams,\n  ): Promise<DiagnosticsExecuteSiteDetectorSlotResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        detectorName,\n        diagnosticCategory,\n        slot,\n        options,\n      },\n      executeSiteDetectorSlotOperationSpec,\n    );\n  }\n\n  /**\n   * ListHostingEnvironmentDetectorResponsesNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Site Name\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListHostingEnvironmentDetectorResponses method.\n   * @param options The options parameters.\n   */\n  private _listHostingEnvironmentDetectorResponsesNext(\n    resourceGroupName: string,\n    name: string,\n    nextLink: string,\n    options?: DiagnosticsListHostingEnvironmentDetectorResponsesNextOptionalParams,\n  ): Promise<DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, name, nextLink, options },\n      listHostingEnvironmentDetectorResponsesNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteDetectorResponsesNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorResponses\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listSiteDetectorResponsesNext(\n    resourceGroupName: string,\n    siteName: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteDetectorResponsesNextOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorResponsesNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, nextLink, options },\n      listSiteDetectorResponsesNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteDiagnosticCategoriesNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param nextLink The nextLink from the previous successful call to the ListSiteDiagnosticCategories\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listSiteDiagnosticCategoriesNext(\n    resourceGroupName: string,\n    siteName: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesNextOptionalParams,\n  ): Promise<DiagnosticsListSiteDiagnosticCategoriesNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, nextLink, options },\n      listSiteDiagnosticCategoriesNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteAnalysesNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param nextLink The nextLink from the previous successful call to the ListSiteAnalyses method.\n   * @param options The options parameters.\n   */\n  private _listSiteAnalysesNext(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteAnalysesNextOptionalParams,\n  ): Promise<DiagnosticsListSiteAnalysesNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, nextLink, options },\n      listSiteAnalysesNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteDetectorsNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectors method.\n   * @param options The options parameters.\n   */\n  private _listSiteDetectorsNext(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteDetectorsNextOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorsNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, diagnosticCategory, nextLink, options },\n      listSiteDetectorsNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteDetectorResponsesSlotNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param slot Slot Name\n   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorResponsesSlot\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listSiteDetectorResponsesSlotNext(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteDetectorResponsesSlotNextOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorResponsesSlotNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, slot, nextLink, options },\n      listSiteDetectorResponsesSlotNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteDiagnosticCategoriesSlotNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param slot Slot Name\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListSiteDiagnosticCategoriesSlot method.\n   * @param options The options parameters.\n   */\n  private _listSiteDiagnosticCategoriesSlotNext(\n    resourceGroupName: string,\n    siteName: string,\n    slot: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteDiagnosticCategoriesSlotNextOptionalParams,\n  ): Promise<DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, siteName, slot, nextLink, options },\n      listSiteDiagnosticCategoriesSlotNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteAnalysesSlotNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param slot Slot Name\n   * @param nextLink The nextLink from the previous successful call to the ListSiteAnalysesSlot method.\n   * @param options The options parameters.\n   */\n  private _listSiteAnalysesSlotNext(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteAnalysesSlotNextOptionalParams,\n  ): Promise<DiagnosticsListSiteAnalysesSlotNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        slot,\n        nextLink,\n        options,\n      },\n      listSiteAnalysesSlotNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListSiteDetectorsSlotNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param siteName Site Name\n   * @param diagnosticCategory Diagnostic Category\n   * @param slot Slot Name\n   * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorsSlot method.\n   * @param options The options parameters.\n   */\n  private _listSiteDetectorsSlotNext(\n    resourceGroupName: string,\n    siteName: string,\n    diagnosticCategory: string,\n    slot: string,\n    nextLink: string,\n    options?: DiagnosticsListSiteDetectorsSlotNextOptionalParams,\n  ): Promise<DiagnosticsListSiteDetectorsSlotNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        siteName,\n        diagnosticCategory,\n        slot,\n        nextLink,\n        options,\n      },\n      listSiteDetectorsSlotNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listHostingEnvironmentDetectorResponsesOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DetectorResponseCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.name,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getHostingEnvironmentDetectorResponseOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DetectorResponse,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    queryParameters: [\n      Parameters.apiVersion,\n      Parameters.startTime,\n      Parameters.endTime,\n      Parameters.timeGrain,\n    ],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.name,\n      Parameters.detectorName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listSiteDetectorResponsesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectorResponseCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSiteDetectorResponseOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectorResponse,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.timeGrain,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.detectorName,\n    Parameters.siteName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDiagnosticCategoriesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticCategoryCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSiteDiagnosticCategoryOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticCategory,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteAnalysesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticAnalysisCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSiteAnalysisOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalysisDefinition,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.analysisName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst executeSiteAnalysisOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticAnalysis,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.timeGrain,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.analysisName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDetectorsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticDetectorCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSiteDetectorOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectorDefinitionResource,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.detectorName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst executeSiteDetectorOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticDetectorResponse,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.timeGrain,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.detectorName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDetectorResponsesSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectorResponseCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSiteDetectorResponseSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectorResponse,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.timeGrain,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.detectorName,\n    Parameters.siteName,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDiagnosticCategoriesSlotOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DiagnosticCategoryCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    queryParameters: [Parameters.apiVersion],\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.siteName,\n      Parameters.slot,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst getSiteDiagnosticCategorySlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticCategory,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteAnalysesSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticAnalysisCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSiteAnalysisSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalysisDefinition,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.analysisName,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst executeSiteAnalysisSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticAnalysis,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.timeGrain,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.analysisName,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDetectorsSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticDetectorCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSiteDetectorSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectorDefinitionResource,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.detectorName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst executeSiteDetectorSlotOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticDetectorResponse,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.startTime,\n    Parameters.endTime,\n    Parameters.timeGrain,\n  ],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.detectorName,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listHostingEnvironmentDetectorResponsesNextOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DetectorResponseCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.name,\n      Parameters.nextLink,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listSiteDetectorResponsesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectorResponseCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.siteName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDiagnosticCategoriesNextOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DiagnosticCategoryCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.nextLink,\n      Parameters.siteName,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listSiteAnalysesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticAnalysisCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDetectorsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticDetectorCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDetectorResponsesSlotNextOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DetectorResponseCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.nextLink,\n      Parameters.siteName,\n      Parameters.slot,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listSiteDiagnosticCategoriesSlotNextOperationSpec: coreClient.OperationSpec =\n  {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n      200: {\n        bodyMapper: Mappers.DiagnosticCategoryCollection,\n      },\n      default: {\n        bodyMapper: Mappers.DefaultErrorResponse,\n      },\n    },\n    urlParameters: [\n      Parameters.$host,\n      Parameters.subscriptionId,\n      Parameters.resourceGroupName,\n      Parameters.nextLink,\n      Parameters.siteName,\n      Parameters.slot,\n    ],\n    headerParameters: [Parameters.accept],\n    serializer,\n  };\nconst listSiteAnalysesSlotNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticAnalysisCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listSiteDetectorsSlotNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DiagnosticDetectorCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.siteName,\n    Parameters.diagnosticCategory,\n    Parameters.slot,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}