"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowRunActionRepetitionsImpl = void 0;
const tslib_1 = require("tslib");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/// <reference lib="esnext.asynciterable" />
/** Class containing WorkflowRunActionRepetitions operations. */
class WorkflowRunActionRepetitionsImpl {
    /**
     * Initialize a new instance of the class WorkflowRunActionRepetitions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all of a workflow run action repetitions.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param options The options parameters.
     */
    list(resourceGroupName, name, workflowName, runName, actionName, options) {
        const iter = this.listPagingAll(resourceGroupName, name, workflowName, runName, actionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, name, workflowName, runName, actionName, options, settings);
            },
        };
    }
    listPagingPage(resourceGroupName, name, workflowName, runName, actionName, options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._list(resourceGroupName, name, workflowName, runName, actionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listNext(resourceGroupName, name, workflowName, runName, actionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, name, workflowName, runName, actionName, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listPagingPage(resourceGroupName, name, workflowName, runName, actionName, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists a workflow run expression trace.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param options The options parameters.
     */
    listExpressionTraces(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options) {
        const iter = this.listExpressionTracesPagingAll(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listExpressionTracesPagingPage(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options, settings);
            },
        };
    }
    listExpressionTracesPagingPage(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listExpressionTracesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listExpressionTraces(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options));
                let page = result.inputs || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listExpressionTracesNext(resourceGroupName, name, workflowName, runName, actionName, repetitionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.inputs || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listExpressionTracesPagingAll(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listExpressionTracesPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listExpressionTracesPagingPage(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get all of a workflow run action repetitions.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, name, workflowName, runName, actionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, name, workflowName, runName, actionName, options }, listOperationSpec);
    }
    /**
     * Get a workflow run action repetition.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param options The options parameters.
     */
    get(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            name,
            workflowName,
            runName,
            actionName,
            repetitionName,
            options,
        }, getOperationSpec);
    }
    /**
     * Lists a workflow run expression trace.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param options The options parameters.
     */
    _listExpressionTraces(resourceGroupName, name, workflowName, runName, actionName, repetitionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            name,
            workflowName,
            runName,
            actionName,
            repetitionName,
            options,
        }, listExpressionTracesOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, name, workflowName, runName, actionName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            name,
            workflowName,
            runName,
            actionName,
            nextLink,
            options,
        }, listNextOperationSpec);
    }
    /**
     * ListExpressionTracesNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param nextLink The nextLink from the previous successful call to the ListExpressionTraces method.
     * @param options The options parameters.
     */
    _listExpressionTracesNext(resourceGroupName, name, workflowName, runName, actionName, repetitionName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            name,
            workflowName,
            runName,
            actionName,
            repetitionName,
            nextLink,
            options,
        }, listExpressionTracesNextOperationSpec);
    }
}
exports.WorkflowRunActionRepetitionsImpl = WorkflowRunActionRepetitionsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkflowRunActionRepetitionDefinitionCollection,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workflowName1,
        Parameters.runName,
        Parameters.actionName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkflowRunActionRepetitionDefinition,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workflowName1,
        Parameters.runName,
        Parameters.actionName,
        Parameters.repetitionName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listExpressionTracesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostruntime/runtime/webhooks/workflow/api/management/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ExpressionTraces,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.workflowName1,
        Parameters.runName,
        Parameters.actionName,
        Parameters.repetitionName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkflowRunActionRepetitionDefinitionCollection,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.nextLink,
        Parameters.workflowName1,
        Parameters.runName,
        Parameters.actionName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listExpressionTracesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ExpressionTraces,
        },
        default: {
            bodyMapper: Mappers.ErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.nextLink,
        Parameters.workflowName1,
        Parameters.runName,
        Parameters.actionName,
        Parameters.repetitionName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=workflowRunActionRepetitions.js.map