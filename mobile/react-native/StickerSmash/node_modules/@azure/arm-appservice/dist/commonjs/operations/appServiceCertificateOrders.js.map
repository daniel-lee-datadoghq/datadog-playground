{"version":3,"file":"appServiceCertificateOrders.js","sourceRoot":"","sources":["../../../src/operations/appServiceCertificateOrders.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { AppServiceCertificateOrders } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { WebSiteManagementClient } from \"../webSiteManagementClient.js\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller,\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  AppServiceCertificateOrder,\n  AppServiceCertificateOrdersListNextOptionalParams,\n  AppServiceCertificateOrdersListOptionalParams,\n  AppServiceCertificateOrdersListResponse,\n  AppServiceCertificateOrdersListByResourceGroupNextOptionalParams,\n  AppServiceCertificateOrdersListByResourceGroupOptionalParams,\n  AppServiceCertificateOrdersListByResourceGroupResponse,\n  AppServiceCertificateResource,\n  AppServiceCertificateOrdersListCertificatesNextOptionalParams,\n  AppServiceCertificateOrdersListCertificatesOptionalParams,\n  AppServiceCertificateOrdersListCertificatesResponse,\n  AppServiceCertificateOrdersValidatePurchaseInformationOptionalParams,\n  AppServiceCertificateOrdersGetOptionalParams,\n  AppServiceCertificateOrdersGetResponse,\n  AppServiceCertificateOrdersCreateOrUpdateOptionalParams,\n  AppServiceCertificateOrdersCreateOrUpdateResponse,\n  AppServiceCertificateOrdersDeleteOptionalParams,\n  AppServiceCertificateOrderPatchResource,\n  AppServiceCertificateOrdersUpdateOptionalParams,\n  AppServiceCertificateOrdersUpdateResponse,\n  AppServiceCertificateOrdersGetCertificateOptionalParams,\n  AppServiceCertificateOrdersGetCertificateResponse,\n  AppServiceCertificateOrdersCreateOrUpdateCertificateOptionalParams,\n  AppServiceCertificateOrdersCreateOrUpdateCertificateResponse,\n  AppServiceCertificateOrdersDeleteCertificateOptionalParams,\n  AppServiceCertificatePatchResource,\n  AppServiceCertificateOrdersUpdateCertificateOptionalParams,\n  AppServiceCertificateOrdersUpdateCertificateResponse,\n  ReissueCertificateOrderRequest,\n  AppServiceCertificateOrdersReissueOptionalParams,\n  RenewCertificateOrderRequest,\n  AppServiceCertificateOrdersRenewOptionalParams,\n  AppServiceCertificateOrdersResendEmailOptionalParams,\n  NameIdentifier,\n  AppServiceCertificateOrdersResendRequestEmailsOptionalParams,\n  SiteSealRequest,\n  AppServiceCertificateOrdersRetrieveSiteSealOptionalParams,\n  AppServiceCertificateOrdersRetrieveSiteSealResponse,\n  AppServiceCertificateOrdersVerifyDomainOwnershipOptionalParams,\n  AppServiceCertificateOrdersRetrieveCertificateActionsOptionalParams,\n  AppServiceCertificateOrdersRetrieveCertificateActionsResponse,\n  AppServiceCertificateOrdersRetrieveCertificateEmailHistoryOptionalParams,\n  AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse,\n  AppServiceCertificateOrdersListNextResponse,\n  AppServiceCertificateOrdersListByResourceGroupNextResponse,\n  AppServiceCertificateOrdersListCertificatesNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing AppServiceCertificateOrders operations. */\nexport class AppServiceCertificateOrdersImpl\n  implements AppServiceCertificateOrders\n{\n  private readonly client: WebSiteManagementClient;\n\n  /**\n   * Initialize a new instance of the class AppServiceCertificateOrders class.\n   * @param client Reference to the service client\n   */\n  constructor(client: WebSiteManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Description for List all certificate orders in a subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: AppServiceCertificateOrdersListOptionalParams,\n  ): PagedAsyncIterableIterator<AppServiceCertificateOrder> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: AppServiceCertificateOrdersListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<AppServiceCertificateOrder[]> {\n    let result: AppServiceCertificateOrdersListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: AppServiceCertificateOrdersListOptionalParams,\n  ): AsyncIterableIterator<AppServiceCertificateOrder> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for Get certificate orders in a resource group.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: AppServiceCertificateOrdersListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<AppServiceCertificateOrder> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: AppServiceCertificateOrdersListByResourceGroupOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<AppServiceCertificateOrder[]> {\n    let result: AppServiceCertificateOrdersListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: AppServiceCertificateOrdersListByResourceGroupOptionalParams,\n  ): AsyncIterableIterator<AppServiceCertificateOrder> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for List all certificates associated with a certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param options The options parameters.\n   */\n  public listCertificates(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersListCertificatesOptionalParams,\n  ): PagedAsyncIterableIterator<AppServiceCertificateResource> {\n    const iter = this.listCertificatesPagingAll(\n      resourceGroupName,\n      certificateOrderName,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listCertificatesPagingPage(\n          resourceGroupName,\n          certificateOrderName,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listCertificatesPagingPage(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersListCertificatesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<AppServiceCertificateResource[]> {\n    let result: AppServiceCertificateOrdersListCertificatesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listCertificates(\n        resourceGroupName,\n        certificateOrderName,\n        options,\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listCertificatesNext(\n        resourceGroupName,\n        certificateOrderName,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listCertificatesPagingAll(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersListCertificatesOptionalParams,\n  ): AsyncIterableIterator<AppServiceCertificateResource> {\n    for await (const page of this.listCertificatesPagingPage(\n      resourceGroupName,\n      certificateOrderName,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Description for List all certificate orders in a subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: AppServiceCertificateOrdersListOptionalParams,\n  ): Promise<AppServiceCertificateOrdersListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Description for Validate information for a certificate order.\n   * @param appServiceCertificateOrder Information for a certificate order.\n   * @param options The options parameters.\n   */\n  validatePurchaseInformation(\n    appServiceCertificateOrder: AppServiceCertificateOrder,\n    options?: AppServiceCertificateOrdersValidatePurchaseInformationOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { appServiceCertificateOrder, options },\n      validatePurchaseInformationOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get certificate orders in a resource group.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: AppServiceCertificateOrdersListByResourceGroupOptionalParams,\n  ): Promise<AppServiceCertificateOrdersListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get a certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order..\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersGetOptionalParams,\n  ): Promise<AppServiceCertificateOrdersGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, options },\n      getOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Create or update a certificate purchase order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param certificateDistinguishedName Distinguished name to use for the certificate order.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    certificateDistinguishedName: AppServiceCertificateOrder,\n    options?: AppServiceCertificateOrdersCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<AppServiceCertificateOrdersCreateOrUpdateResponse>,\n      AppServiceCertificateOrdersCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<AppServiceCertificateOrdersCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        certificateOrderName,\n        certificateDistinguishedName,\n        options,\n      },\n      spec: createOrUpdateOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      AppServiceCertificateOrdersCreateOrUpdateResponse,\n      OperationState<AppServiceCertificateOrdersCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Description for Create or update a certificate purchase order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param certificateDistinguishedName Distinguished name to use for the certificate order.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    certificateDistinguishedName: AppServiceCertificateOrder,\n    options?: AppServiceCertificateOrdersCreateOrUpdateOptionalParams,\n  ): Promise<AppServiceCertificateOrdersCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      certificateOrderName,\n      certificateDistinguishedName,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Description for Delete an existing certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersDeleteOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, options },\n      deleteOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Create or update a certificate purchase order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param certificateDistinguishedName Distinguished name to use for the certificate order.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    certificateDistinguishedName: AppServiceCertificateOrderPatchResource,\n    options?: AppServiceCertificateOrdersUpdateOptionalParams,\n  ): Promise<AppServiceCertificateOrdersUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        certificateOrderName,\n        certificateDistinguishedName,\n        options,\n      },\n      updateOperationSpec,\n    );\n  }\n\n  /**\n   * Description for List all certificates associated with a certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param options The options parameters.\n   */\n  private _listCertificates(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersListCertificatesOptionalParams,\n  ): Promise<AppServiceCertificateOrdersListCertificatesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, options },\n      listCertificatesOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Get the certificate associated with a certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param name Name of the certificate.\n   * @param options The options parameters.\n   */\n  getCertificate(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    name: string,\n    options?: AppServiceCertificateOrdersGetCertificateOptionalParams,\n  ): Promise<AppServiceCertificateOrdersGetCertificateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, name, options },\n      getCertificateOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Creates or updates a certificate and associates with key vault secret.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param name Name of the certificate.\n   * @param keyVaultCertificate Key vault certificate resource Id.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateCertificate(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    name: string,\n    keyVaultCertificate: AppServiceCertificateResource,\n    options?: AppServiceCertificateOrdersCreateOrUpdateCertificateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<AppServiceCertificateOrdersCreateOrUpdateCertificateResponse>,\n      AppServiceCertificateOrdersCreateOrUpdateCertificateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<AppServiceCertificateOrdersCreateOrUpdateCertificateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        certificateOrderName,\n        name,\n        keyVaultCertificate,\n        options,\n      },\n      spec: createOrUpdateCertificateOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      AppServiceCertificateOrdersCreateOrUpdateCertificateResponse,\n      OperationState<AppServiceCertificateOrdersCreateOrUpdateCertificateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Description for Creates or updates a certificate and associates with key vault secret.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param name Name of the certificate.\n   * @param keyVaultCertificate Key vault certificate resource Id.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateCertificateAndWait(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    name: string,\n    keyVaultCertificate: AppServiceCertificateResource,\n    options?: AppServiceCertificateOrdersCreateOrUpdateCertificateOptionalParams,\n  ): Promise<AppServiceCertificateOrdersCreateOrUpdateCertificateResponse> {\n    const poller = await this.beginCreateOrUpdateCertificate(\n      resourceGroupName,\n      certificateOrderName,\n      name,\n      keyVaultCertificate,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Description for Delete the certificate associated with a certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param name Name of the certificate.\n   * @param options The options parameters.\n   */\n  deleteCertificate(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    name: string,\n    options?: AppServiceCertificateOrdersDeleteCertificateOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, name, options },\n      deleteCertificateOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Creates or updates a certificate and associates with key vault secret.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param name Name of the certificate.\n   * @param keyVaultCertificate Key vault certificate resource Id.\n   * @param options The options parameters.\n   */\n  updateCertificate(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    name: string,\n    keyVaultCertificate: AppServiceCertificatePatchResource,\n    options?: AppServiceCertificateOrdersUpdateCertificateOptionalParams,\n  ): Promise<AppServiceCertificateOrdersUpdateCertificateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        certificateOrderName,\n        name,\n        keyVaultCertificate,\n        options,\n      },\n      updateCertificateOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Reissue an existing certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param reissueCertificateOrderRequest Parameters for the reissue.\n   * @param options The options parameters.\n   */\n  reissue(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    reissueCertificateOrderRequest: ReissueCertificateOrderRequest,\n    options?: AppServiceCertificateOrdersReissueOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        certificateOrderName,\n        reissueCertificateOrderRequest,\n        options,\n      },\n      reissueOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Renew an existing certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param renewCertificateOrderRequest Renew parameters\n   * @param options The options parameters.\n   */\n  renew(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    renewCertificateOrderRequest: RenewCertificateOrderRequest,\n    options?: AppServiceCertificateOrdersRenewOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        certificateOrderName,\n        renewCertificateOrderRequest,\n        options,\n      },\n      renewOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Resend certificate email.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param options The options parameters.\n   */\n  resendEmail(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersResendEmailOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, options },\n      resendEmailOperationSpec,\n    );\n  }\n\n  /**\n   * Resend domain verification ownership email containing steps on how to verify a domain for a given\n   * certificate order\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param nameIdentifier Email address\n   * @param options The options parameters.\n   */\n  resendRequestEmails(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    nameIdentifier: NameIdentifier,\n    options?: AppServiceCertificateOrdersResendRequestEmailsOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, nameIdentifier, options },\n      resendRequestEmailsOperationSpec,\n    );\n  }\n\n  /**\n   * This method is used to obtain the site seal information for an issued certificate. A site seal is a\n   * graphic that the certificate purchaser can embed on their web site to show their visitors\n   * information about their SSL certificate. If a web site visitor clicks on the site seal image, a\n   * pop-up page is displayed that contains detailed information about the SSL certificate. The site seal\n   * token is used to link the site seal graphic image to the appropriate certificate details pop-up page\n   * display when a user clicks on the site seal. The site seal images are expected to be static images\n   * and hosted by the reseller, to minimize delays for customer page load times.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param siteSealRequest Site seal request.\n   * @param options The options parameters.\n   */\n  retrieveSiteSeal(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    siteSealRequest: SiteSealRequest,\n    options?: AppServiceCertificateOrdersRetrieveSiteSealOptionalParams,\n  ): Promise<AppServiceCertificateOrdersRetrieveSiteSealResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, siteSealRequest, options },\n      retrieveSiteSealOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Verify domain ownership for this certificate order.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param options The options parameters.\n   */\n  verifyDomainOwnership(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    options?: AppServiceCertificateOrdersVerifyDomainOwnershipOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, options },\n      verifyDomainOwnershipOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Retrieve the list of certificate actions.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Name of the certificate order.\n   * @param options The options parameters.\n   */\n  retrieveCertificateActions(\n    resourceGroupName: string,\n    name: string,\n    options?: AppServiceCertificateOrdersRetrieveCertificateActionsOptionalParams,\n  ): Promise<AppServiceCertificateOrdersRetrieveCertificateActionsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, name, options },\n      retrieveCertificateActionsOperationSpec,\n    );\n  }\n\n  /**\n   * Description for Retrieve email history.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Name of the certificate order.\n   * @param options The options parameters.\n   */\n  retrieveCertificateEmailHistory(\n    resourceGroupName: string,\n    name: string,\n    options?: AppServiceCertificateOrdersRetrieveCertificateEmailHistoryOptionalParams,\n  ): Promise<AppServiceCertificateOrdersRetrieveCertificateEmailHistoryResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, name, options },\n      retrieveCertificateEmailHistoryOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: AppServiceCertificateOrdersListNextOptionalParams,\n  ): Promise<AppServiceCertificateOrdersListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: AppServiceCertificateOrdersListByResourceGroupNextOptionalParams,\n  ): Promise<AppServiceCertificateOrdersListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListCertificatesNext\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param certificateOrderName Name of the certificate order.\n   * @param nextLink The nextLink from the previous successful call to the ListCertificates method.\n   * @param options The options parameters.\n   */\n  private _listCertificatesNext(\n    resourceGroupName: string,\n    certificateOrderName: string,\n    nextLink: string,\n    options?: AppServiceCertificateOrdersListCertificatesNextOptionalParams,\n  ): Promise<AppServiceCertificateOrdersListCertificatesNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, certificateOrderName, nextLink, options },\n      listCertificatesNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateOrderCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst validatePurchaseInformationOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.appServiceCertificateOrder,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateOrderCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateOrder,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateOrder,\n    },\n    201: {\n      bodyMapper: Mappers.AppServiceCertificateOrder,\n    },\n    202: {\n      bodyMapper: Mappers.AppServiceCertificateOrder,\n    },\n    204: {\n      bodyMapper: Mappers.AppServiceCertificateOrder,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.certificateDistinguishedName,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateOrder,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.certificateDistinguishedName1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listCertificatesOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getCertificateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateResource,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n    Parameters.name,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateCertificateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateResource,\n    },\n    201: {\n      bodyMapper: Mappers.AppServiceCertificateResource,\n    },\n    202: {\n      bodyMapper: Mappers.AppServiceCertificateResource,\n    },\n    204: {\n      bodyMapper: Mappers.AppServiceCertificateResource,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.keyVaultCertificate,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n    Parameters.name,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteCertificateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n    Parameters.name,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateCertificateOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateResource,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.keyVaultCertificate1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n    Parameters.name,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst reissueOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.reissueCertificateOrderRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst renewOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.renewCertificateOrderRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst resendEmailOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst resendRequestEmailsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.nameIdentifier,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst retrieveSiteSealOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SiteSeal,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  requestBody: Parameters.siteSealRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst verifyDomainOwnershipOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst retrieveCertificateActionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"CertificateOrderAction\" },\n          },\n        },\n      },\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.name,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst retrieveCertificateEmailHistoryOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: { name: \"Composite\", className: \"CertificateEmail\" },\n          },\n        },\n      },\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.name,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateOrderCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateOrderCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listCertificatesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AppServiceCertificateCollection,\n    },\n    default: {\n      bodyMapper: Mappers.DefaultErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.certificateOrderName,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}