"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.namespaceName = exports.appServicePlan1 = exports.appServicePlan = exports.detailed = exports.workerPoolEnvelope = exports.workerPoolName = exports.filter = exports.propertiesToInclude = exports.privateEndpointWrapper = exports.privateEndpointConnectionName = exports.instance = exports.multiRolePoolEnvelope = exports.diagnosticsName = exports.aseNetworkingConfiguration = exports.customDnsSuffixConfiguration = exports.vnetInfo = exports.hostingEnvironmentEnvelope1 = exports.forceDelete = exports.hostingEnvironmentEnvelope = exports.agreementOption = exports.domainOwnershipIdentifier = exports.domain1 = exports.forceHardDeleteDomain = exports.domainName1 = exports.domain = exports.domainName = exports.parameters = exports.identifier = exports.timeGrain = exports.endTime = exports.startTime = exports.detectorName = exports.nextLink = exports.siteSealRequest = exports.nameIdentifier = exports.renewCertificateOrderRequest = exports.reissueCertificateOrderRequest = exports.keyVaultCertificate1 = exports.keyVaultCertificate = exports.name = exports.certificateDistinguishedName1 = exports.certificateDistinguishedName = exports.certificateOrderName = exports.resourceGroupName = exports.appServiceCertificateOrder = exports.contentType = exports.apiVersion = exports.subscriptionId = exports.$host = exports.accept = void 0;
exports.staticSiteEnvelope1 = exports.staticSiteEnvelope = exports.staticSitesWorkflowPreviewRequest = exports.location1 = exports.validateRequest = exports.moveResourceEnvelope = exports.parameters1 = exports.linuxDynamicWorkersEnabled = exports.xenonWorkersEnabled = exports.linuxWorkersEnabled = exports.sku = exports.hostname = exports.environmentId = exports.isFqdn = exports.typeParam = exports.name1 = exports.osType = exports.billingLocation = exports.requestMessage = exports.sourceControlType = exports.userDetails = exports.recommendationId = exports.updateSeen = exports.environmentName = exports.expiredOnly = exports.hostingEnvironmentName = exports.featured = exports.stackOsType = exports.osTypeSelected = exports.kubeEnvironmentEnvelope1 = exports.kubeEnvironmentEnvelope = exports.operationId = exports.slot = exports.analysisName = exports.diagnosticCategory = exports.siteName = exports.deletedSiteId = exports.location = exports.certificateEnvelope1 = exports.certificateEnvelope = exports.workerName = exports.route = exports.routeName = exports.connectionEnvelope = exports.gatewayName = exports.vnetName = exports.top = exports.skipToken = exports.softRestart = exports.relayName = void 0;
exports.deployment = exports.id = exports.deploymentStatusId = exports.webJobName = exports.accept2 = exports.accept1 = exports.snapshotId = exports.siteConfig = exports.slotConfigNames = exports.pushSettings = exports.metadata = exports.siteLogsConfig = exports.connectionStrings = exports.connectionStringKey = exports.appSettingKey = exports.azureStorageAccounts = exports.siteAuthSettingsV2 = exports.siteAuthSettings = exports.csmPublishingAccessPoliciesEntity = exports.request2 = exports.backupId = exports.request1 = exports.slotSwapEntity = exports.hostName = exports.siteEnvelope1 = exports.deleteEmptyServerFarm = exports.deleteMetrics = exports.siteEnvelope = exports.includeSlots = exports.isCleaningAuthConfig = exports.linkedBackendName = exports.staticSiteLinkedBackendEnvelope = exports.resetPropertiesEnvelope = exports.staticSiteCustomDomainRequestPropertiesEnvelope = exports.staticSiteUserRolesInvitationEnvelope = exports.basicAuthEnvelope = exports.basicAuthName = exports.staticSiteZipDeploymentEnvelope = exports.isForced = exports.staticSiteUserProvidedFunctionEnvelope = exports.functionAppName = exports.databaseConnectionRequestEnvelope1 = exports.databaseConnectionRequestEnvelope = exports.databaseConnectionName = exports.environmentName2 = exports.appSettings = exports.environmentName1 = exports.staticSiteUserEnvelope = exports.userid = exports.authprovider = void 0;
exports.actionName = exports.runName = exports.filter1 = exports.top1 = exports.validate = exports.workflowName1 = exports.keyType1 = exports.workflowName = exports.workflowArtifacts = exports.connectionEnvelope4 = exports.additionalFlags = exports.siteSourceControl = exports.siteExtensionId = exports.request3 = exports.containerName = exports.restoreRequest1 = exports.restoreRequest = exports.synchronous = exports.accept3 = exports.publishingProfileOptions = exports.publicCertificate = exports.publicCertificateName = exports.access = exports.premierAddOn1 = exports.premierAddOn = exports.premierAddOnName = exports.sasUrl = exports.maxFrameLength = exports.durationInSeconds = exports.view = exports.connectionEnvelope3 = exports.migrationRequestEnvelope = exports.subscriptionName = exports.migrationOptions = exports.baseAddress = exports.processId = exports.instanceId = exports.connectionEnvelope2 = exports.entityName = exports.connectionEnvelope1 = exports.hostNameBinding = exports.hostName1 = exports.keyType = exports.keyName = exports.key = exports.functionEnvelope = exports.functionName = exports.mSDeploy = exports.domainOwnershipIdentifier1 = exports.domainOwnershipIdentifierName = void 0;
exports.versionId = exports.historyName = exports.triggerName = exports.requestHistoryName = exports.repetitionName = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        xmlName: "$host",
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        xmlName: "subscriptionId",
        type: {
            name: "String",
        },
    },
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2024-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.appServiceCertificateOrder = {
    parameterPath: "appServiceCertificateOrder",
    mapper: mappers_js_1.AppServiceCertificateOrder,
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+[^\\.]$"),
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        xmlName: "resourceGroupName",
        type: {
            name: "String",
        },
    },
};
exports.certificateOrderName = {
    parameterPath: "certificateOrderName",
    mapper: {
        serializedName: "certificateOrderName",
        required: true,
        xmlName: "certificateOrderName",
        type: {
            name: "String",
        },
    },
};
exports.certificateDistinguishedName = {
    parameterPath: "certificateDistinguishedName",
    mapper: mappers_js_1.AppServiceCertificateOrder,
};
exports.certificateDistinguishedName1 = {
    parameterPath: "certificateDistinguishedName",
    mapper: mappers_js_1.AppServiceCertificateOrderPatchResource,
};
exports.name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
            name: "String",
        },
    },
};
exports.keyVaultCertificate = {
    parameterPath: "keyVaultCertificate",
    mapper: mappers_js_1.AppServiceCertificateResource,
};
exports.keyVaultCertificate1 = {
    parameterPath: "keyVaultCertificate",
    mapper: mappers_js_1.AppServiceCertificatePatchResource,
};
exports.reissueCertificateOrderRequest = {
    parameterPath: "reissueCertificateOrderRequest",
    mapper: mappers_js_1.ReissueCertificateOrderRequest,
};
exports.renewCertificateOrderRequest = {
    parameterPath: "renewCertificateOrderRequest",
    mapper: mappers_js_1.RenewCertificateOrderRequest,
};
exports.nameIdentifier = {
    parameterPath: "nameIdentifier",
    mapper: mappers_js_1.NameIdentifier,
};
exports.siteSealRequest = {
    parameterPath: "siteSealRequest",
    mapper: mappers_js_1.SiteSealRequest,
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        xmlName: "nextLink",
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.detectorName = {
    parameterPath: "detectorName",
    mapper: {
        serializedName: "detectorName",
        required: true,
        xmlName: "detectorName",
        type: {
            name: "String",
        },
    },
};
exports.startTime = {
    parameterPath: ["options", "startTime"],
    mapper: {
        serializedName: "startTime",
        xmlName: "startTime",
        type: {
            name: "DateTime",
        },
    },
};
exports.endTime = {
    parameterPath: ["options", "endTime"],
    mapper: {
        serializedName: "endTime",
        xmlName: "endTime",
        type: {
            name: "DateTime",
        },
    },
};
exports.timeGrain = {
    parameterPath: ["options", "timeGrain"],
    mapper: {
        constraints: {
            Pattern: new RegExp("PT[1-9][0-9]+[SMH]"),
        },
        serializedName: "timeGrain",
        xmlName: "timeGrain",
        type: {
            name: "String",
        },
    },
};
exports.identifier = {
    parameterPath: "identifier",
    mapper: mappers_js_1.NameIdentifier,
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DomainRecommendationSearchParameters,
};
exports.domainName = {
    parameterPath: "domainName",
    mapper: {
        serializedName: "domainName",
        required: true,
        xmlName: "domainName",
        type: {
            name: "String",
        },
    },
};
exports.domain = {
    parameterPath: "domain",
    mapper: mappers_js_1.Domain,
};
exports.domainName1 = {
    parameterPath: "domainName",
    mapper: {
        constraints: {
            Pattern: new RegExp("[a-zA-Z0-9][a-zA-Z0-9\\.-]+"),
        },
        serializedName: "domainName",
        required: true,
        xmlName: "domainName",
        type: {
            name: "String",
        },
    },
};
exports.forceHardDeleteDomain = {
    parameterPath: ["options", "forceHardDeleteDomain"],
    mapper: {
        serializedName: "forceHardDeleteDomain",
        xmlName: "forceHardDeleteDomain",
        type: {
            name: "Boolean",
        },
    },
};
exports.domain1 = {
    parameterPath: "domain",
    mapper: mappers_js_1.DomainPatchResource,
};
exports.domainOwnershipIdentifier = {
    parameterPath: "domainOwnershipIdentifier",
    mapper: mappers_js_1.DomainOwnershipIdentifier,
};
exports.agreementOption = {
    parameterPath: "agreementOption",
    mapper: mappers_js_1.TopLevelDomainAgreementOption,
};
exports.hostingEnvironmentEnvelope = {
    parameterPath: "hostingEnvironmentEnvelope",
    mapper: mappers_js_1.AppServiceEnvironmentResource,
};
exports.forceDelete = {
    parameterPath: ["options", "forceDelete"],
    mapper: {
        serializedName: "forceDelete",
        xmlName: "forceDelete",
        type: {
            name: "Boolean",
        },
    },
};
exports.hostingEnvironmentEnvelope1 = {
    parameterPath: "hostingEnvironmentEnvelope",
    mapper: mappers_js_1.AppServiceEnvironmentPatchResource,
};
exports.vnetInfo = {
    parameterPath: "vnetInfo",
    mapper: mappers_js_1.VirtualNetworkProfile,
};
exports.customDnsSuffixConfiguration = {
    parameterPath: "customDnsSuffixConfiguration",
    mapper: mappers_js_1.CustomDnsSuffixConfiguration,
};
exports.aseNetworkingConfiguration = {
    parameterPath: "aseNetworkingConfiguration",
    mapper: mappers_js_1.AseV3NetworkingConfiguration,
};
exports.diagnosticsName = {
    parameterPath: "diagnosticsName",
    mapper: {
        serializedName: "diagnosticsName",
        required: true,
        xmlName: "diagnosticsName",
        type: {
            name: "String",
        },
    },
};
exports.multiRolePoolEnvelope = {
    parameterPath: "multiRolePoolEnvelope",
    mapper: mappers_js_1.WorkerPoolResource,
};
exports.instance = {
    parameterPath: "instance",
    mapper: {
        serializedName: "instance",
        required: true,
        xmlName: "instance",
        type: {
            name: "String",
        },
    },
};
exports.privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        xmlName: "privateEndpointConnectionName",
        type: {
            name: "String",
        },
    },
};
exports.privateEndpointWrapper = {
    parameterPath: "privateEndpointWrapper",
    mapper: mappers_js_1.RemotePrivateEndpointConnectionARMResource,
};
exports.propertiesToInclude = {
    parameterPath: ["options", "propertiesToInclude"],
    mapper: {
        serializedName: "propertiesToInclude",
        xmlName: "propertiesToInclude",
        type: {
            name: "String",
        },
    },
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        xmlName: "$filter",
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.workerPoolName = {
    parameterPath: "workerPoolName",
    mapper: {
        serializedName: "workerPoolName",
        required: true,
        xmlName: "workerPoolName",
        type: {
            name: "String",
        },
    },
};
exports.workerPoolEnvelope = {
    parameterPath: "workerPoolEnvelope",
    mapper: mappers_js_1.WorkerPoolResource,
};
exports.detailed = {
    parameterPath: ["options", "detailed"],
    mapper: {
        serializedName: "detailed",
        xmlName: "detailed",
        type: {
            name: "Boolean",
        },
    },
};
exports.appServicePlan = {
    parameterPath: "appServicePlan",
    mapper: mappers_js_1.AppServicePlan,
};
exports.appServicePlan1 = {
    parameterPath: "appServicePlan",
    mapper: mappers_js_1.AppServicePlanPatchResource,
};
exports.namespaceName = {
    parameterPath: "namespaceName",
    mapper: {
        serializedName: "namespaceName",
        required: true,
        xmlName: "namespaceName",
        type: {
            name: "String",
        },
    },
};
exports.relayName = {
    parameterPath: "relayName",
    mapper: {
        serializedName: "relayName",
        required: true,
        xmlName: "relayName",
        type: {
            name: "String",
        },
    },
};
exports.softRestart = {
    parameterPath: ["options", "softRestart"],
    mapper: {
        serializedName: "softRestart",
        xmlName: "softRestart",
        type: {
            name: "Boolean",
        },
    },
};
exports.skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        xmlName: "$skipToken",
        type: {
            name: "String",
        },
    },
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        xmlName: "$top",
        type: {
            name: "String",
        },
    },
};
exports.vnetName = {
    parameterPath: "vnetName",
    mapper: {
        serializedName: "vnetName",
        required: true,
        xmlName: "vnetName",
        type: {
            name: "String",
        },
    },
};
exports.gatewayName = {
    parameterPath: "gatewayName",
    mapper: {
        serializedName: "gatewayName",
        required: true,
        xmlName: "gatewayName",
        type: {
            name: "String",
        },
    },
};
exports.connectionEnvelope = {
    parameterPath: "connectionEnvelope",
    mapper: mappers_js_1.VnetGateway,
};
exports.routeName = {
    parameterPath: "routeName",
    mapper: {
        serializedName: "routeName",
        required: true,
        xmlName: "routeName",
        type: {
            name: "String",
        },
    },
};
exports.route = {
    parameterPath: "route",
    mapper: mappers_js_1.VnetRoute,
};
exports.workerName = {
    parameterPath: "workerName",
    mapper: {
        serializedName: "workerName",
        required: true,
        xmlName: "workerName",
        type: {
            name: "String",
        },
    },
};
exports.certificateEnvelope = {
    parameterPath: "certificateEnvelope",
    mapper: mappers_js_1.Certificate,
};
exports.certificateEnvelope1 = {
    parameterPath: "certificateEnvelope",
    mapper: mappers_js_1.CertificatePatchResource,
};
exports.location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        xmlName: "location",
        type: {
            name: "String",
        },
    },
};
exports.deletedSiteId = {
    parameterPath: "deletedSiteId",
    mapper: {
        serializedName: "deletedSiteId",
        required: true,
        xmlName: "deletedSiteId",
        type: {
            name: "String",
        },
    },
};
exports.siteName = {
    parameterPath: "siteName",
    mapper: {
        serializedName: "siteName",
        required: true,
        xmlName: "siteName",
        type: {
            name: "String",
        },
    },
};
exports.diagnosticCategory = {
    parameterPath: "diagnosticCategory",
    mapper: {
        serializedName: "diagnosticCategory",
        required: true,
        xmlName: "diagnosticCategory",
        type: {
            name: "String",
        },
    },
};
exports.analysisName = {
    parameterPath: "analysisName",
    mapper: {
        serializedName: "analysisName",
        required: true,
        xmlName: "analysisName",
        type: {
            name: "String",
        },
    },
};
exports.slot = {
    parameterPath: "slot",
    mapper: {
        serializedName: "slot",
        required: true,
        xmlName: "slot",
        type: {
            name: "String",
        },
    },
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        xmlName: "operationId",
        type: {
            name: "String",
        },
    },
};
exports.kubeEnvironmentEnvelope = {
    parameterPath: "kubeEnvironmentEnvelope",
    mapper: mappers_js_1.KubeEnvironment,
};
exports.kubeEnvironmentEnvelope1 = {
    parameterPath: "kubeEnvironmentEnvelope",
    mapper: mappers_js_1.KubeEnvironmentPatchResource,
};
exports.osTypeSelected = {
    parameterPath: ["options", "osTypeSelected"],
    mapper: {
        serializedName: "osTypeSelected",
        xmlName: "osTypeSelected",
        type: {
            name: "String",
        },
    },
};
exports.stackOsType = {
    parameterPath: ["options", "stackOsType"],
    mapper: {
        serializedName: "stackOsType",
        xmlName: "stackOsType",
        type: {
            name: "String",
        },
    },
};
exports.featured = {
    parameterPath: ["options", "featured"],
    mapper: {
        serializedName: "featured",
        xmlName: "featured",
        type: {
            name: "Boolean",
        },
    },
};
exports.hostingEnvironmentName = {
    parameterPath: "hostingEnvironmentName",
    mapper: {
        serializedName: "hostingEnvironmentName",
        required: true,
        xmlName: "hostingEnvironmentName",
        type: {
            name: "String",
        },
    },
};
exports.expiredOnly = {
    parameterPath: ["options", "expiredOnly"],
    mapper: {
        serializedName: "expiredOnly",
        xmlName: "expiredOnly",
        type: {
            name: "Boolean",
        },
    },
};
exports.environmentName = {
    parameterPath: "environmentName",
    mapper: {
        serializedName: "environmentName",
        required: true,
        xmlName: "environmentName",
        type: {
            name: "String",
        },
    },
};
exports.updateSeen = {
    parameterPath: ["options", "updateSeen"],
    mapper: {
        serializedName: "updateSeen",
        xmlName: "updateSeen",
        type: {
            name: "Boolean",
        },
    },
};
exports.recommendationId = {
    parameterPath: ["options", "recommendationId"],
    mapper: {
        serializedName: "recommendationId",
        xmlName: "recommendationId",
        type: {
            name: "String",
        },
    },
};
exports.userDetails = {
    parameterPath: "userDetails",
    mapper: mappers_js_1.User,
};
exports.sourceControlType = {
    parameterPath: "sourceControlType",
    mapper: {
        serializedName: "sourceControlType",
        required: true,
        xmlName: "sourceControlType",
        type: {
            name: "String",
        },
    },
};
exports.requestMessage = {
    parameterPath: "requestMessage",
    mapper: mappers_js_1.SourceControl,
};
exports.billingLocation = {
    parameterPath: ["options", "billingLocation"],
    mapper: {
        serializedName: "billingLocation",
        xmlName: "billingLocation",
        type: {
            name: "String",
        },
    },
};
exports.osType = {
    parameterPath: ["options", "osType"],
    mapper: {
        serializedName: "osType",
        xmlName: "osType",
        type: {
            name: "String",
        },
    },
};
exports.name1 = {
    parameterPath: "name",
    mapper: mappers_js_1.ResourceNameAvailabilityRequest,
};
exports.typeParam = {
    parameterPath: "typeParam",
    mapper: mappers_js_1.ResourceNameAvailabilityRequest,
};
exports.isFqdn = {
    parameterPath: ["options", "isFqdn"],
    mapper: mappers_js_1.ResourceNameAvailabilityRequest,
};
exports.environmentId = {
    parameterPath: ["options", "environmentId"],
    mapper: mappers_js_1.ResourceNameAvailabilityRequest,
};
exports.hostname = {
    parameterPath: ["options", "hostname"],
    mapper: {
        serializedName: "hostname",
        xmlName: "hostname",
        type: {
            name: "String",
        },
    },
};
exports.sku = {
    parameterPath: ["options", "sku"],
    mapper: {
        serializedName: "sku",
        xmlName: "sku",
        type: {
            name: "String",
        },
    },
};
exports.linuxWorkersEnabled = {
    parameterPath: ["options", "linuxWorkersEnabled"],
    mapper: {
        serializedName: "linuxWorkersEnabled",
        xmlName: "linuxWorkersEnabled",
        type: {
            name: "Boolean",
        },
    },
};
exports.xenonWorkersEnabled = {
    parameterPath: ["options", "xenonWorkersEnabled"],
    mapper: {
        serializedName: "xenonWorkersEnabled",
        xmlName: "xenonWorkersEnabled",
        type: {
            name: "Boolean",
        },
    },
};
exports.linuxDynamicWorkersEnabled = {
    parameterPath: ["options", "linuxDynamicWorkersEnabled"],
    mapper: {
        serializedName: "linuxDynamicWorkersEnabled",
        xmlName: "linuxDynamicWorkersEnabled",
        type: {
            name: "Boolean",
        },
    },
};
exports.parameters1 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.VnetParameters,
};
exports.moveResourceEnvelope = {
    parameterPath: "moveResourceEnvelope",
    mapper: mappers_js_1.CsmMoveResourceEnvelope,
};
exports.validateRequest = {
    parameterPath: "validateRequest",
    mapper: mappers_js_1.ValidateRequest,
};
exports.location1 = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "location",
        required: true,
        xmlName: "location",
        type: {
            name: "String",
        },
    },
};
exports.staticSitesWorkflowPreviewRequest = {
    parameterPath: "staticSitesWorkflowPreviewRequest",
    mapper: mappers_js_1.StaticSitesWorkflowPreviewRequest,
};
exports.staticSiteEnvelope = {
    parameterPath: "staticSiteEnvelope",
    mapper: mappers_js_1.StaticSiteARMResource,
};
exports.staticSiteEnvelope1 = {
    parameterPath: "staticSiteEnvelope",
    mapper: mappers_js_1.StaticSitePatchResource,
};
exports.authprovider = {
    parameterPath: "authprovider",
    mapper: {
        serializedName: "authprovider",
        required: true,
        xmlName: "authprovider",
        type: {
            name: "String",
        },
    },
};
exports.userid = {
    parameterPath: "userid",
    mapper: {
        serializedName: "userid",
        required: true,
        xmlName: "userid",
        type: {
            name: "String",
        },
    },
};
exports.staticSiteUserEnvelope = {
    parameterPath: "staticSiteUserEnvelope",
    mapper: mappers_js_1.StaticSiteUserARMResource,
};
exports.environmentName1 = {
    parameterPath: "environmentName",
    mapper: {
        serializedName: "environmentName",
        required: true,
        xmlName: "environmentName",
        type: {
            name: "String",
        },
    },
};
exports.appSettings = {
    parameterPath: "appSettings",
    mapper: mappers_js_1.StringDictionary,
};
exports.environmentName2 = {
    parameterPath: "environmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+$"),
        },
        serializedName: "environmentName",
        required: true,
        xmlName: "environmentName",
        type: {
            name: "String",
        },
    },
};
exports.databaseConnectionName = {
    parameterPath: "databaseConnectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+$"),
        },
        serializedName: "databaseConnectionName",
        required: true,
        xmlName: "databaseConnectionName",
        type: {
            name: "String",
        },
    },
};
exports.databaseConnectionRequestEnvelope = {
    parameterPath: "databaseConnectionRequestEnvelope",
    mapper: mappers_js_1.DatabaseConnection,
};
exports.databaseConnectionRequestEnvelope1 = {
    parameterPath: "databaseConnectionRequestEnvelope",
    mapper: mappers_js_1.DatabaseConnectionPatchRequest,
};
exports.functionAppName = {
    parameterPath: "functionAppName",
    mapper: {
        serializedName: "functionAppName",
        required: true,
        xmlName: "functionAppName",
        type: {
            name: "String",
        },
    },
};
exports.staticSiteUserProvidedFunctionEnvelope = {
    parameterPath: "staticSiteUserProvidedFunctionEnvelope",
    mapper: mappers_js_1.StaticSiteUserProvidedFunctionAppARMResource,
};
exports.isForced = {
    parameterPath: ["options", "isForced"],
    mapper: {
        serializedName: "isForced",
        xmlName: "isForced",
        type: {
            name: "Boolean",
        },
    },
};
exports.staticSiteZipDeploymentEnvelope = {
    parameterPath: "staticSiteZipDeploymentEnvelope",
    mapper: mappers_js_1.StaticSiteZipDeploymentARMResource,
};
exports.basicAuthName = {
    parameterPath: "basicAuthName",
    mapper: {
        serializedName: "basicAuthName",
        required: true,
        xmlName: "basicAuthName",
        type: {
            name: "String",
        },
    },
};
exports.basicAuthEnvelope = {
    parameterPath: "basicAuthEnvelope",
    mapper: mappers_js_1.StaticSiteBasicAuthPropertiesARMResource,
};
exports.staticSiteUserRolesInvitationEnvelope = {
    parameterPath: "staticSiteUserRolesInvitationEnvelope",
    mapper: mappers_js_1.StaticSiteUserInvitationRequestResource,
};
exports.staticSiteCustomDomainRequestPropertiesEnvelope = {
    parameterPath: "staticSiteCustomDomainRequestPropertiesEnvelope",
    mapper: mappers_js_1.StaticSiteCustomDomainRequestPropertiesARMResource,
};
exports.resetPropertiesEnvelope = {
    parameterPath: "resetPropertiesEnvelope",
    mapper: mappers_js_1.StaticSiteResetPropertiesARMResource,
};
exports.staticSiteLinkedBackendEnvelope = {
    parameterPath: "staticSiteLinkedBackendEnvelope",
    mapper: mappers_js_1.StaticSiteLinkedBackendARMResource,
};
exports.linkedBackendName = {
    parameterPath: "linkedBackendName",
    mapper: {
        serializedName: "linkedBackendName",
        required: true,
        xmlName: "linkedBackendName",
        type: {
            name: "String",
        },
    },
};
exports.isCleaningAuthConfig = {
    parameterPath: ["options", "isCleaningAuthConfig"],
    mapper: {
        serializedName: "isCleaningAuthConfig",
        xmlName: "isCleaningAuthConfig",
        type: {
            name: "Boolean",
        },
    },
};
exports.includeSlots = {
    parameterPath: ["options", "includeSlots"],
    mapper: {
        serializedName: "includeSlots",
        xmlName: "includeSlots",
        type: {
            name: "Boolean",
        },
    },
};
exports.siteEnvelope = {
    parameterPath: "siteEnvelope",
    mapper: mappers_js_1.Site,
};
exports.deleteMetrics = {
    parameterPath: ["options", "deleteMetrics"],
    mapper: {
        serializedName: "deleteMetrics",
        xmlName: "deleteMetrics",
        type: {
            name: "Boolean",
        },
    },
};
exports.deleteEmptyServerFarm = {
    parameterPath: ["options", "deleteEmptyServerFarm"],
    mapper: {
        serializedName: "deleteEmptyServerFarm",
        xmlName: "deleteEmptyServerFarm",
        type: {
            name: "Boolean",
        },
    },
};
exports.siteEnvelope1 = {
    parameterPath: "siteEnvelope",
    mapper: mappers_js_1.SitePatchResource,
};
exports.hostName = {
    parameterPath: ["options", "hostName"],
    mapper: {
        serializedName: "hostName",
        xmlName: "hostName",
        type: {
            name: "String",
        },
    },
};
exports.slotSwapEntity = {
    parameterPath: "slotSwapEntity",
    mapper: mappers_js_1.CsmSlotEntity,
};
exports.request1 = {
    parameterPath: "request",
    mapper: mappers_js_1.BackupRequest,
};
exports.backupId = {
    parameterPath: "backupId",
    mapper: {
        serializedName: "backupId",
        required: true,
        xmlName: "backupId",
        type: {
            name: "String",
        },
    },
};
exports.request2 = {
    parameterPath: "request",
    mapper: mappers_js_1.RestoreRequest,
};
exports.csmPublishingAccessPoliciesEntity = {
    parameterPath: "csmPublishingAccessPoliciesEntity",
    mapper: mappers_js_1.CsmPublishingCredentialsPoliciesEntity,
};
exports.siteAuthSettings = {
    parameterPath: "siteAuthSettings",
    mapper: mappers_js_1.SiteAuthSettings,
};
exports.siteAuthSettingsV2 = {
    parameterPath: "siteAuthSettingsV2",
    mapper: mappers_js_1.SiteAuthSettingsV2,
};
exports.azureStorageAccounts = {
    parameterPath: "azureStorageAccounts",
    mapper: mappers_js_1.AzureStoragePropertyDictionaryResource,
};
exports.appSettingKey = {
    parameterPath: "appSettingKey",
    mapper: {
        serializedName: "appSettingKey",
        required: true,
        xmlName: "appSettingKey",
        type: {
            name: "String",
        },
    },
};
exports.connectionStringKey = {
    parameterPath: "connectionStringKey",
    mapper: {
        serializedName: "connectionStringKey",
        required: true,
        xmlName: "connectionStringKey",
        type: {
            name: "String",
        },
    },
};
exports.connectionStrings = {
    parameterPath: "connectionStrings",
    mapper: mappers_js_1.ConnectionStringDictionary,
};
exports.siteLogsConfig = {
    parameterPath: "siteLogsConfig",
    mapper: mappers_js_1.SiteLogsConfig,
};
exports.metadata = {
    parameterPath: "metadata",
    mapper: mappers_js_1.StringDictionary,
};
exports.pushSettings = {
    parameterPath: "pushSettings",
    mapper: mappers_js_1.PushSettings,
};
exports.slotConfigNames = {
    parameterPath: "slotConfigNames",
    mapper: mappers_js_1.SlotConfigNamesResource,
};
exports.siteConfig = {
    parameterPath: "siteConfig",
    mapper: mappers_js_1.SiteConfigResource,
};
exports.snapshotId = {
    parameterPath: "snapshotId",
    mapper: {
        serializedName: "snapshotId",
        required: true,
        xmlName: "snapshotId",
        type: {
            name: "String",
        },
    },
};
exports.accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/octet-stream",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/zip",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.webJobName = {
    parameterPath: "webJobName",
    mapper: {
        serializedName: "webJobName",
        required: true,
        xmlName: "webJobName",
        type: {
            name: "String",
        },
    },
};
exports.deploymentStatusId = {
    parameterPath: "deploymentStatusId",
    mapper: {
        serializedName: "deploymentStatusId",
        required: true,
        xmlName: "deploymentStatusId",
        type: {
            name: "String",
        },
    },
};
exports.id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        xmlName: "id",
        type: {
            name: "String",
        },
    },
};
exports.deployment = {
    parameterPath: "deployment",
    mapper: mappers_js_1.Deployment,
};
exports.domainOwnershipIdentifierName = {
    parameterPath: "domainOwnershipIdentifierName",
    mapper: {
        serializedName: "domainOwnershipIdentifierName",
        required: true,
        xmlName: "domainOwnershipIdentifierName",
        type: {
            name: "String",
        },
    },
};
exports.domainOwnershipIdentifier1 = {
    parameterPath: "domainOwnershipIdentifier",
    mapper: mappers_js_1.Identifier,
};
exports.mSDeploy = {
    parameterPath: "mSDeploy",
    mapper: mappers_js_1.MSDeploy,
};
exports.functionName = {
    parameterPath: "functionName",
    mapper: {
        serializedName: "functionName",
        required: true,
        xmlName: "functionName",
        type: {
            name: "String",
        },
    },
};
exports.functionEnvelope = {
    parameterPath: "functionEnvelope",
    mapper: mappers_js_1.FunctionEnvelope,
};
exports.key = {
    parameterPath: "key",
    mapper: mappers_js_1.KeyInfo,
};
exports.keyName = {
    parameterPath: "keyName",
    mapper: {
        serializedName: "keyName",
        required: true,
        xmlName: "keyName",
        type: {
            name: "String",
        },
    },
};
exports.keyType = {
    parameterPath: "keyType",
    mapper: {
        serializedName: "keyType",
        required: true,
        xmlName: "keyType",
        type: {
            name: "String",
        },
    },
};
exports.hostName1 = {
    parameterPath: "hostName",
    mapper: {
        serializedName: "hostName",
        required: true,
        xmlName: "hostName",
        type: {
            name: "String",
        },
    },
};
exports.hostNameBinding = {
    parameterPath: "hostNameBinding",
    mapper: mappers_js_1.HostNameBinding,
};
exports.connectionEnvelope1 = {
    parameterPath: "connectionEnvelope",
    mapper: mappers_js_1.HybridConnection,
};
exports.entityName = {
    parameterPath: "entityName",
    mapper: {
        serializedName: "entityName",
        required: true,
        xmlName: "entityName",
        type: {
            name: "String",
        },
    },
};
exports.connectionEnvelope2 = {
    parameterPath: "connectionEnvelope",
    mapper: mappers_js_1.RelayServiceConnectionEntity,
};
exports.instanceId = {
    parameterPath: "instanceId",
    mapper: {
        serializedName: "instanceId",
        required: true,
        xmlName: "instanceId",
        type: {
            name: "String",
        },
    },
};
exports.processId = {
    parameterPath: "processId",
    mapper: {
        serializedName: "processId",
        required: true,
        xmlName: "processId",
        type: {
            name: "String",
        },
    },
};
exports.baseAddress = {
    parameterPath: "baseAddress",
    mapper: {
        serializedName: "baseAddress",
        required: true,
        xmlName: "baseAddress",
        type: {
            name: "String",
        },
    },
};
exports.migrationOptions = {
    parameterPath: "migrationOptions",
    mapper: mappers_js_1.StorageMigrationOptions,
};
exports.subscriptionName = {
    parameterPath: "subscriptionName",
    mapper: {
        serializedName: "subscriptionName",
        required: true,
        xmlName: "subscriptionName",
        type: {
            name: "String",
        },
    },
};
exports.migrationRequestEnvelope = {
    parameterPath: "migrationRequestEnvelope",
    mapper: mappers_js_1.MigrateMySqlRequest,
};
exports.connectionEnvelope3 = {
    parameterPath: "connectionEnvelope",
    mapper: mappers_js_1.SwiftVirtualNetwork,
};
exports.view = {
    parameterPath: "view",
    mapper: {
        serializedName: "view",
        required: true,
        xmlName: "view",
        type: {
            name: "String",
        },
    },
};
exports.durationInSeconds = {
    parameterPath: ["options", "durationInSeconds"],
    mapper: {
        serializedName: "durationInSeconds",
        xmlName: "durationInSeconds",
        type: {
            name: "Number",
        },
    },
};
exports.maxFrameLength = {
    parameterPath: ["options", "maxFrameLength"],
    mapper: {
        serializedName: "maxFrameLength",
        xmlName: "maxFrameLength",
        type: {
            name: "Number",
        },
    },
};
exports.sasUrl = {
    parameterPath: ["options", "sasUrl"],
    mapper: {
        serializedName: "sasUrl",
        xmlName: "sasUrl",
        type: {
            name: "String",
        },
    },
};
exports.premierAddOnName = {
    parameterPath: "premierAddOnName",
    mapper: {
        serializedName: "premierAddOnName",
        required: true,
        xmlName: "premierAddOnName",
        type: {
            name: "String",
        },
    },
};
exports.premierAddOn = {
    parameterPath: "premierAddOn",
    mapper: mappers_js_1.PremierAddOn,
};
exports.premierAddOn1 = {
    parameterPath: "premierAddOn",
    mapper: mappers_js_1.PremierAddOnPatchResource,
};
exports.access = {
    parameterPath: "access",
    mapper: mappers_js_1.PrivateAccess,
};
exports.publicCertificateName = {
    parameterPath: "publicCertificateName",
    mapper: {
        serializedName: "publicCertificateName",
        required: true,
        xmlName: "publicCertificateName",
        type: {
            name: "String",
        },
    },
};
exports.publicCertificate = {
    parameterPath: "publicCertificate",
    mapper: mappers_js_1.PublicCertificate,
};
exports.publishingProfileOptions = {
    parameterPath: "publishingProfileOptions",
    mapper: mappers_js_1.CsmPublishingProfileOptions,
};
exports.accept3 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/xml",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.synchronous = {
    parameterPath: ["options", "synchronous"],
    mapper: {
        serializedName: "synchronous",
        xmlName: "synchronous",
        type: {
            name: "Boolean",
        },
    },
};
exports.restoreRequest = {
    parameterPath: "restoreRequest",
    mapper: mappers_js_1.DeletedAppRestoreRequest,
};
exports.restoreRequest1 = {
    parameterPath: "restoreRequest",
    mapper: mappers_js_1.SnapshotRestoreRequest,
};
exports.containerName = {
    parameterPath: "containerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("(^[a-zA-Z0-9]$)|(^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$)"),
        },
        serializedName: "containerName",
        required: true,
        xmlName: "containerName",
        type: {
            name: "String",
        },
    },
};
exports.request3 = {
    parameterPath: "request",
    mapper: mappers_js_1.SiteContainer,
};
exports.siteExtensionId = {
    parameterPath: "siteExtensionId",
    mapper: {
        serializedName: "siteExtensionId",
        required: true,
        xmlName: "siteExtensionId",
        type: {
            name: "String",
        },
    },
};
exports.siteSourceControl = {
    parameterPath: "siteSourceControl",
    mapper: mappers_js_1.SiteSourceControl,
};
exports.additionalFlags = {
    parameterPath: ["options", "additionalFlags"],
    mapper: {
        serializedName: "additionalFlags",
        xmlName: "additionalFlags",
        type: {
            name: "String",
        },
    },
};
exports.connectionEnvelope4 = {
    parameterPath: "connectionEnvelope",
    mapper: mappers_js_1.VnetInfoResource,
};
exports.workflowArtifacts = {
    parameterPath: ["options", "workflowArtifacts"],
    mapper: mappers_js_1.WorkflowArtifacts,
};
exports.workflowName = {
    parameterPath: "workflowName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]*$"),
            MaxLength: 63,
            MinLength: 3,
        },
        serializedName: "workflowName",
        required: true,
        xmlName: "workflowName",
        type: {
            name: "String",
        },
    },
};
exports.keyType1 = {
    parameterPath: "keyType",
    mapper: mappers_js_1.RegenerateActionParameter,
};
exports.workflowName1 = {
    parameterPath: "workflowName",
    mapper: {
        serializedName: "workflowName",
        required: true,
        xmlName: "workflowName",
        type: {
            name: "String",
        },
    },
};
exports.validate = {
    parameterPath: "validate",
    mapper: mappers_js_1.Workflow,
};
exports.top1 = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        xmlName: "$top",
        type: {
            name: "Number",
        },
    },
};
exports.filter1 = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        xmlName: "$filter",
        type: {
            name: "String",
        },
    },
};
exports.runName = {
    parameterPath: "runName",
    mapper: {
        serializedName: "runName",
        required: true,
        xmlName: "runName",
        type: {
            name: "String",
        },
    },
};
exports.actionName = {
    parameterPath: "actionName",
    mapper: {
        serializedName: "actionName",
        required: true,
        xmlName: "actionName",
        type: {
            name: "String",
        },
    },
};
exports.repetitionName = {
    parameterPath: "repetitionName",
    mapper: {
        serializedName: "repetitionName",
        required: true,
        xmlName: "repetitionName",
        type: {
            name: "String",
        },
    },
};
exports.requestHistoryName = {
    parameterPath: "requestHistoryName",
    mapper: {
        serializedName: "requestHistoryName",
        required: true,
        xmlName: "requestHistoryName",
        type: {
            name: "String",
        },
    },
};
exports.triggerName = {
    parameterPath: "triggerName",
    mapper: {
        serializedName: "triggerName",
        required: true,
        xmlName: "triggerName",
        type: {
            name: "String",
        },
    },
};
exports.historyName = {
    parameterPath: "historyName",
    mapper: {
        serializedName: "historyName",
        required: true,
        xmlName: "historyName",
        type: {
            name: "String",
        },
    },
};
exports.versionId = {
    parameterPath: "versionId",
    mapper: {
        serializedName: "versionId",
        required: true,
        xmlName: "versionId",
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map