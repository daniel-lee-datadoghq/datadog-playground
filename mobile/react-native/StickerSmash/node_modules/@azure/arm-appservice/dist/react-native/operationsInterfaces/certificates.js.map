{"version":3,"file":"certificates.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/certificates.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  Certificate,\n  CertificatesListOptionalParams,\n  CertificatesListByResourceGroupOptionalParams,\n  CertificatesGetOptionalParams,\n  CertificatesGetResponse,\n  CertificatesCreateOrUpdateOptionalParams,\n  CertificatesCreateOrUpdateResponse,\n  CertificatesDeleteOptionalParams,\n  CertificatePatchResource,\n  CertificatesUpdateOptionalParams,\n  CertificatesUpdateResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Certificates. */\nexport interface Certificates {\n  /**\n   * Description for Get all certificates for a subscription.\n   * @param options The options parameters.\n   */\n  list(\n    options?: CertificatesListOptionalParams,\n  ): PagedAsyncIterableIterator<Certificate>;\n  /**\n   * Description for Get all certificates in a resource group.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: CertificatesListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<Certificate>;\n  /**\n   * Description for Get a certificate.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Name of the certificate.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    name: string,\n    options?: CertificatesGetOptionalParams,\n  ): Promise<CertificatesGetResponse>;\n  /**\n   * Description for Create or update a certificate.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Name of the certificate.\n   * @param certificateEnvelope Details of certificate, if it exists already.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    name: string,\n    certificateEnvelope: Certificate,\n    options?: CertificatesCreateOrUpdateOptionalParams,\n  ): Promise<CertificatesCreateOrUpdateResponse>;\n  /**\n   * Description for Delete a certificate.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Name of the certificate.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    name: string,\n    options?: CertificatesDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Description for Create or update a certificate.\n   * @param resourceGroupName Name of the resource group to which the resource belongs.\n   * @param name Name of the certificate.\n   * @param certificateEnvelope Details of certificate, if it exists already.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    name: string,\n    certificateEnvelope: CertificatePatchResource,\n    options?: CertificatesUpdateOptionalParams,\n  ): Promise<CertificatesUpdateResponse>;\n}\n"]}