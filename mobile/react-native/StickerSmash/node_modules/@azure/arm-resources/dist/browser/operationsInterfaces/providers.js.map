{"version":3,"file":"providers.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/providers.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  Provider,\n  ProvidersListOptionalParams,\n  ProvidersListAtTenantScopeOptionalParams,\n  ProvidersUnregisterOptionalParams,\n  ProvidersUnregisterResponse,\n  ProvidersRegisterAtManagementGroupScopeOptionalParams,\n  ProvidersProviderPermissionsOptionalParams,\n  ProvidersProviderPermissionsResponse,\n  ProvidersRegisterOptionalParams,\n  ProvidersRegisterResponse,\n  ProvidersGetOptionalParams,\n  ProvidersGetResponse,\n  ProvidersGetAtTenantScopeOptionalParams,\n  ProvidersGetAtTenantScopeResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Providers. */\nexport interface Providers {\n  /**\n   * Gets all resource providers for a subscription.\n   * @param options The options parameters.\n   */\n  list(\n    options?: ProvidersListOptionalParams,\n  ): PagedAsyncIterableIterator<Provider>;\n  /**\n   * Gets all resource providers for the tenant.\n   * @param options The options parameters.\n   */\n  listAtTenantScope(\n    options?: ProvidersListAtTenantScopeOptionalParams,\n  ): PagedAsyncIterableIterator<Provider>;\n  /**\n   * Unregisters a subscription from a resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider to unregister.\n   * @param options The options parameters.\n   */\n  unregister(\n    resourceProviderNamespace: string,\n    options?: ProvidersUnregisterOptionalParams,\n  ): Promise<ProvidersUnregisterResponse>;\n  /**\n   * Registers a management group with a resource provider. Use this operation to register a resource\n   * provider with resource types that can be deployed at the management group scope. It does not\n   * recursively register subscriptions within the management group. Instead, you must register\n   * subscriptions individually.\n   * @param resourceProviderNamespace The namespace of the resource provider to register.\n   * @param groupId The management group ID.\n   * @param options The options parameters.\n   */\n  registerAtManagementGroupScope(\n    resourceProviderNamespace: string,\n    groupId: string,\n    options?: ProvidersRegisterAtManagementGroupScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Get the provider permissions.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  providerPermissions(\n    resourceProviderNamespace: string,\n    options?: ProvidersProviderPermissionsOptionalParams,\n  ): Promise<ProvidersProviderPermissionsResponse>;\n  /**\n   * Registers a subscription with a resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider to register.\n   * @param options The options parameters.\n   */\n  register(\n    resourceProviderNamespace: string,\n    options?: ProvidersRegisterOptionalParams,\n  ): Promise<ProvidersRegisterResponse>;\n  /**\n   * Gets the specified resource provider.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  get(\n    resourceProviderNamespace: string,\n    options?: ProvidersGetOptionalParams,\n  ): Promise<ProvidersGetResponse>;\n  /**\n   * Gets the specified resource provider at the tenant level.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param options The options parameters.\n   */\n  getAtTenantScope(\n    resourceProviderNamespace: string,\n    options?: ProvidersGetAtTenantScopeOptionalParams,\n  ): Promise<ProvidersGetAtTenantScopeResponse>;\n}\n"]}