{"version":3,"file":"resources.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/resources.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  GenericResourceExpanded,\n  ResourcesListByResourceGroupOptionalParams,\n  ResourcesListOptionalParams,\n  ResourcesMoveInfo,\n  ResourcesMoveResourcesOptionalParams,\n  ResourcesValidateMoveResourcesOptionalParams,\n  ResourcesCheckExistenceOptionalParams,\n  ResourcesCheckExistenceResponse,\n  ResourcesDeleteOptionalParams,\n  GenericResource,\n  ResourcesCreateOrUpdateOptionalParams,\n  ResourcesCreateOrUpdateResponse,\n  ResourcesUpdateOptionalParams,\n  ResourcesUpdateResponse,\n  ResourcesGetOptionalParams,\n  ResourcesGetResponse,\n  ResourcesCheckExistenceByIdOptionalParams,\n  ResourcesCheckExistenceByIdResponse,\n  ResourcesDeleteByIdOptionalParams,\n  ResourcesCreateOrUpdateByIdOptionalParams,\n  ResourcesCreateOrUpdateByIdResponse,\n  ResourcesUpdateByIdOptionalParams,\n  ResourcesUpdateByIdResponse,\n  ResourcesGetByIdOptionalParams,\n  ResourcesGetByIdResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Resources. */\nexport interface Resources {\n  /**\n   * Get all the resources for a resource group.\n   * @param resourceGroupName The resource group with the resources to get.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: ResourcesListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<GenericResourceExpanded>;\n  /**\n   * Get all the resources in a subscription.\n   * @param options The options parameters.\n   */\n  list(\n    options?: ResourcesListOptionalParams,\n  ): PagedAsyncIterableIterator<GenericResourceExpanded>;\n  /**\n   * The resources to be moved must be in the same source resource group in the source subscription being\n   * used. The target resource group may be in a different subscription. When moving resources, both the\n   * source group and the target group are locked for the duration of the operation. Write and delete\n   * operations are blocked on the groups until the move completes.\n   * @param sourceResourceGroupName The name of the resource group from the source subscription\n   *                                containing the resources to be moved.\n   * @param parameters Parameters for moving resources.\n   * @param options The options parameters.\n   */\n  beginMoveResources(\n    sourceResourceGroupName: string,\n    parameters: ResourcesMoveInfo,\n    options?: ResourcesMoveResourcesOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * The resources to be moved must be in the same source resource group in the source subscription being\n   * used. The target resource group may be in a different subscription. When moving resources, both the\n   * source group and the target group are locked for the duration of the operation. Write and delete\n   * operations are blocked on the groups until the move completes.\n   * @param sourceResourceGroupName The name of the resource group from the source subscription\n   *                                containing the resources to be moved.\n   * @param parameters Parameters for moving resources.\n   * @param options The options parameters.\n   */\n  beginMoveResourcesAndWait(\n    sourceResourceGroupName: string,\n    parameters: ResourcesMoveInfo,\n    options?: ResourcesMoveResourcesOptionalParams,\n  ): Promise<void>;\n  /**\n   * This operation checks whether the specified resources can be moved to the target. The resources to\n   * be moved must be in the same source resource group in the source subscription being used. The target\n   * resource group may be in a different subscription. If validation succeeds, it returns HTTP response\n   * code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an\n   * error message. Retrieve the URL in the Location header value to check the result of the long-running\n   * operation.\n   * @param sourceResourceGroupName The name of the resource group from the source subscription\n   *                                containing the resources to be validated for move.\n   * @param parameters Parameters for moving resources.\n   * @param options The options parameters.\n   */\n  beginValidateMoveResources(\n    sourceResourceGroupName: string,\n    parameters: ResourcesMoveInfo,\n    options?: ResourcesValidateMoveResourcesOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * This operation checks whether the specified resources can be moved to the target. The resources to\n   * be moved must be in the same source resource group in the source subscription being used. The target\n   * resource group may be in a different subscription. If validation succeeds, it returns HTTP response\n   * code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an\n   * error message. Retrieve the URL in the Location header value to check the result of the long-running\n   * operation.\n   * @param sourceResourceGroupName The name of the resource group from the source subscription\n   *                                containing the resources to be validated for move.\n   * @param parameters Parameters for moving resources.\n   * @param options The options parameters.\n   */\n  beginValidateMoveResourcesAndWait(\n    sourceResourceGroupName: string,\n    parameters: ResourcesMoveInfo,\n    options?: ResourcesValidateMoveResourcesOptionalParams,\n  ): Promise<void>;\n  /**\n   * Checks whether a resource exists.\n   * @param resourceGroupName The name of the resource group containing the resource to check. The name\n   *                          is case insensitive.\n   * @param resourceProviderNamespace The resource provider of the resource to check.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type.\n   * @param resourceName The name of the resource to check whether it exists.\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  checkExistence(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    options?: ResourcesCheckExistenceOptionalParams,\n  ): Promise<ResourcesCheckExistenceResponse>;\n  /**\n   * Deletes a resource.\n   * @param resourceGroupName The name of the resource group that contains the resource to delete. The\n   *                          name is case insensitive.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type.\n   * @param resourceName The name of the resource to delete.\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    options?: ResourcesDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a resource.\n   * @param resourceGroupName The name of the resource group that contains the resource to delete. The\n   *                          name is case insensitive.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type.\n   * @param resourceName The name of the resource to delete.\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    options?: ResourcesDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Creates a resource.\n   * @param resourceGroupName The name of the resource group for the resource. The name is case\n   *                          insensitive.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type of the resource to create.\n   * @param resourceName The name of the resource to create.\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Parameters for creating or updating the resource.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ResourcesCreateOrUpdateResponse>,\n      ResourcesCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * Creates a resource.\n   * @param resourceGroupName The name of the resource group for the resource. The name is case\n   *                          insensitive.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type of the resource to create.\n   * @param resourceName The name of the resource to create.\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Parameters for creating or updating the resource.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesCreateOrUpdateOptionalParams,\n  ): Promise<ResourcesCreateOrUpdateResponse>;\n  /**\n   * Updates a resource.\n   * @param resourceGroupName The name of the resource group for the resource. The name is case\n   *                          insensitive.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type of the resource to update.\n   * @param resourceName The name of the resource to update.\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Parameters for updating the resource.\n   * @param options The options parameters.\n   */\n  beginUpdate(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ResourcesUpdateResponse>,\n      ResourcesUpdateResponse\n    >\n  >;\n  /**\n   * Updates a resource.\n   * @param resourceGroupName The name of the resource group for the resource. The name is case\n   *                          insensitive.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type of the resource to update.\n   * @param resourceName The name of the resource to update.\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Parameters for updating the resource.\n   * @param options The options parameters.\n   */\n  beginUpdateAndWait(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesUpdateOptionalParams,\n  ): Promise<ResourcesUpdateResponse>;\n  /**\n   * Gets a resource.\n   * @param resourceGroupName The name of the resource group containing the resource to get. The name is\n   *                          case insensitive.\n   * @param resourceProviderNamespace The namespace of the resource provider.\n   * @param parentResourcePath The parent resource identity.\n   * @param resourceType The resource type of the resource.\n   * @param resourceName The name of the resource to get.\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    resourceProviderNamespace: string,\n    parentResourcePath: string,\n    resourceType: string,\n    resourceName: string,\n    apiVersion: string,\n    options?: ResourcesGetOptionalParams,\n  ): Promise<ResourcesGetResponse>;\n  /**\n   * Checks by ID whether a resource exists. This API currently works only for a limited set of Resource\n   * providers. In the event that a Resource provider does not implement this API, ARM will respond with\n   * a 405. The alternative then is to use the GET API to check for the existence of the resource.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  checkExistenceById(\n    resourceId: string,\n    apiVersion: string,\n    options?: ResourcesCheckExistenceByIdOptionalParams,\n  ): Promise<ResourcesCheckExistenceByIdResponse>;\n  /**\n   * Deletes a resource by ID.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  beginDeleteById(\n    resourceId: string,\n    apiVersion: string,\n    options?: ResourcesDeleteByIdOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a resource by ID.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  beginDeleteByIdAndWait(\n    resourceId: string,\n    apiVersion: string,\n    options?: ResourcesDeleteByIdOptionalParams,\n  ): Promise<void>;\n  /**\n   * Create a resource by ID.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Create or update resource parameters.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateById(\n    resourceId: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesCreateOrUpdateByIdOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ResourcesCreateOrUpdateByIdResponse>,\n      ResourcesCreateOrUpdateByIdResponse\n    >\n  >;\n  /**\n   * Create a resource by ID.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Create or update resource parameters.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateByIdAndWait(\n    resourceId: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesCreateOrUpdateByIdOptionalParams,\n  ): Promise<ResourcesCreateOrUpdateByIdResponse>;\n  /**\n   * Updates a resource by ID.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Update resource parameters.\n   * @param options The options parameters.\n   */\n  beginUpdateById(\n    resourceId: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesUpdateByIdOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ResourcesUpdateByIdResponse>,\n      ResourcesUpdateByIdResponse\n    >\n  >;\n  /**\n   * Updates a resource by ID.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param parameters Update resource parameters.\n   * @param options The options parameters.\n   */\n  beginUpdateByIdAndWait(\n    resourceId: string,\n    apiVersion: string,\n    parameters: GenericResource,\n    options?: ResourcesUpdateByIdOptionalParams,\n  ): Promise<ResourcesUpdateByIdResponse>;\n  /**\n   * Gets a resource by ID.\n   * @param resourceId The fully qualified ID of the resource, including the resource name and resource\n   *                   type. Use the format,\n   *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}\n   * @param apiVersion The API version to use for the operation.\n   * @param options The options parameters.\n   */\n  getById(\n    resourceId: string,\n    apiVersion: string,\n    options?: ResourcesGetByIdOptionalParams,\n  ): Promise<ResourcesGetByIdResponse>;\n}\n"]}