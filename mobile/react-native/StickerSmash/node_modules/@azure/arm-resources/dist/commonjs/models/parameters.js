"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.operationId = exports.parameters10 = exports.parameters9 = exports.tagValue = exports.tagName = exports.resourceGroupName1 = exports.parameters8 = exports.parameters7 = exports.forceDeletionTypes = exports.parameters6 = exports.resourceId = exports.parameters5 = exports.apiVersion1 = exports.resourceName = exports.resourceType = exports.parentResourcePath = exports.sourceResourceGroupName = exports.parameters4 = exports.expand = exports.properties = exports.resourceProviderNamespace = exports.template = exports.resourceGroupName = exports.parameters3 = exports.subscriptionId = exports.groupId = exports.parameters2 = exports.parameters1 = exports.top = exports.filter = exports.parameters = exports.contentType = exports.deploymentName = exports.scope = exports.nextLink = exports.apiVersion = exports.$host = exports.accept = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2025-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 64,
            MinLength: 1,
        },
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.Deployment,
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String",
        },
    },
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number",
        },
    },
};
exports.parameters1 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ScopedDeployment,
};
exports.parameters2 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ScopedDeploymentWhatIf,
};
exports.groupId = {
    parameterPath: "groupId",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "groupId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters3 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.DeploymentWhatIf,
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.template = {
    parameterPath: "template",
    mapper: {
        serializedName: "template",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
exports.resourceProviderNamespace = {
    parameterPath: "resourceProviderNamespace",
    mapper: {
        serializedName: "resourceProviderNamespace",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.properties = {
    parameterPath: ["options", "properties"],
    mapper: mappers_js_1.ProviderRegistrationRequest,
};
exports.expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String",
        },
    },
};
exports.parameters4 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ResourcesMoveInfo,
};
exports.sourceResourceGroupName = {
    parameterPath: "sourceResourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "sourceResourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parentResourcePath = {
    parameterPath: "parentResourcePath",
    mapper: {
        serializedName: "parentResourcePath",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.resourceType = {
    parameterPath: "resourceType",
    mapper: {
        serializedName: "resourceType",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters5 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.GenericResource,
};
exports.resourceId = {
    parameterPath: "resourceId",
    mapper: {
        serializedName: "resourceId",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.parameters6 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ResourceGroup,
};
exports.forceDeletionTypes = {
    parameterPath: ["options", "forceDeletionTypes"],
    mapper: {
        serializedName: "forceDeletionTypes",
        type: {
            name: "String",
        },
    },
};
exports.parameters7 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ResourceGroupPatchable,
};
exports.parameters8 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.ExportTemplateRequest,
};
exports.resourceGroupName1 = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1,
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.tagName = {
    parameterPath: "tagName",
    mapper: {
        serializedName: "tagName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.tagValue = {
    parameterPath: "tagValue",
    mapper: {
        serializedName: "tagValue",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters9 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.TagsResource,
};
exports.parameters10 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.TagsPatchResource,
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map