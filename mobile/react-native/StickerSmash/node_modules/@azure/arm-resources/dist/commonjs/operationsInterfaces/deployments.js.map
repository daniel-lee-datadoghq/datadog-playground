{"version":3,"file":"deployments.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/deployments.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  DeploymentExtended,\n  DeploymentsListAtScopeOptionalParams,\n  DeploymentsListAtTenantScopeOptionalParams,\n  DeploymentsListAtManagementGroupScopeOptionalParams,\n  DeploymentsListAtSubscriptionScopeOptionalParams,\n  DeploymentsListByResourceGroupOptionalParams,\n  DeploymentsDeleteAtScopeOptionalParams,\n  DeploymentsCheckExistenceAtScopeOptionalParams,\n  DeploymentsCheckExistenceAtScopeResponse,\n  Deployment,\n  DeploymentsCreateOrUpdateAtScopeOptionalParams,\n  DeploymentsCreateOrUpdateAtScopeResponse,\n  DeploymentsGetAtScopeOptionalParams,\n  DeploymentsGetAtScopeResponse,\n  DeploymentsCancelAtScopeOptionalParams,\n  DeploymentsValidateAtScopeOptionalParams,\n  DeploymentsValidateAtScopeResponse,\n  DeploymentsExportTemplateAtScopeOptionalParams,\n  DeploymentsExportTemplateAtScopeResponse,\n  DeploymentsDeleteAtTenantScopeOptionalParams,\n  DeploymentsCheckExistenceAtTenantScopeOptionalParams,\n  DeploymentsCheckExistenceAtTenantScopeResponse,\n  ScopedDeployment,\n  DeploymentsCreateOrUpdateAtTenantScopeOptionalParams,\n  DeploymentsCreateOrUpdateAtTenantScopeResponse,\n  DeploymentsGetAtTenantScopeOptionalParams,\n  DeploymentsGetAtTenantScopeResponse,\n  DeploymentsCancelAtTenantScopeOptionalParams,\n  DeploymentsValidateAtTenantScopeOptionalParams,\n  DeploymentsValidateAtTenantScopeResponse,\n  ScopedDeploymentWhatIf,\n  DeploymentsWhatIfAtTenantScopeOptionalParams,\n  DeploymentsWhatIfAtTenantScopeResponse,\n  DeploymentsExportTemplateAtTenantScopeOptionalParams,\n  DeploymentsExportTemplateAtTenantScopeResponse,\n  DeploymentsDeleteAtManagementGroupScopeOptionalParams,\n  DeploymentsCheckExistenceAtManagementGroupScopeOptionalParams,\n  DeploymentsCheckExistenceAtManagementGroupScopeResponse,\n  DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams,\n  DeploymentsCreateOrUpdateAtManagementGroupScopeResponse,\n  DeploymentsGetAtManagementGroupScopeOptionalParams,\n  DeploymentsGetAtManagementGroupScopeResponse,\n  DeploymentsCancelAtManagementGroupScopeOptionalParams,\n  DeploymentsValidateAtManagementGroupScopeOptionalParams,\n  DeploymentsValidateAtManagementGroupScopeResponse,\n  DeploymentsWhatIfAtManagementGroupScopeOptionalParams,\n  DeploymentsWhatIfAtManagementGroupScopeResponse,\n  DeploymentsExportTemplateAtManagementGroupScopeOptionalParams,\n  DeploymentsExportTemplateAtManagementGroupScopeResponse,\n  DeploymentsDeleteAtSubscriptionScopeOptionalParams,\n  DeploymentsCheckExistenceAtSubscriptionScopeOptionalParams,\n  DeploymentsCheckExistenceAtSubscriptionScopeResponse,\n  DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams,\n  DeploymentsCreateOrUpdateAtSubscriptionScopeResponse,\n  DeploymentsGetAtSubscriptionScopeOptionalParams,\n  DeploymentsGetAtSubscriptionScopeResponse,\n  DeploymentsCancelAtSubscriptionScopeOptionalParams,\n  DeploymentsValidateAtSubscriptionScopeOptionalParams,\n  DeploymentsValidateAtSubscriptionScopeResponse,\n  DeploymentWhatIf,\n  DeploymentsWhatIfAtSubscriptionScopeOptionalParams,\n  DeploymentsWhatIfAtSubscriptionScopeResponse,\n  DeploymentsExportTemplateAtSubscriptionScopeOptionalParams,\n  DeploymentsExportTemplateAtSubscriptionScopeResponse,\n  DeploymentsDeleteOptionalParams,\n  DeploymentsCheckExistenceOptionalParams,\n  DeploymentsCheckExistenceResponse,\n  DeploymentsCreateOrUpdateOptionalParams,\n  DeploymentsCreateOrUpdateResponse,\n  DeploymentsGetOptionalParams,\n  DeploymentsGetResponse,\n  DeploymentsCancelOptionalParams,\n  DeploymentsValidateOptionalParams,\n  DeploymentsValidateResponse,\n  DeploymentsWhatIfOptionalParams,\n  DeploymentsWhatIfResponse,\n  DeploymentsExportTemplateOptionalParams,\n  DeploymentsExportTemplateResponse,\n  DeploymentsCalculateTemplateHashOptionalParams,\n  DeploymentsCalculateTemplateHashResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Deployments. */\nexport interface Deployments {\n  /**\n   * Get all the deployments at the given scope.\n   * @param scope The resource scope.\n   * @param options The options parameters.\n   */\n  listAtScope(\n    scope: string,\n    options?: DeploymentsListAtScopeOptionalParams,\n  ): PagedAsyncIterableIterator<DeploymentExtended>;\n  /**\n   * Get all the deployments at the tenant scope.\n   * @param options The options parameters.\n   */\n  listAtTenantScope(\n    options?: DeploymentsListAtTenantScopeOptionalParams,\n  ): PagedAsyncIterableIterator<DeploymentExtended>;\n  /**\n   * Get all the deployments for a management group.\n   * @param groupId The management group ID.\n   * @param options The options parameters.\n   */\n  listAtManagementGroupScope(\n    groupId: string,\n    options?: DeploymentsListAtManagementGroupScopeOptionalParams,\n  ): PagedAsyncIterableIterator<DeploymentExtended>;\n  /**\n   * Get all the deployments for a subscription.\n   * @param options The options parameters.\n   */\n  listAtSubscriptionScope(\n    options?: DeploymentsListAtSubscriptionScopeOptionalParams,\n  ): PagedAsyncIterableIterator<DeploymentExtended>;\n  /**\n   * Get all the deployments for a resource group.\n   * @param resourceGroupName The name of the resource group with the deployments to get. The name is\n   *                          case insensitive.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: DeploymentsListByResourceGroupOptionalParams,\n  ): PagedAsyncIterableIterator<DeploymentExtended>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtScope(\n    scope: string,\n    deploymentName: string,\n    options?: DeploymentsDeleteAtScopeOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtScopeAndWait(\n    scope: string,\n    deploymentName: string,\n    options?: DeploymentsDeleteAtScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Checks whether the deployment exists.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  checkExistenceAtScope(\n    scope: string,\n    deploymentName: string,\n    options?: DeploymentsCheckExistenceAtScopeOptionalParams,\n  ): Promise<DeploymentsCheckExistenceAtScopeResponse>;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtScope(\n    scope: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsCreateOrUpdateAtScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsCreateOrUpdateAtScopeResponse>,\n      DeploymentsCreateOrUpdateAtScopeResponse\n    >\n  >;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtScopeAndWait(\n    scope: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsCreateOrUpdateAtScopeOptionalParams,\n  ): Promise<DeploymentsCreateOrUpdateAtScopeResponse>;\n  /**\n   * Gets a deployment.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  getAtScope(\n    scope: string,\n    deploymentName: string,\n    options?: DeploymentsGetAtScopeOptionalParams,\n  ): Promise<DeploymentsGetAtScopeResponse>;\n  /**\n   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the\n   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment\n   * stops the currently running template deployment and leaves the resources partially deployed.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  cancelAtScope(\n    scope: string,\n    deploymentName: string,\n    options?: DeploymentsCancelAtScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtScope(\n    scope: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsValidateAtScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsValidateAtScopeResponse>,\n      DeploymentsValidateAtScopeResponse\n    >\n  >;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtScopeAndWait(\n    scope: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsValidateAtScopeOptionalParams,\n  ): Promise<DeploymentsValidateAtScopeResponse>;\n  /**\n   * Exports the template used for specified deployment.\n   * @param scope The resource scope.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  exportTemplateAtScope(\n    scope: string,\n    deploymentName: string,\n    options?: DeploymentsExportTemplateAtScopeOptionalParams,\n  ): Promise<DeploymentsExportTemplateAtScopeResponse>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtTenantScope(\n    deploymentName: string,\n    options?: DeploymentsDeleteAtTenantScopeOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtTenantScopeAndWait(\n    deploymentName: string,\n    options?: DeploymentsDeleteAtTenantScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Checks whether the deployment exists.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  checkExistenceAtTenantScope(\n    deploymentName: string,\n    options?: DeploymentsCheckExistenceAtTenantScopeOptionalParams,\n  ): Promise<DeploymentsCheckExistenceAtTenantScopeResponse>;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtTenantScope(\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsCreateOrUpdateAtTenantScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsCreateOrUpdateAtTenantScopeResponse>,\n      DeploymentsCreateOrUpdateAtTenantScopeResponse\n    >\n  >;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtTenantScopeAndWait(\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsCreateOrUpdateAtTenantScopeOptionalParams,\n  ): Promise<DeploymentsCreateOrUpdateAtTenantScopeResponse>;\n  /**\n   * Gets a deployment.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  getAtTenantScope(\n    deploymentName: string,\n    options?: DeploymentsGetAtTenantScopeOptionalParams,\n  ): Promise<DeploymentsGetAtTenantScopeResponse>;\n  /**\n   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the\n   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment\n   * stops the currently running template deployment and leaves the resources partially deployed.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  cancelAtTenantScope(\n    deploymentName: string,\n    options?: DeploymentsCancelAtTenantScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtTenantScope(\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsValidateAtTenantScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsValidateAtTenantScopeResponse>,\n      DeploymentsValidateAtTenantScopeResponse\n    >\n  >;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtTenantScopeAndWait(\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsValidateAtTenantScopeOptionalParams,\n  ): Promise<DeploymentsValidateAtTenantScopeResponse>;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the tenant group.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginWhatIfAtTenantScope(\n    deploymentName: string,\n    parameters: ScopedDeploymentWhatIf,\n    options?: DeploymentsWhatIfAtTenantScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsWhatIfAtTenantScopeResponse>,\n      DeploymentsWhatIfAtTenantScopeResponse\n    >\n  >;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the tenant group.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginWhatIfAtTenantScopeAndWait(\n    deploymentName: string,\n    parameters: ScopedDeploymentWhatIf,\n    options?: DeploymentsWhatIfAtTenantScopeOptionalParams,\n  ): Promise<DeploymentsWhatIfAtTenantScopeResponse>;\n  /**\n   * Exports the template used for specified deployment.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  exportTemplateAtTenantScope(\n    deploymentName: string,\n    options?: DeploymentsExportTemplateAtTenantScopeOptionalParams,\n  ): Promise<DeploymentsExportTemplateAtTenantScopeResponse>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    options?: DeploymentsDeleteAtManagementGroupScopeOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtManagementGroupScopeAndWait(\n    groupId: string,\n    deploymentName: string,\n    options?: DeploymentsDeleteAtManagementGroupScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Checks whether the deployment exists.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  checkExistenceAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    options?: DeploymentsCheckExistenceAtManagementGroupScopeOptionalParams,\n  ): Promise<DeploymentsCheckExistenceAtManagementGroupScopeResponse>;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>,\n      DeploymentsCreateOrUpdateAtManagementGroupScopeResponse\n    >\n  >;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtManagementGroupScopeAndWait(\n    groupId: string,\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsCreateOrUpdateAtManagementGroupScopeOptionalParams,\n  ): Promise<DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>;\n  /**\n   * Gets a deployment.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  getAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    options?: DeploymentsGetAtManagementGroupScopeOptionalParams,\n  ): Promise<DeploymentsGetAtManagementGroupScopeResponse>;\n  /**\n   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the\n   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment\n   * stops the currently running template deployment and leaves the resources partially deployed.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  cancelAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    options?: DeploymentsCancelAtManagementGroupScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsValidateAtManagementGroupScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsValidateAtManagementGroupScopeResponse>,\n      DeploymentsValidateAtManagementGroupScopeResponse\n    >\n  >;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtManagementGroupScopeAndWait(\n    groupId: string,\n    deploymentName: string,\n    parameters: ScopedDeployment,\n    options?: DeploymentsValidateAtManagementGroupScopeOptionalParams,\n  ): Promise<DeploymentsValidateAtManagementGroupScopeResponse>;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the management\n   * group.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginWhatIfAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    parameters: ScopedDeploymentWhatIf,\n    options?: DeploymentsWhatIfAtManagementGroupScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsWhatIfAtManagementGroupScopeResponse>,\n      DeploymentsWhatIfAtManagementGroupScopeResponse\n    >\n  >;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the management\n   * group.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginWhatIfAtManagementGroupScopeAndWait(\n    groupId: string,\n    deploymentName: string,\n    parameters: ScopedDeploymentWhatIf,\n    options?: DeploymentsWhatIfAtManagementGroupScopeOptionalParams,\n  ): Promise<DeploymentsWhatIfAtManagementGroupScopeResponse>;\n  /**\n   * Exports the template used for specified deployment.\n   * @param groupId The management group ID.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  exportTemplateAtManagementGroupScope(\n    groupId: string,\n    deploymentName: string,\n    options?: DeploymentsExportTemplateAtManagementGroupScopeOptionalParams,\n  ): Promise<DeploymentsExportTemplateAtManagementGroupScopeResponse>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtSubscriptionScope(\n    deploymentName: string,\n    options?: DeploymentsDeleteAtSubscriptionScopeOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. This is an asynchronous operation that returns a\n   * status of 202 until the template deployment is successfully deleted. The Location response header\n   * contains the URI that is used to obtain the status of the process. While the process is running, a\n   * call to the URI in the Location header returns a status of 202. When the process finishes, the URI\n   * in the Location header returns a status of 204 on success. If the asynchronous request failed, the\n   * URI in the Location header returns an error-level status code.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAtSubscriptionScopeAndWait(\n    deploymentName: string,\n    options?: DeploymentsDeleteAtSubscriptionScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Checks whether the deployment exists.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  checkExistenceAtSubscriptionScope(\n    deploymentName: string,\n    options?: DeploymentsCheckExistenceAtSubscriptionScopeOptionalParams,\n  ): Promise<DeploymentsCheckExistenceAtSubscriptionScopeResponse>;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtSubscriptionScope(\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>,\n      DeploymentsCreateOrUpdateAtSubscriptionScopeResponse\n    >\n  >;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAtSubscriptionScopeAndWait(\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsCreateOrUpdateAtSubscriptionScopeOptionalParams,\n  ): Promise<DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>;\n  /**\n   * Gets a deployment.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  getAtSubscriptionScope(\n    deploymentName: string,\n    options?: DeploymentsGetAtSubscriptionScopeOptionalParams,\n  ): Promise<DeploymentsGetAtSubscriptionScopeResponse>;\n  /**\n   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the\n   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment\n   * stops the currently running template deployment and leaves the resources partially deployed.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  cancelAtSubscriptionScope(\n    deploymentName: string,\n    options?: DeploymentsCancelAtSubscriptionScopeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtSubscriptionScope(\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsValidateAtSubscriptionScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsValidateAtSubscriptionScopeResponse>,\n      DeploymentsValidateAtSubscriptionScopeResponse\n    >\n  >;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAtSubscriptionScopeAndWait(\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsValidateAtSubscriptionScopeOptionalParams,\n  ): Promise<DeploymentsValidateAtSubscriptionScopeResponse>;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the subscription.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to What If.\n   * @param options The options parameters.\n   */\n  beginWhatIfAtSubscriptionScope(\n    deploymentName: string,\n    parameters: DeploymentWhatIf,\n    options?: DeploymentsWhatIfAtSubscriptionScopeOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsWhatIfAtSubscriptionScopeResponse>,\n      DeploymentsWhatIfAtSubscriptionScopeResponse\n    >\n  >;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the subscription.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to What If.\n   * @param options The options parameters.\n   */\n  beginWhatIfAtSubscriptionScopeAndWait(\n    deploymentName: string,\n    parameters: DeploymentWhatIf,\n    options?: DeploymentsWhatIfAtSubscriptionScopeOptionalParams,\n  ): Promise<DeploymentsWhatIfAtSubscriptionScopeResponse>;\n  /**\n   * Exports the template used for specified deployment.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  exportTemplateAtSubscriptionScope(\n    deploymentName: string,\n    options?: DeploymentsExportTemplateAtSubscriptionScopeOptionalParams,\n  ): Promise<DeploymentsExportTemplateAtSubscriptionScopeResponse>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. Deleting a template deployment does not affect the\n   * state of the resource group. This is an asynchronous operation that returns a status of 202 until\n   * the template deployment is successfully deleted. The Location response header contains the URI that\n   * is used to obtain the status of the process. While the process is running, a call to the URI in the\n   * Location header returns a status of 202. When the process finishes, the URI in the Location header\n   * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location\n   * header returns an error-level status code.\n   * @param resourceGroupName The name of the resource group with the deployment to delete. The name is\n   *                          case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * A template deployment that is currently running cannot be deleted. Deleting a template deployment\n   * removes the associated deployment operations. Deleting a template deployment does not affect the\n   * state of the resource group. This is an asynchronous operation that returns a status of 202 until\n   * the template deployment is successfully deleted. The Location response header contains the URI that\n   * is used to obtain the status of the process. While the process is running, a call to the URI in the\n   * Location header returns a status of 202. When the process finishes, the URI in the Location header\n   * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location\n   * header returns an error-level status code.\n   * @param resourceGroupName The name of the resource group with the deployment to delete. The name is\n   *                          case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Checks whether the deployment exists.\n   * @param resourceGroupName The name of the resource group with the deployment to check. The name is\n   *                          case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  checkExistence(\n    resourceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsCheckExistenceOptionalParams,\n  ): Promise<DeploymentsCheckExistenceResponse>;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case\n   *                          insensitive. The resource group must already exist.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdate(\n    resourceGroupName: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsCreateOrUpdateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsCreateOrUpdateResponse>,\n      DeploymentsCreateOrUpdateResponse\n    >\n  >;\n  /**\n   * You can provide the template and parameters directly in the request or link to JSON files.\n   * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case\n   *                          insensitive. The resource group must already exist.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Additional parameters supplied to the operation.\n   * @param options The options parameters.\n   */\n  beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsCreateOrUpdateOptionalParams,\n  ): Promise<DeploymentsCreateOrUpdateResponse>;\n  /**\n   * Gets a deployment.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsGetOptionalParams,\n  ): Promise<DeploymentsGetResponse>;\n  /**\n   * You can cancel a deployment only if the provisioningState is Accepted or Running. After the\n   * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment\n   * stops the currently running template deployment and leaves the resource group partially deployed.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  cancel(\n    resourceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsCancelOptionalParams,\n  ): Promise<void>;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param resourceGroupName The name of the resource group the template will be deployed to. The name\n   *                          is case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidate(\n    resourceGroupName: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsValidateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsValidateResponse>,\n      DeploymentsValidateResponse\n    >\n  >;\n  /**\n   * Validates whether the specified template is syntactically correct and will be accepted by Azure\n   * Resource Manager..\n   * @param resourceGroupName The name of the resource group the template will be deployed to. The name\n   *                          is case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginValidateAndWait(\n    resourceGroupName: string,\n    deploymentName: string,\n    parameters: Deployment,\n    options?: DeploymentsValidateOptionalParams,\n  ): Promise<DeploymentsValidateResponse>;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the resource group.\n   * @param resourceGroupName The name of the resource group the template will be deployed to. The name\n   *                          is case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginWhatIf(\n    resourceGroupName: string,\n    deploymentName: string,\n    parameters: DeploymentWhatIf,\n    options?: DeploymentsWhatIfOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DeploymentsWhatIfResponse>,\n      DeploymentsWhatIfResponse\n    >\n  >;\n  /**\n   * Returns changes that will be made by the deployment if executed at the scope of the resource group.\n   * @param resourceGroupName The name of the resource group the template will be deployed to. The name\n   *                          is case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param parameters Parameters to validate.\n   * @param options The options parameters.\n   */\n  beginWhatIfAndWait(\n    resourceGroupName: string,\n    deploymentName: string,\n    parameters: DeploymentWhatIf,\n    options?: DeploymentsWhatIfOptionalParams,\n  ): Promise<DeploymentsWhatIfResponse>;\n  /**\n   * Exports the template used for specified deployment.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param deploymentName The name of the deployment.\n   * @param options The options parameters.\n   */\n  exportTemplate(\n    resourceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsExportTemplateOptionalParams,\n  ): Promise<DeploymentsExportTemplateResponse>;\n  /**\n   * Calculate the hash of the given template.\n   * @param template The template provided to calculate hash.\n   * @param options The options parameters.\n   */\n  calculateTemplateHash(\n    template: Record<string, unknown>,\n    options?: DeploymentsCalculateTemplateHashOptionalParams,\n  ): Promise<DeploymentsCalculateTemplateHashResponse>;\n}\n"]}