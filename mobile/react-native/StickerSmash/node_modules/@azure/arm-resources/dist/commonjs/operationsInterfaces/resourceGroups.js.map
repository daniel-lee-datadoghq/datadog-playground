{"version":3,"file":"resourceGroups.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/resourceGroups.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ResourceGroup,\n  ResourceGroupsListOptionalParams,\n  ResourceGroupsCheckExistenceOptionalParams,\n  ResourceGroupsCheckExistenceResponse,\n  ResourceGroupsCreateOrUpdateOptionalParams,\n  ResourceGroupsCreateOrUpdateResponse,\n  ResourceGroupsDeleteOptionalParams,\n  ResourceGroupsGetOptionalParams,\n  ResourceGroupsGetResponse,\n  ResourceGroupPatchable,\n  ResourceGroupsUpdateOptionalParams,\n  ResourceGroupsUpdateResponse,\n  ExportTemplateRequest,\n  ResourceGroupsExportTemplateOptionalParams,\n  ResourceGroupsExportTemplateResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ResourceGroups. */\nexport interface ResourceGroups {\n  /**\n   * Gets all the resource groups for a subscription.\n   * @param options The options parameters.\n   */\n  list(\n    options?: ResourceGroupsListOptionalParams,\n  ): PagedAsyncIterableIterator<ResourceGroup>;\n  /**\n   * Checks whether a resource group exists.\n   * @param resourceGroupName The name of the resource group to check. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  checkExistence(\n    resourceGroupName: string,\n    options?: ResourceGroupsCheckExistenceOptionalParams,\n  ): Promise<ResourceGroupsCheckExistenceResponse>;\n  /**\n   * Creates or updates a resource group.\n   * @param resourceGroupName The name of the resource group to create or update. Can include\n   *                          alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that\n   *                          match the allowed characters.\n   * @param parameters Parameters supplied to the create or update a resource group.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    parameters: ResourceGroup,\n    options?: ResourceGroupsCreateOrUpdateOptionalParams,\n  ): Promise<ResourceGroupsCreateOrUpdateResponse>;\n  /**\n   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group\n   * deletes all of its template deployments and currently stored operations.\n   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  beginDelete(\n    resourceGroupName: string,\n    options?: ResourceGroupsDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * When you delete a resource group, all of its resources are also deleted. Deleting a resource group\n   * deletes all of its template deployments and currently stored operations.\n   * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  beginDeleteAndWait(\n    resourceGroupName: string,\n    options?: ResourceGroupsDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets a resource group.\n   * @param resourceGroupName The name of the resource group to get. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    options?: ResourceGroupsGetOptionalParams,\n  ): Promise<ResourceGroupsGetResponse>;\n  /**\n   * Resource groups can be updated through a simple PATCH operation to a group address. The format of\n   * the request is the same as that for creating a resource group. If a field is unspecified, the\n   * current value is retained.\n   * @param resourceGroupName The name of the resource group to update. The name is case insensitive.\n   * @param parameters Parameters supplied to update a resource group.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    parameters: ResourceGroupPatchable,\n    options?: ResourceGroupsUpdateOptionalParams,\n  ): Promise<ResourceGroupsUpdateResponse>;\n  /**\n   * Captures the specified resource group as a template.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param parameters Parameters for exporting the template.\n   * @param options The options parameters.\n   */\n  beginExportTemplate(\n    resourceGroupName: string,\n    parameters: ExportTemplateRequest,\n    options?: ResourceGroupsExportTemplateOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ResourceGroupsExportTemplateResponse>,\n      ResourceGroupsExportTemplateResponse\n    >\n  >;\n  /**\n   * Captures the specified resource group as a template.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param parameters Parameters for exporting the template.\n   * @param options The options parameters.\n   */\n  beginExportTemplateAndWait(\n    resourceGroupName: string,\n    parameters: ExportTemplateRequest,\n    options?: ResourceGroupsExportTemplateOptionalParams,\n  ): Promise<ResourceGroupsExportTemplateResponse>;\n}\n"]}