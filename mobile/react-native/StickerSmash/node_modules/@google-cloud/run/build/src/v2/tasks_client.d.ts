import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Cloud Run Task Control Plane API.
 * @class
 * @memberof v2
 */
export declare class TasksClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    private _log;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    tasksStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of TasksClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new TasksClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets information about a Task.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The full name of the Task.
     *   Format:
     *   projects/{project}/locations/{location}/jobs/{job}/executions/{execution}/tasks/{task}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.run.v2.Task|Task}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/tasks.get_task.js</caption>
     * region_tag:run_v2_generated_Tasks_GetTask_async
     */
    getTask(request?: protos.google.cloud.run.v2.IGetTaskRequest, options?: CallOptions): Promise<[
        protos.google.cloud.run.v2.ITask,
        protos.google.cloud.run.v2.IGetTaskRequest | undefined,
        {} | undefined
    ]>;
    getTask(request: protos.google.cloud.run.v2.IGetTaskRequest, options: CallOptions, callback: Callback<protos.google.cloud.run.v2.ITask, protos.google.cloud.run.v2.IGetTaskRequest | null | undefined, {} | null | undefined>): void;
    getTask(request: protos.google.cloud.run.v2.IGetTaskRequest, callback: Callback<protos.google.cloud.run.v2.ITask, protos.google.cloud.run.v2.IGetTaskRequest | null | undefined, {} | null | undefined>): void;
    /**
    * Lists Tasks from an Execution of a Job.
    *
    * @param {Object} request
    *   The request object that will be sent.
    * @param {string} request.parent
    *   Required. The Execution from which the Tasks should be listed.
    *   To list all Tasks across Executions of a Job, use "-" instead of Execution
    *   name. To list all Tasks across Jobs, use "-" instead of Job name. Format:
    *   projects/{project}/locations/{location}/jobs/{job}/executions/{execution}
    * @param {number} request.pageSize
    *   Maximum number of Tasks to return in this call.
    * @param {string} request.pageToken
    *   A page token received from a previous call to ListTasks.
    *   All other parameters must match.
    * @param {boolean} request.showDeleted
    *   If true, returns deleted (but unexpired) resources along with active ones.
    * @param {object} [options]
    *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
    * @returns {Promise} - The promise which resolves to an array.
    *   The first element of the array is Array of {@link protos.google.cloud.run.v2.Task|Task}.
    *   The client library will perform auto-pagination by default: it will call the API as many
    *   times as needed and will merge results from all the pages into this array.
    *   Note that it can affect your quota.
    *   We recommend using `listTasksAsync()`
    *   method described below for async iteration which you can stop as needed.
    *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
    *   for more details and examples.
    */
    listTasks(request?: protos.google.cloud.run.v2.IListTasksRequest, options?: CallOptions): Promise<[
        protos.google.cloud.run.v2.ITask[],
        protos.google.cloud.run.v2.IListTasksRequest | null,
        protos.google.cloud.run.v2.IListTasksResponse
    ]>;
    listTasks(request: protos.google.cloud.run.v2.IListTasksRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.run.v2.IListTasksRequest, protos.google.cloud.run.v2.IListTasksResponse | null | undefined, protos.google.cloud.run.v2.ITask>): void;
    listTasks(request: protos.google.cloud.run.v2.IListTasksRequest, callback: PaginationCallback<protos.google.cloud.run.v2.IListTasksRequest, protos.google.cloud.run.v2.IListTasksResponse | null | undefined, protos.google.cloud.run.v2.ITask>): void;
    /**
     * Equivalent to `listTasks`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Execution from which the Tasks should be listed.
     *   To list all Tasks across Executions of a Job, use "-" instead of Execution
     *   name. To list all Tasks across Jobs, use "-" instead of Job name. Format:
     *   projects/{project}/locations/{location}/jobs/{job}/executions/{execution}
     * @param {number} request.pageSize
     *   Maximum number of Tasks to return in this call.
     * @param {string} request.pageToken
     *   A page token received from a previous call to ListTasks.
     *   All other parameters must match.
     * @param {boolean} request.showDeleted
     *   If true, returns deleted (but unexpired) resources along with active ones.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.run.v2.Task|Task} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTasksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTasksStream(request?: protos.google.cloud.run.v2.IListTasksRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listTasks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Execution from which the Tasks should be listed.
     *   To list all Tasks across Executions of a Job, use "-" instead of Execution
     *   name. To list all Tasks across Jobs, use "-" instead of Job name. Format:
     *   projects/{project}/locations/{location}/jobs/{job}/executions/{execution}
     * @param {number} request.pageSize
     *   Maximum number of Tasks to return in this call.
     * @param {string} request.pageToken
     *   A page token received from a previous call to ListTasks.
     *   All other parameters must match.
     * @param {boolean} request.showDeleted
     *   If true, returns deleted (but unexpired) resources along with active ones.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.run.v2.Task|Task}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/tasks.list_tasks.js</caption>
     * region_tag:run_v2_generated_Tasks_ListTasks_async
     */
    listTasksAsync(request?: protos.google.cloud.run.v2.IListTasksRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.run.v2.ITask>;
    /**
       * Gets information about a location.
       *
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   Resource name for the location.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
       * @returns {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
       *   for more details and examples.
       * @example
       * ```
       * const [response] = await client.getLocation(request);
       * ```
       */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
       * Lists information about the supported locations for this service. Returns an iterable object.
       *
       * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   The resource that owns the locations collection, if applicable.
       * @param {string} request.filter
       *   The standard list filter.
       * @param {number} request.pageSize
       *   The standard list page size.
       * @param {string} request.pageToken
       *   The standard list page token.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Object}
       *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
       *   When you iterate the returned iterable, each element will be an object representing
       *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
       *   so you can stop the iteration when you don't need more results.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
       *   for more details and examples.
       * @example
       * ```
       * const iterable = client.listLocationsAsync(request);
       * for await (const response of iterable) {
       *   // process response
       * }
       * ```
       */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Return a fully-qualified cryptoKey resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} key_ring
     * @param {string} crypto_key
     * @returns {string} Resource name string.
     */
    cryptoKeyPath(project: string, location: string, keyRing: string, cryptoKey: string): string;
    /**
     * Parse the project from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the location from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the key_ring from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the key_ring.
     */
    matchKeyRingFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Parse the crypto_key from CryptoKey resource.
     *
     * @param {string} cryptoKeyName
     *   A fully-qualified path representing CryptoKey resource.
     * @returns {string} A string representing the crypto_key.
     */
    matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string): string | number;
    /**
     * Return a fully-qualified execution resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} job
     * @param {string} execution
     * @returns {string} Resource name string.
     */
    executionPath(project: string, location: string, job: string, execution: string): string;
    /**
     * Parse the project from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExecutionName(executionName: string): string | number;
    /**
     * Parse the location from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExecutionName(executionName: string): string | number;
    /**
     * Parse the job from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromExecutionName(executionName: string): string | number;
    /**
     * Parse the execution from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the execution.
     */
    matchExecutionFromExecutionName(executionName: string): string | number;
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project: string, location: string, job: string): string;
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName: string): string | number;
    /**
     * Parse the location from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromJobName(jobName: string): string | number;
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified revision resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} service
     * @param {string} revision
     * @returns {string} Resource name string.
     */
    revisionPath(project: string, location: string, service: string, revision: string): string;
    /**
     * Parse the project from Revision resource.
     *
     * @param {string} revisionName
     *   A fully-qualified path representing Revision resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRevisionName(revisionName: string): string | number;
    /**
     * Parse the location from Revision resource.
     *
     * @param {string} revisionName
     *   A fully-qualified path representing Revision resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRevisionName(revisionName: string): string | number;
    /**
     * Parse the service from Revision resource.
     *
     * @param {string} revisionName
     *   A fully-qualified path representing Revision resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromRevisionName(revisionName: string): string | number;
    /**
     * Parse the revision from Revision resource.
     *
     * @param {string} revisionName
     *   A fully-qualified path representing Revision resource.
     * @returns {string} A string representing the revision.
     */
    matchRevisionFromRevisionName(revisionName: string): string | number;
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project: string, location: string, service: string): string;
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName: string): string | number;
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName: string): string | number;
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName: string): string | number;
    /**
     * Return a fully-qualified task resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} job
     * @param {string} execution
     * @param {string} task
     * @returns {string} Resource name string.
     */
    taskPath(project: string, location: string, job: string, execution: string, task: string): string;
    /**
     * Parse the project from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTaskName(taskName: string): string | number;
    /**
     * Parse the location from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTaskName(taskName: string): string | number;
    /**
     * Parse the job from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromTaskName(taskName: string): string | number;
    /**
     * Parse the execution from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the execution.
     */
    matchExecutionFromTaskName(taskName: string): string | number;
    /**
     * Parse the task from Task resource.
     *
     * @param {string} taskName
     *   A fully-qualified path representing Task resource.
     * @returns {string} A string representing the task.
     */
    matchTaskFromTaskName(taskName: string): string | number;
    /**
     * Return a fully-qualified workerPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} worker_pool
     * @returns {string} Resource name string.
     */
    workerPoolPath(project: string, location: string, workerPool: string): string;
    /**
     * Parse the project from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Parse the location from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Parse the worker_pool from WorkerPool resource.
     *
     * @param {string} workerPoolName
     *   A fully-qualified path representing WorkerPool resource.
     * @returns {string} A string representing the worker_pool.
     */
    matchWorkerPoolFromWorkerPoolName(workerPoolName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
