import type { FirstPartyHostsConfiguration } from '../../DdSdkReactNativeConfiguration';
import { DatadogProviderConfiguration } from '../../DdSdkReactNativeConfiguration';
import { SdkVerbosity } from '../../SdkVerbosity';
import { TrackingConsent } from '../../TrackingConsent';
import type { ActionEventMapper } from '../../rum/eventMappers/actionEventMapper';
import type { ErrorEventMapper } from '../../rum/eventMappers/errorEventMapper';
import type { ResourceEventMapper } from '../../rum/eventMappers/resourceEventMapper';
import { PropagatorType } from '../../rum/types';
export declare class FileBasedConfiguration extends DatadogProviderConfiguration {
    constructor(params?: {
        configuration?: unknown;
        errorEventMapper?: ErrorEventMapper;
        resourceEventMapper?: ResourceEventMapper;
        actionEventMapper?: ActionEventMapper;
    });
}
export declare const getJSONConfiguration: (userSpecifiedConfiguration: unknown) => {
    clientToken: string;
    env: string;
    applicationId: string;
    trackInteractions: boolean | undefined;
    trackResources: boolean | undefined;
    trackErrors: boolean | undefined;
    trackingConsent: TrackingConsent | undefined;
    longTaskThresholdMs: number | undefined;
    verbosity: SdkVerbosity | undefined;
    actionNameAttribute: string | undefined;
    resourceTracingSamplingRate: number | undefined;
    firstPartyHosts: FirstPartyHostsConfiguration | undefined;
    site: string | undefined;
    useAccessibilityLabel: boolean | undefined;
};
export declare const formatPropagatorType: (propagatorType: string) => PropagatorType;
//# sourceMappingURL=FileBasedConfiguration.d.ts.map