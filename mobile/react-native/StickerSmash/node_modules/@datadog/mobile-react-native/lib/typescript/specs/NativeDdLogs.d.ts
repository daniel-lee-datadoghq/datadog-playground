import type { TurboModule } from 'react-native';
/**
 * Do not import this Spec directly, use DdNativeLogsType instead.
 */
export interface Spec extends TurboModule {
    readonly getConstants: () => {};
    /**
     * Send a log with DEBUG level.
     * @param message: The message to send.
     * @param context: The additional context to send.
     */
    readonly debug: (message: string, context: Object) => Promise<void>;
    /**
     * Send a log with INFO level.
     * @param message: The message to send.
     * @param context: The additional context to send.
     */
    readonly info: (message: string, context: Object) => Promise<void>;
    /**
     * Send a log with WARN level.
     * @param message: The message to send.
     * @param context: The additional context to send.
     */
    readonly warn: (message: string, context: Object) => Promise<void>;
    /**
     * Send a log with ERROR level.
     * @param message: The message to send.
     * @param context: The additional context to send.
     */
    readonly error: (message: string, context: Object) => Promise<void>;
    /**
     * Send a log containing an error with DEBUG level.
     * @param message: The message to send.
     * @param errorKind: The error kind to send.
     * @param errorMessage: The error message to send.
     * @param stacktrace: The stack trace to send.
     * @param context: The additional context to send.
     */
    readonly debugWithError: (message: string, errorKind: string, errorMessage: string, stacktrace: string, context: Object) => Promise<void>;
    /**
     * Send a log containing an error with INFO level.
     * @param message: The message to send.
     * @param errorKind: The error kind to send.
     * @param errorMessage: The error message to send.
     * @param stacktrace: The stack trace to send.
     * @param context: The additional context to send.
     */
    readonly infoWithError: (message: string, errorKind: string, errorMessage: string, stacktrace: string, context: Object) => Promise<void>;
    /**
     * Send a log containing an error with WARN level.
     * @param message: The message to send.
     * @param errorKind: The error kind to send.
     * @param errorMessage: The error message to send.
     * @param stacktrace: The stack trace to send.
     * @param context: The additional context to send.
     */
    readonly warnWithError: (message: string, errorKind: string, errorMessage: string, stacktrace: string, context: Object) => Promise<void>;
    /**
     * Send a log containing an error with ERROR level.
     * @param message: The message to send.
     * @param errorKind: The error kind to send.
     * @param errorMessage: The error message to send.
     * @param stacktrace: The stack trace to send.
     * @param context: The additional context to send.
     */
    readonly errorWithError: (message: string, errorKind: string, errorMessage: string, stacktrace: string, context: Object) => Promise<void>;
}
declare const _default: Spec | null;
export default _default;
//# sourceMappingURL=NativeDdLogs.d.ts.map