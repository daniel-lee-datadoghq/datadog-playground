import type { PropagatorType } from '../../../types';
import type { RegexMap } from '../requestProxy/interfaces/RequestProxy';
import type { SpanId, TraceId } from './TracingIdentifier';
import type { Hostname } from './firstPartyHosts';
export type DdRumResourceTracingAttributes = {
    tracingStrategy: 'KEEP';
    traceId: TraceId;
    spanId: SpanId;
    samplingPriorityHeader: '1' | '0';
    rulePsr: number;
    propagatorTypes: PropagatorType[];
    rumSessionId?: string;
} | {
    tracingStrategy: 'DISCARD';
    traceId?: void;
    spanId?: void;
    samplingPriorityHeader: '0';
};
export declare const getTracingAttributes: ({ hostname, firstPartyHostsRegexMap, tracingSamplingRate, rumSessionId }: {
    hostname: Hostname | null;
    firstPartyHostsRegexMap: RegexMap;
    tracingSamplingRate: number;
    rumSessionId?: string | undefined;
}) => DdRumResourceTracingAttributes;
export declare const generateTracingAttributesWithSampling: (tracingSamplingRate: number, propagatorTypes: PropagatorType[], rumSessionId?: string) => DdRumResourceTracingAttributes;
//# sourceMappingURL=distributedTracing.d.ts.map