import type CountingSet from 'metro/src/lib/CountingSet';
import type { ReadOnlyGraph, Module, MixedOutput } from 'metro';
import type { DefaultConfigOptions } from './types/expoTypes';
import type { MetroSerializerOutput, MetroBundleWithMap, SourceMapString } from './types/metroTypes';
/**
 * This function ensures that modules in source maps are sorted in the same
 * order as in a plain JS bundle.
 *
 * https://github.com/facebook/metro/blob/76413561abb3757285e0cb0305f1f9f616fa2b6c/packages/metro/src/Server.js#L1086C1-L1095C7
 */
export declare function getSortedModules(graph: ReadOnlyGraph, { createModuleId }: {
    createModuleId: (file: string) => number;
}): readonly Module<MixedOutput>[];
/**
 * CountingSet was added in Metro 0.71.2 - a modified `Set` that only deletes items when the
 * number of `delete(item)` calls matches the number of `add(item)` calls.
 *
 * https://github.com/facebook/metro/commit/fc29a1177f883144674cf85a813b58567f69d545
 */
export declare const createCountingSet: () => CountingSet<string>;
/**
 * In Metro versions prior to v0.80.10, `sourceMapString` was exported as a default export.
 * Starting with v0.80.10, it became a named export.
 *
 * @returns The resolved `sourceMapString` function, of type {@link SourceMapString}
 */
export declare const metroSourceMapString: SourceMapString;
/**
 * Converts the serializer result of type {@link MetroSerializerOutput} to {@link MetroBundleWithMap}.
 */
export declare const convertSerializerOutput: (output: MetroSerializerOutput) => Promise<MetroBundleWithMap>;
/**
 * Gets the default Expo configuration options.
 */
export declare const getDefaultExpoConfig: (projectRoot: string, options: DefaultConfigOptions) => DefaultConfigOptions;
//# sourceMappingURL=utils.d.ts.map