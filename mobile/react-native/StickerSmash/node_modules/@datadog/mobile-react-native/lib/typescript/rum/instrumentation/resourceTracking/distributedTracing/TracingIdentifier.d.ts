import type { BigInteger } from 'big-integer';
/**
 * Available formats for representing the {@link TracingIdentifier} as a string.
 */
export declare enum TracingIdFormat {
    /**
     * Decimal string representation of the full tracing id.
     */
    decimal = 0,
    /**
     * The low bits of the tracing id as a decimal.
     */
    lowDecimal = 1,
    /**
     * The high bits of the tracing id as a decimal.
     */
    highDecimal = 2,
    /**
     * Hexadecimal string representation of the full tracing id.
     */
    hex = 3,
    /**
     * Hexadecimal string representation of the low bits of the tracing id.
     */
    lowHex = 4,
    /**
     * Hexadecimal string representation of the high bits of the tracing id.
     */
    highHex = 5,
    /**
     * Padded hexadecimal string representation of the full tracing id.
     */
    paddedHex = 6,
    /**
     * Padded hexadecimal string representation of the low bits of the tracing id.
     */
    paddedLowHex = 7,
    /**
     * Padded hexadecimal string representation of the high bits of the tracing id.
     */
    paddedHighHex = 8
}
/**
 * A {@link TracingIdentifier} used for Traces (128 bit).
 */
export type TraceId = TracingIdentifier & {
    _brand: 'traceId';
};
/**
 * A {@link TracingIdentifier} used for Spans (64 bit).
 */
export type SpanId = TracingIdentifier & {
    _brand: 'spanId';
};
/**
 * The tracing identifier type.
 */
export declare enum TracingIdType {
    /**
     * 128-bit UUID.
     */
    trace = 0,
    /**
     * 64-bit UUID.
     */
    span = 1
}
/**
 * A {@link TracingIdentifier} is a unique UUID that can be 64bit or 128bit, and provides
 * convenient methods to represent it as a HEX or DECIMAL string, and it allows the masking
 * of its low or high bits.
 *
 * Create a new identifier by calling {@link TracingIdentifier.createTraceId()} or
 * {@link TracingIdentifier.createSpanId()}.
 */
export declare class TracingIdentifier {
    /**
     * Read-only generated ID as a {@link BigInteger}.
     */
    readonly id: BigInteger;
    /**
     * Read-only type to determine whether the identifier is a {@link TraceId} or a {@link SpanId}.
     */
    readonly type: TracingIdType;
    /**
     * Creates a new unique Trace ID.
     * @returns the generated {@link TraceId}.
     */
    static createTraceId(): TraceId;
    /**
     * Creates a new unique Span ID.
     * @returns the generated {@link SpanId}.
     */
    static createSpanId(): SpanId;
    /**
     * Private constructor to initialize the {@link TracingIdentifier} based on the given
     * {@link TracingIdType}.
     */
    private constructor();
    /**
     * Generates a unique ID with the given format.
     * @param format - the desired format (64bit or 128bit).
     * @returns the generated UUID as a {@link BigInteger}.
     */
    private generateUUID;
    /**
     * Returns a string representation of the Tracing ID.
     * @param format - The type of representation to use.
     * @returns The ID as a string in the specified representation type.
     */
    toString(format: TracingIdFormat): string;
}
//# sourceMappingURL=TracingIdentifier.d.ts.map