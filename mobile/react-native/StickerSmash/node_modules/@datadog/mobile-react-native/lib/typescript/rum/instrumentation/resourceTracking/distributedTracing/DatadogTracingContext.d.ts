import { DatadogTracingIdentifier } from './DatadogTracingIdentifier';
import type { SpanId, TraceId } from './TracingIdentifier';
/**
 * An object that contains the tracing attributes as headers for network requests and attributes
 * for RUM Resources.
 */
export declare class DatadogTracingContext {
    private readonly headersForRequest;
    private readonly rumResourceContext;
    readonly traceId?: DatadogTracingIdentifier;
    readonly spanId?: DatadogTracingIdentifier;
    constructor(requestHeaders: {
        header: string;
        value: string;
    }[], resourceContext: Record<string, string | number>, traceId: TraceId | undefined | void, spanId: SpanId | undefined | void);
    /**
     * Get the tracing headers to add to your network request.
     * @returns the headers for the request as a key-value object.
     */
    getHeadersForRequest(): Record<string, string>;
    /**
     * Get the tracing headers to add to your network request, as an array of key-value objects.
     * @returns the headers for the request as an array of key-value objects.
     */
    getHeadersForRequestAsArray(): {
        header: string;
        value: string;
    }[];
    /**
     * Get the RUM Resource Context tracing attributes to your RUM Resource context.
     * @returns the RUM Resource context tracing attributes.
     */
    getRumResourceContext(): Record<string, string | number>;
    /**
     * Convenience method to inject the tracing headers to your request.
     * @param inject a callback that is called for each header that should be added to your request.
     */
    injectHeadersForRequest(inject: (header: string, value: string) => void): void;
    /**
     * Convenience method to inject the RUM Resource attributes to your RUM Resource context.
     * @param inject a callback that is called for each attribute that should be added to your RUM Resource context.
     */
    injectRumResourceContext(inject: (attribute: string, value: string | number) => void): void;
}
//# sourceMappingURL=DatadogTracingContext.d.ts.map