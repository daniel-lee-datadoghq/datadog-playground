import type { MetroConfig } from 'metro';
import type { DatadogExpoConfigOptions, DefaultConfigOptions } from './types/expoTypes';
/**
 * Custom Datadog Metro Configuration.
 */
export type DatadogMetroConfigOptions = {
    /**
     * Determines whether a Debug ID should be injected into bundles and sourcemaps.
     *
     * The Debug ID establishes a unique connection between a bundle and its corresponding sourcemap.
     * It is highly recommended to keep this enabled unless you have a specific reason to disable it.
     *
     * Default: `true`
     */
    useDebugId?: boolean;
};
/**
 * Extends the Metro bundler configuration to integrate with Datadog.
 *
 * *Note: If a custom serializer is used and `config.useDebugId` is set to `true` (as it is by default),
 * you must manually invoke `options.datadogBundleCallback` within the serializer.*
 */
export declare function withDatadogMetroConfig(config: MetroConfig & DatadogMetroConfigOptions): MetroConfig;
/**
 * Extends the Expo configuration to integrate with Datadog.
 * @param config
 * @returns
 */
export declare function getDatadogExpoConfig(projectRoot: string, options?: DefaultConfigOptions & DatadogExpoConfigOptions): DefaultConfigOptions;
/**
 * Extends the Metro bundler configuration by enabling Debug ID injection.
 * Ref: https://github.com/tc39/ecma426/blob/main/proposals/debug-id.md
 */
export declare function withDatadogDebugId(config: MetroConfig): MetroConfig;
//# sourceMappingURL=metroConfig.d.ts.map