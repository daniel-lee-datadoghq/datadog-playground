import type { GestureResponderEvent } from 'react-native';
import type { TimeProvider } from '../utils/time-provider/TimeProvider';
import type { ActionEventMapper } from './eventMappers/actionEventMapper';
import type { ErrorEventMapper } from './eventMappers/errorEventMapper';
import type { ResourceEventMapper } from './eventMappers/resourceEventMapper';
import type { DatadogTracingContext } from './instrumentation/resourceTracking/distributedTracing/DatadogTracingContext';
import { DatadogTracingIdentifier } from './instrumentation/resourceTracking/distributedTracing/DatadogTracingIdentifier';
import type { ErrorSource, DdRumType, RumActionType, ResourceKind, FirstPartyHost, PropagatorType } from './types';
declare class DdRumWrapper implements DdRumType {
    private nativeRum;
    private lastActionData?;
    private errorEventMapper;
    private resourceEventMapper;
    private actionEventMapper;
    private timeProvider;
    startView: (key: string, name: string, context?: object, timestampMs?: number) => Promise<void>;
    stopView: (key: string, context?: object, timestampMs?: number) => Promise<void>;
    startAction: (type: RumActionType, name: string, context?: object, timestampMs?: number) => Promise<void>;
    stopAction: (...args: [
        type: RumActionType,
        name: string,
        context?: object,
        timestampMs?: number
    ] | [context?: object, timestampMs?: number]) => Promise<void>;
    setTimeProvider: (timeProvider: TimeProvider) => void;
    addAction: (type: RumActionType, name: string, context?: object, timestampMs?: number, actionContext?: GestureResponderEvent) => Promise<void>;
    startResource: (key: string, method: string, url: string, context?: object, timestampMs?: number) => Promise<void>;
    stopResource: (key: string, statusCode: number, kind: ResourceKind, size?: number, context?: object, timestampMs?: number, resourceContext?: XMLHttpRequest) => Promise<void>;
    addError: (message: string, source: ErrorSource, stacktrace: string, context?: object, timestampMs?: number, fingerprint?: string) => Promise<void>;
    addTiming: (name: string) => Promise<void>;
    addViewLoadingTime: (overwrite: boolean) => Promise<void>;
    stopSession: () => Promise<void>;
    addFeatureFlagEvaluation: (name: string, value: unknown) => Promise<void>;
    getCurrentSessionId(): Promise<string | undefined>;
    getTracingContext: (url: string, tracingSamplingRate: number, firstPartyHosts: FirstPartyHost[]) => DatadogTracingContext;
    getTracingContextForPropagators: (propagators: PropagatorType[], tracingSamplingRate: number) => DatadogTracingContext;
    generateTraceId(): DatadogTracingIdentifier;
    generateSpanId(): DatadogTracingIdentifier;
    registerErrorEventMapper(errorEventMapper: ErrorEventMapper): void;
    unregisterErrorEventMapper(): void;
    registerResourceEventMapper(resourceEventMapper: ResourceEventMapper): void;
    unregisterResourceEventMapper(): void;
    registerActionEventMapper(actionEventMapper: ActionEventMapper): void;
    unregisterActionEventMapper(): void;
    private callNativeStopAction;
    private getStopActionNativeCallArgs;
}
export declare const DdRum: DdRumWrapper;
export {};
//# sourceMappingURL=DdRum.d.ts.map