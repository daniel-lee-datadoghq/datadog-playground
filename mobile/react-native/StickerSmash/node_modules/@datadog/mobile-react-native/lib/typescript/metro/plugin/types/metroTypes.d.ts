import type { Module, ReadOnlyGraph, SerializerOptions, MixedOutput, MetroConfig } from 'metro';
export type MetroSerializerOutput = string | MetroBundleWithMap | Promise<string | MetroBundleWithMap>;
export type MetroSerializer = (entryPoint: string, preModules: ReadonlyArray<Module>, graph: ReadOnlyGraph, options: SerializerOptions) => MetroSerializerOutput;
export type MetroVirtualModuleOutput = {
    type: 'js/script/virtual';
    data: {
        code: string;
        lineCount: number;
        map: [];
    };
};
export type SourceMapString = (modules: Module<MixedOutput>[], options: {
    excludeSource?: boolean;
    processModuleFilter?: (module: Module<MixedOutput>) => boolean;
    shouldAddToIgnoreList?: (module: Module<MixedOutput>) => boolean;
}) => string;
export type Bundle = {
    modules: Array<[id: number, code: string]>;
    post: string;
    pre: string;
};
export type MetroBundleWithMap = {
    code: string;
    map: string;
};
export type DatadogMetroSerializer = (entryPoint: string, preModules: ReadonlyArray<Module>, graph: ReadOnlyGraph, options: SerializerOptions & {
    datadogBundleCallback?: (bundle: Bundle) => Bundle;
}) => Promise<string | MetroBundleWithMap>;
export type DatadogDebugIdModule = Module<MetroVirtualModuleOutput> & {
    setSource: (code: string) => void;
};
export type { MixedOutput, MetroConfig, Module, ReadOnlyGraph };
//# sourceMappingURL=metroTypes.d.ts.map