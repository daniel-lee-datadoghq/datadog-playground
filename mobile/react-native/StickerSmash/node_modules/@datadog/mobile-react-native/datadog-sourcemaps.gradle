/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */

import org.apache.tools.ant.taskdefs.condition.Os

afterEvaluate {

    def androidExtension = extensions.findByName("android")

    if (androidExtension == null || android.applicationVariants == null) {
        throw new GradleException("Android extension is missing or running not in the application" +
                " module. Make sure you've applied datadog-sourcemaps.gradle in the" +
                " application module (usually it is located in the android/app/build.gradle file).")
    }

    androidExtension.applicationVariants.all { variant ->

        def releaseVersion = getVersionName(variant)

        def buildVersion = variant.versionCode

        if (releaseVersion == null) {
            throw new GradleException("Cannot determine application version. Make sure to" +
                    " define versionName property in the application/variant config.")
        }

        def reactConfig = getReactConfig(buildDir, variant)
        def targetName = reactConfig["targetName"]
        def targetPath = reactConfig["targetPath"]

        def reactRoot = file(reactConfig.root)

        def bundleTask = tasks.findByName(reactConfig.bundleTaskName)

        if (bundleTask == null) {
            logger.info("Cannot find JS bundle task for variant=${targetName}.")
            return
        }
        if (!bundleTask.enabled) {
            logger.info("JS bundle task for variant=${targetName} is not enabled.")
            return
        }

        def serviceName = getServiceName(variant)
        logger.info("Release version used for the upload of variant=${targetName} is ${releaseVersion}.")
        logger.info("Service name used for the upload of variant=${targetName} is ${serviceName}.")

        def bundleAssetName = reactConfig.bundleAssetName
        def jsSourceMapsDir = file("$buildDir/generated/sourcemaps/react/${targetPath}")
        def jsOutputSourceMapFile = file("$jsSourceMapsDir/${bundleAssetName}.map")
        def packagerOutputSourceMapFile = file("$buildDir/intermediates/sourcemaps/react/${targetPath}/${bundleAssetName}.packager.map")

        def uploadTask = tasks.create("upload${targetName}Sourcemaps") {
            group = "datadog"
            description = "Uploads sourcemaps to Datadog."

            def uploadSourcemap = { jsBundleFile ->
                return [
                        "${getDatadogCiExecPath(reactConfig)}",
                        "react-native",
                        "upload",
                        "--platform",
                        "android",
                        "--service",
                        serviceName,
                        "--bundle",
                        jsBundleFile.absolutePath,
                        "--sourcemap",
                        jsOutputSourceMapFile.absolutePath,
                        "--release-version",
                        releaseVersion,
                        "--build-version",
                        buildVersion
                ]
            }

            doFirst {
                def jsBundleFile = reactConfig.bundleFileResolver()
                if (jsBundleFile == null) {
                    throw new GradleException("JS bundle file doesn't exist, aborting upload.")
                }

                if (!jsOutputSourceMapFile.exists()) {
                    throw new GradleException("JS sourcemap file doesn't exist, aborting upload.")
                }

                // Copy Debug ID from packager sourcemap to composed sourcemap (Hermes)
                if (packagerOutputSourceMapFile.exists()) {
                    logger.info("Copying Debug ID from ${packagerOutputSourceMapFile.absolutePath} to ${jsOutputSourceMapFile.absolutePath}")
                    copyDebugId(packagerOutputSourceMapFile.absolutePath, jsOutputSourceMapFile.absolutePath, reactRoot)
                }

                runShellCommand(uploadSourcemap(jsBundleFile), reactRoot)
            }
        }

        uploadTask.dependsOn bundleTask
        bundleTask.finalizedBy uploadTask
    }
}

/**
 * Copies the Debug ID from the packager sourcemap to the composed sourcemap (Hermes).
 */
private def copyDebugId(String packagerSourceMapPath, String jsSourceMapPath, File workingDirectory) {
    def ddReactNativePath = getDatadogReactNativePath(workingDirectory)
    def copyDebugIdScript = new File("$ddReactNativePath/scripts/copy-debug-id.js")
    if (!copyDebugIdScript.exists()) {
        println("ERROR: copy Debug ID script does not exist at ${copyDebugIdScript.absolutePath}")
        return
    }
    
    def nodeExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? 'node.exe' : 'node'

    def copyDebugIdCommand = [
        nodeExecutable,
        copyDebugIdScript,
        packagerSourceMapPath,
        jsSourceMapPath
    ]

    runShellCommand(copyDebugIdCommand, workingDirectory)
}

/**
 * We use a function here to resolve the datadog-ci executable path.
 * If DATADOG_CI_EXEC env variable is defined, it will be returned (if valid).
 */
private def getDatadogCiExecPath(reactConfig) {
    def defaultPath = "${reactConfig.root}/node_modules/.bin/datadog-ci"

    // Try to retrieve the path from ENV variable
    def envPath = System.getenv('DATADOG_CI_EXEC')
    if (envPath != null) {
        if (isValidDatadogCiExec(envPath)) {
            return envPath
        } else {
            println("WARNING: Ignoring DATADOG_CI_EXEC as it does not point to a valid datadog-ci executable")
        }
    }

    def nodeExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? 'node.exe' : 'node'
    def nodeScript = '''
    const path = require('path');
    const modulePath = require.resolve('@datadog/datadog-ci/package.json');
    const nodeModulesDir = path.resolve(path.dirname(modulePath), '../../');
    const datadogCiExec = path.join(nodeModulesDir, '.bin', 'datadog-ci');
    console.log(datadogCiExec);
    '''

    def stdout = new ByteArrayOutputStream()
    def process = new ProcessBuilder(nodeExecutable)
            .redirectErrorStream(true)
            .start()

    process.outputStream.withWriter { writer ->
        writer << nodeScript
    }

    process.inputStream.eachLine { line ->
        stdout << line << '\n'
    }
    
    process.waitFor()

    def resolvedPath = stdout.toString().trim()
    if (isValidDatadogCiExec(resolvedPath)) {
        return resolvedPath
    } else {
        println("WARNING: Could not resolve datadog-ci executable path, falling back to default: ${defaultPath}")
    }

    return defaultPath
}

/**
 * We use a function here to resolve the Datadog React Native package path.
 * If DATADOG_REACT_NATIVE_PATH env variable is defined, it will be returned (if valid).
 */
private def getDatadogReactNativePath(File workingDirectory) {
    def defaultPath = "${workingDirectory.absolutePath}/node_modules/@datadog/mobile-react-native"

    // Try to retrieve the path from ENV variable
    def envPath = System.getenv('DATADOG_REACT_NATIVE_PATH')
    if (envPath != null) {
        if (isValidDatadogPackagePath(envPath)) {
            return envPath
        } else {
            println("WARNING: Ignoring DATADOG_REACT_NATIVE_PATH as it does not point to a valid @datadog/mobile-react-native package (${envPath})")
        }
    }

    def nodeExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? 'node.exe' : 'node'
    def nodeScript = '''
    const path = require('path');
    const libModulePath = require.resolve('@datadog/mobile-react-native');
    const packagePath = path.resolve(path.dirname(libModulePath), '../..')
    console.log(packagePath);
    '''

    def stdout = new ByteArrayOutputStream()
    def process = new ProcessBuilder(nodeExecutable)
            .redirectErrorStream(true)
            .start()

    process.outputStream.withWriter { writer ->
        writer << nodeScript
    }

    process.inputStream.eachLine { line ->
        stdout << line << '\n'
    }
    
    process.waitFor()

    def resolvedPath = stdout.toString().trim()
    if (isValidDatadogPackagePath(resolvedPath)) {
        return resolvedPath
    } else {
        println("WARNING: Could not resolve @datadog/mobile-react-native path, falling back to default: ${defaultPath}")
    }

    return defaultPath
}

/**
 * Function to validate @datadog/mobile-react-native path
 */
 private def isValidDatadogPackagePath(String path) {
    def packageJsonFile = new File(path, "package.json")

    // Check package.json exists
    if (!packageJsonFile.exists()) {
        return false;
    }

    // Check if it is @datadog/mobile-react-native
    def packageContent = packageJsonFile.text
    if (!packageContent.contains('"name": "@datadog/mobile-react-native"')) {
        return false;
    }

    return true;
 }

/**
 * Function to validate datadog-ci executable path.
 */
private def isValidDatadogCiExec(String path) {
    def file = new File(path)
    if (!file.exists() || !file.canExecute()) {
        return false
    }
    
    return true
}

/**
 * We use a function here to resolve the correct bundle location after the bundle task
 * is over, as its location can depend on the Android Gradle Plugin version.
 */
private def getBundleFileResolver(String[] jsBundleDirs, String bundleAssetName) {
    def resolver = { ->
        return jsBundleDirs.collect {
            file("$it/$bundleAssetName")
        }.find {
            it.exists()
        }
    }

    return resolver
}

/** 
 * From RN 0.71, the following things changed in the RN gradle plugin:
 * - bundle task name changed from "bundle${targetName}JsAndAssets" to "createBundle${targetName}JsAndAssets"
 * - bundle dir changed from "$buildDir/generated/assets/react/${targetPath}" to "$buildDir/ASSETS/createBundle${targetName}JsAndAssets"
 *   (and then "$buildDir/generated/assets/createBundle${targetPath}JsAndAssets" with the release of Android Gradle Plugin 7.4, see https://github.com/facebook/react-native/issues/35439)
 * - config was in "project.react" and is now in "project.extensions.react"
 * - accessing parameters values requires calling a getter 
 * - target path changed from variant.dirName to variant.name
 */
private def getReactConfig(File buildDir, variant) {
    def reactConfig = [:]

    if (project.extensions.findByName("react")) {
        // From RN 0.71
        // Locations and names are defined in "node_modules/react-native-gradle-plugin/src/main/kotlin/com/facebook/react/TaskConfiguration.kt"
        def bundleAssetName = project.extensions.react.bundleAssetName.get() ?: "index.android.bundle"
        def targetName = variant.name.capitalize()
        def targetPath = variant.name
        reactConfig['bundleTaskName'] = "createBundle${targetName}JsAndAssets"
        reactConfig['bundleFileResolver'] = getBundleFileResolver([
            "$buildDir/ASSETS/createBundle${targetName}JsAndAssets", // Android Gradle Plugin 7.3
            "$buildDir/generated/assets/createBundle${targetName}JsAndAssets" // Android Gradle Plugin 7.4 and up
        ] as String[], bundleAssetName)
        reactConfig['bundleAssetName'] = bundleAssetName
        reactConfig['targetPath'] = targetPath
        reactConfig['targetName'] = targetName
        reactConfig['root'] = project.extensions.react.root.get() ?: "../../"
    } else if (project.hasProperty("react")) {
        // WARNING: on RN 0.71, `project.react` is an empty map, so this `if` must go after the previous one.
        // Legacy way, before RN 0.71
        // Locations and names are defined in "node_modules/react-native/react.gradle"
        def targetName = variant.name.capitalize()
        def targetPath = variant.dirName
        def bundleAssetName = project.react.bundleAssetName ?: "index.android.bundle"
        reactConfig['bundleTaskName'] = "bundle${targetName}JsAndAssets"
        reactConfig['bundleFileResolver'] = getBundleFileResolver(["$buildDir/generated/assets/react/${targetPath}"] as String[], bundleAssetName)
        reactConfig['bundleAssetName'] = bundleAssetName
        reactConfig['targetPath'] = targetPath
        reactConfig['targetName'] = targetName
        reactConfig['root'] = project.react.root ?: "../../"
    } else {
        // We assume this cannot happen with RN >= 0.71, so we use the legacy default values
        // Locations and names are defined in "node_modules/react-native/react.gradle"
        def targetName = variant.name.capitalize()
        def targetPath = variant.dirName
        def bundleAssetName = "index.android.bundle"
        reactConfig['bundleTaskName'] = "bundle${targetName}JsAndAssets"
        reactConfig['bundleFileResolver'] = getBundleFileResolver(["$buildDir/generated/assets/react/${targetPath}"] as String[], bundleAssetName)
        reactConfig['bundleAssetName'] = bundleAssetName
        reactConfig['targetPath'] = targetPath
        reactConfig['targetName'] = targetName
        reactConfig['root'] = "../../"
    }

    return reactConfig
}

private def runShellCommand(
        List<String> command,
        File workingDirectory
) {
    def outputStream = new ByteArrayOutputStream()
    def errorStream = new ByteArrayOutputStream()

    try {
        def result = exec {
            workingDir = workingDirectory
            standardOutput = outputStream
            errorOutput = errorStream
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine("cmd", "/c", *command)
            } else {
                commandLine(*command)
            }
        }

        if (result.exitValue != 0) {
            logger.error(errorStream.toString("UTF-8"))
            result.rethrowFailure()
        } else {
            logger.lifecycle(outputStream.toString("UTF-8"))
        }
    } catch (Exception e) {
        def errorStreamContent = errorStream.toString("UTF-8")
        def standardStreamContent = outputStream.toString("UTF-8")
        logger.error("Exception raised during command execution," +
                " stderr=${errorStreamContent}, stdout=${standardStreamContent}")
        throw e
    }
}

private def getServiceName(variant) {
    if (project.ext.has("datadog") && project.ext.datadog.serviceName) {
        return project.ext.datadog.serviceName
    }
    return variant.applicationId
}

private def getVersionName(variant) {
    def envVersionName = System.getenv('DATADOG_RELEASE_VERSION')
    if (envVersionName != null) {
        return envVersionName;
    }

    return variant.versionName
}
