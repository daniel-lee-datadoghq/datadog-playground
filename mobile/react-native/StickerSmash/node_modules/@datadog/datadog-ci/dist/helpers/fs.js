"use strict";
/**
 * @file Functions that interact with the file system.
 * Functions have built-in error handling for more descriptive error messages.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDirectories = exports.zipContents = exports.writeFile = exports.deleteFolder = void 0;
const fs_1 = __importDefault(require("fs"));
const jszip_1 = __importDefault(require("jszip"));
const upath_1 = __importDefault(require("upath"));
/**
 * Delete a folder and all its contents
 * @param folderPath the folder to delete
 * @throws Error if the deletion fails
 */
const deleteFolder = (folderPath) => {
    try {
        fs_1.default.rmSync(folderPath, { recursive: true, force: true });
    }
    catch (err) {
        if (err instanceof Error) {
            throw Error(`Failed to delete files located at ${folderPath}: ${err.message}`);
        }
    }
};
exports.deleteFolder = deleteFolder;
/**
 * Write the data to a file
 * @param filePath path to the file
 * @param data the data to write
 * @throws Error if the file cannot be written
 */
const writeFile = (filePath, data) => {
    try {
        fs_1.default.writeFileSync(filePath, data);
    }
    catch (err) {
        if (err instanceof Error) {
            throw Error(`Unable to write file: ${err.message}`);
        }
    }
};
exports.writeFile = writeFile;
/**
 * Zip the entire contents of a folder
 * @param rootFolderPath path to the root folder to zip
 * @param zipPath path to save the zip file
 * @throws Error if the zip fails
 */
const zipContents = (rootFolderPath, zipPath) => __awaiter(void 0, void 0, void 0, function* () {
    const zip = new jszip_1.default();
    const addFolderToZip = (folderPath) => {
        if (!fs_1.default.existsSync(folderPath)) {
            throw Error(`Folder does not exist: ${folderPath}`);
        }
        const folder = fs_1.default.statSync(folderPath);
        if (!folder.isDirectory()) {
            throw Error(`Path is not a directory: ${folderPath}`);
        }
        const contents = fs_1.default.readdirSync(folderPath);
        for (const item of contents) {
            const fullPath = upath_1.default.join(folderPath, item);
            const file = fs_1.default.statSync(fullPath);
            if (file.isDirectory()) {
                addFolderToZip(fullPath);
            }
            else {
                const data = fs_1.default.readFileSync(fullPath);
                zip.file(upath_1.default.relative(rootFolderPath, fullPath), data);
            }
        }
    };
    try {
        addFolderToZip(rootFolderPath);
        const zipContent = yield zip.generateAsync({ type: 'nodebuffer' });
        fs_1.default.writeFileSync(zipPath, zipContent);
    }
    catch (err) {
        if (err instanceof Error) {
            throw Error(`Unable to zip files: ${err.message}`);
        }
    }
});
exports.zipContents = zipContents;
/**
 * Creates the root folder and any subfolders
 * @param rootFolderPath path to the root folder
 * @param subFolders paths to any subfolders to be created
 * @throws Error if the root folder cannot be deleted or folders cannot be created
 */
const createDirectories = (rootFolderPath, subFolders) => {
    try {
        fs_1.default.mkdirSync(rootFolderPath);
        for (const subFolder of subFolders) {
            fs_1.default.mkdirSync(subFolder);
        }
    }
    catch (err) {
        if (err instanceof Error) {
            throw Error(`Unable to create directories: ${err.message}`);
        }
    }
};
exports.createDirectories = createDirectories;
//# sourceMappingURL=fs.js.map