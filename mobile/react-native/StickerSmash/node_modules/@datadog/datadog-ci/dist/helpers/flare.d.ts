/**
 * @file Functions used by `lambda flare` and `cloud-run flare`.
 */
import { Writable } from 'stream';
/**
 * Send the zip file to Datadog support
 * @param zipPath
 * @param caseId
 * @param email
 * @param apiKey
 * @param rootFolderPath
 * @throws Error if the request fails
 */
export declare const sendToDatadog: (zipPath: string, caseId: string, email: string, apiKey: string, rootFolderPath: string) => Promise<void>;
/**
 * Calculates the full endpoint URL
 * @throws Error if the site is invalid
 * @returns the full endpoint URL
 */
export declare const getEndpointUrl: () => string;
/**
 * Searches current directory for project files
 * @returns a set of file paths of project files
 */
export declare const getProjectFiles: (projectFiles: string[]) => Promise<Set<string>>;
/**
 * Validates a path to a file
 * @param filePath path to the file
 * @param projectFilePaths map of file names to file paths
 * @param additionalFiles set of additional file paths
 * @throws Error if the file path is invalid or the file was already added
 * @returns the full path to the file
 */
export declare const validateFilePath: (filePath: string, projectFilePaths: Set<string>, additionalFiles: Set<string>) => string;
/**
 * Validate the start and end flags and adds error messages if found
 * @param start start time as a string
 * @param end end time as a string
 * @throws error if start or end are not valid numbers
 * @returns [startMillis, endMillis] as numbers or [undefined, undefined] if both are undefined
 */
export declare const validateStartEndFlags: (start: string | undefined, end: string | undefined) => number[] | undefined[];
export declare const validateCliVersion: (stdout: Pick<Writable, 'write'>) => Promise<void>;
