import { BaseContext } from 'clipanion';
import { DatadogCiConfig } from './config';
import { SpanTag, SpanTags } from './interfaces';
export declare const CI_PIPELINE_URL = "ci.pipeline.url";
export declare const CI_PROVIDER_NAME = "ci.provider.name";
export declare const CI_PIPELINE_ID = "ci.pipeline.id";
export declare const CI_PIPELINE_NAME = "ci.pipeline.name";
export declare const CI_PIPELINE_NUMBER = "ci.pipeline.number";
export declare const CI_WORKSPACE_PATH = "ci.workspace_path";
export declare const GIT_REPOSITORY_URL = "git.repository_url";
export declare const CI_JOB_URL = "ci.job.url";
export declare const CI_JOB_NAME = "ci.job.name";
export declare const CI_STAGE_NAME = "ci.stage.name";
export declare const CI_NODE_NAME = "ci.node.name";
export declare const CI_NODE_LABELS = "ci.node.labels";
export declare const CI_ENV_VARS = "_dd.ci.env_vars";
export declare const GIT_BRANCH = "git.branch";
export declare const GIT_COMMIT_AUTHOR_DATE = "git.commit.author.date";
export declare const GIT_COMMIT_AUTHOR_EMAIL = "git.commit.author.email";
export declare const GIT_COMMIT_AUTHOR_NAME = "git.commit.author.name";
export declare const GIT_COMMIT_COMMITTER_DATE = "git.commit.committer.date";
export declare const GIT_COMMIT_COMMITTER_EMAIL = "git.commit.committer.email";
export declare const GIT_COMMIT_COMMITTER_NAME = "git.commit.committer.name";
export declare const GIT_COMMIT_MESSAGE = "git.commit.message";
export declare const GIT_SHA = "git.commit.sha";
export declare const GIT_TAG = "git.tag";
export declare const GIT_HEAD_SHA = "git.commit.head_sha";
export declare const GIT_PULL_REQUEST_BASE_BRANCH_SHA = "git.pull_request.base_branch_sha";
export declare const GIT_PULL_REQUEST_BASE_BRANCH_HEAD_SHA = "git.pull_request.base_branch_head_sha";
export declare const GIT_PULL_REQUEST_BASE_BRANCH = "git.pull_request.base_branch";
export declare const PR_NUMBER = "pr.number";
export declare const SBOM_TOOL_GENERATOR_NAME = "tool.generator.name";
export declare const SBOM_TOOL_GENERATOR_VERSION = "tool.generator.version";
export declare const SERVICE = "service";
/**
 * Receives an array of the form ['key:value', 'key2:value2']
 * and returns an object of the form {key: 'value', key2: 'value2'}
 */
export declare const parseTags: (tags: string[]) => Record<string, string>;
/**
 * Similar to `parseTags` but it's assumed that numbers are received
 * Receives an array of the form ['key:123', 'key2:321']
 * and returns an object of the form {key: 123, key2: 321}
 */
export declare const parseMetrics: (tags: string[]) => {};
/**
 * Receives a filepath to a JSON file that contains tags in the form of:
 * {
 *  "key": "value",
 *  "key2": "value2"
 * }
 * and returns a record of the form {key: 'value', key2: 'value2'}
 * Numbers are converted to strings and nested objects are ignored.
 * @param context - the context of the CLI, used to write to stdout and stderr
 * @param tagsFile - the path to the JSON file
 */
export declare const parseTagsFile: (context: BaseContext, tagsFile: string | undefined) => [Record<string, string>, boolean];
/**
 * Similar to `parseTagsFile` but it's assumed that numbers are received
 * If a field is not a number, it will be ignored
 * @param context - the context of the CLI, used to write to stdout and stderr
 * @param measuresFile - the path to the JSON file
 */
export declare const parseMeasuresFile: (context: BaseContext, measuresFile: string | undefined) => [Record<string, number>, boolean];
/**
 * These are required git tags for the following commands: sarif and sbom.
 */
export declare const REQUIRED_GIT_TAGS: SpanTag[];
/**
 * A utility to determine which required git tags are missing.
 * @param tags - the tags to check
 * @returns an array of the missing required git tags (ex. ['git.repository_url', 'git.branch'])
 */
export declare const getMissingRequiredGitTags: (tags: SpanTags) => string[];
/**
 * Get the tags to upload results in CI for the following commands: sarif and sbom.
 * @param config - the configuration of the CLI
 * @param additionalTags - additional tags passed, generally from the command line.
 * @param includeCiTags - include CI tags or not
 */
export declare const getSpanTags: (config: DatadogCiConfig, additionalTags: string[] | undefined, includeCiTags: boolean, gitPath?: string) => Promise<SpanTags>;
