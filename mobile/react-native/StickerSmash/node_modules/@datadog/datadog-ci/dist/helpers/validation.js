"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInteger = exports.checkAPIKeyOverride = exports.isValidDatadogSite = exports.checkFile = void 0;
const fs_1 = __importDefault(require("fs"));
const t = __importStar(require("typanion"));
const constants_1 = require("../constants");
const checkFile = (path) => {
    try {
        const stats = fs_1.default.statSync(path);
        if (stats.size === 0) {
            return { exists: true, empty: true };
        }
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            return { exists: false, empty: false };
        }
        // Other kind of error
        throw error;
    }
    return { exists: true, empty: false };
};
exports.checkFile = checkFile;
/**
 * Check if a string is a valid Datadog site.
 *
 * If the environment variable `DD_CI_BYPASS_SITE_VALIDATION` is
 * set, then it will return `true`.
 *
 * @param site an optional string.
 * @returns a boolean indicating if the provided site is valid a Datadog site.
 */
const isValidDatadogSite = (site) => {
    if (site === undefined) {
        return false;
    }
    return !!process.env.DD_CI_BYPASS_SITE_VALIDATION || constants_1.DATADOG_SITES.includes(site.toLowerCase());
};
exports.isValidDatadogSite = isValidDatadogSite;
const renderDuplicateAPIKey = (environmentAPIKey) => {
    return `API keys were specified both in a configuration file and in the environment.\nThe environment API key ending in ${environmentAPIKey.slice(-4)} will be used.\n`;
};
const checkAPIKeyOverride = (environmentAPIKey, configFileAPIKey, stdout) => {
    if (configFileAPIKey && environmentAPIKey && configFileAPIKey !== environmentAPIKey) {
        stdout.write(renderDuplicateAPIKey(environmentAPIKey));
    }
};
exports.checkAPIKeyOverride = checkAPIKeyOverride;
const isInteger = () => t.cascade(t.isNumber(), t.isInteger());
exports.isInteger = isInteger;
//# sourceMappingURL=validation.js.map