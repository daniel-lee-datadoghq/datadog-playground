"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderAdditionalFiles = exports.renderProjectFiles = exports.renderFlareHeader = exports.renderSoftWarning = exports.renderError = exports.failCrossTag = exports.successCheckmarkTag = exports.warningExclamationSignTag = exports.warningTag = exports.errorTag = exports.dryRunTag = void 0;
const process_1 = __importDefault(require("process"));
const chalk_1 = __importDefault(require("chalk"));
const upath_1 = __importDefault(require("upath"));
exports.dryRunTag = chalk_1.default.bold(chalk_1.default.cyan('[Dry Run]'));
exports.errorTag = chalk_1.default.bold(chalk_1.default.red('[Error]'));
exports.warningTag = chalk_1.default.bold(chalk_1.default.yellow('[Warning]'));
exports.warningExclamationSignTag = chalk_1.default.bold(chalk_1.default.yellow('[!]'));
exports.successCheckmarkTag = chalk_1.default.bold(chalk_1.default.green('✔'));
exports.failCrossTag = chalk_1.default.bold(chalk_1.default.red('✖'));
/**
 * @param error an error message or an object of type `unknown`*.
 * @returns the provided error prefixed by {@link errorTag}.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [Error] The provided error goes here!
 * ```
 */
const renderError = (error) => `${exports.errorTag} ${error}\n`;
exports.renderError = renderError;
/**
 * @param warning the message to warn about.
 * @returns the provided warning prefixed by {@link warningExclamationSignTag}.
 *
 * ```txt
 * [!] The provided warning goes here!
 * ```
 */
const renderSoftWarning = (warning) => `${exports.warningExclamationSignTag} ${warning}\n`;
exports.renderSoftWarning = renderSoftWarning;
/**
 * @returns a header indicating on which platform the 'flare' command is being run.
 * @param platformName the name of the platform. E.g. 'Cloud Run' or 'Lambda'.
 * @param isDryRun whether or not the command is a dry run.
 *
 * ```txt
 * [Dry Run] 🐶 Instrumenting Lambda function
 * ```
 */
const renderFlareHeader = (platformName, isDryRun) => {
    const prefix = isDryRun ? `${exports.dryRunTag} ` : '';
    return chalk_1.default.bold(`\n${prefix}🐶 Generating ${platformName} flare to send your configuration to Datadog...\n`);
};
exports.renderFlareHeader = renderFlareHeader;
/**
 * @returns a message indicating which project files were found, or a different
 * message if no project files were found.
 * @param projectFilePaths list of project file paths that were discovered
 *
 * ```txt
 * ✅ Found project file(s) in /Users/current-directory:
 * • package.json
 * • tsconfig.json
 * ```
 */
const renderProjectFiles = (projectFilePaths) => {
    if (projectFilePaths.size === 0) {
        return (0, exports.renderSoftWarning)('No project files found.');
    }
    let msg = chalk_1.default.bold(`\n✅ Found project file(s) in ${process_1.default.cwd()}:\n`);
    for (const filePath of projectFilePaths) {
        const fileName = upath_1.default.basename(filePath);
        msg += `• ${fileName}\n`;
    }
    return msg;
};
exports.renderProjectFiles = renderProjectFiles;
/**
 * @returns a message indicating which additional files were added, or a different
 * message if no additional files were added.
 * @param additionalFilePaths list of additional file paths that were added
 *
 * ```txt
 * ✅ Found project file(s) in /Users/current-directory:
 * • package.json
 * • tsconfig.json
 * ```
 */
const renderAdditionalFiles = (additionalFilePaths) => {
    if (additionalFilePaths.size === 0) {
        return (0, exports.renderSoftWarning)('No additional files specified.');
    }
    let msg = chalk_1.default.bold(`\nAdded ${additionalFilePaths.size} custom file(s):\n`);
    for (const filePath of additionalFilePaths) {
        const fileName = upath_1.default.basename(filePath);
        msg += `• ${fileName}\n`;
    }
    return msg;
};
exports.renderAdditionalFiles = renderAdditionalFiles;
//# sourceMappingURL=renderer.js.map