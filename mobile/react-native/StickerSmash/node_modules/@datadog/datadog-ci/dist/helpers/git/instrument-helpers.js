"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleSourceCodeIntegration = exports.uploadGitData = exports.getCurrentGitStatus = void 0;
const clipanion_1 = require("clipanion");
const git_1 = require("../../commands/git-metadata/git");
const upload_1 = require("../../commands/git-metadata/upload");
const renderer_1 = require("../renderer");
const utils_1 = require("../utils");
const getGitData = () => __awaiter(void 0, void 0, void 0, function* () {
    let currentStatus;
    try {
        currentStatus = yield (0, exports.getCurrentGitStatus)();
    }
    catch (err) {
        throw Error("Couldn't get local git status");
    }
    if (!currentStatus.isClean) {
        throw Error('Local git repository is dirty');
    }
    if (currentStatus.ahead > 0) {
        throw Error('Local changes have not been pushed remotely. Aborting git data tagging.');
    }
    const gitRemote = (0, utils_1.filterAndFormatGithubRemote)(currentStatus.remote);
    return { commitSha: currentStatus.hash, gitRemote };
});
const getCurrentGitStatus = () => __awaiter(void 0, void 0, void 0, function* () {
    const simpleGit = yield (0, git_1.newSimpleGit)();
    const gitCommitInfo = yield (0, git_1.getCommitInfo)(simpleGit);
    if (gitCommitInfo === undefined) {
        throw new Error('Git commit info is not defined');
    }
    const status = yield simpleGit.status();
    return {
        isClean: status.isClean(),
        ahead: status.ahead,
        files: status.files,
        hash: gitCommitInfo === null || gitCommitInfo === void 0 ? void 0 : gitCommitInfo.hash,
        remote: gitCommitInfo === null || gitCommitInfo === void 0 ? void 0 : gitCommitInfo.remote,
    };
});
exports.getCurrentGitStatus = getCurrentGitStatus;
const uploadGitData = (context) => __awaiter(void 0, void 0, void 0, function* () {
    const cli = new clipanion_1.Cli();
    cli.register(upload_1.UploadCommand);
    if ((yield cli.run(['git-metadata', 'upload'], context)) !== 0) {
        throw Error("Couldn't upload git metadata");
    }
    return;
});
exports.uploadGitData = uploadGitData;
const handleSourceCodeIntegration = (context, uploadGitMetadata, extraTags) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const gitData = yield getGitData();
        if (uploadGitMetadata) {
            yield (0, exports.uploadGitData)(context);
        }
        if (extraTags) {
            extraTags += `,git.commit.sha:${gitData.commitSha},git.repository_url:${gitData.gitRemote}`;
        }
        else {
            extraTags = `git.commit.sha:${gitData.commitSha},git.repository_url:${gitData.gitRemote}`;
        }
    }
    catch (err) {
        context.stdout.write((0, renderer_1.renderSoftWarning)(`Couldn't add source code integration, continuing without it. ${err}`));
    }
    return extraTags;
});
exports.handleSourceCodeIntegration = handleSourceCodeIntegration;
//# sourceMappingURL=instrument-helpers.js.map