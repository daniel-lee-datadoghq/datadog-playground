"use strict";
/**
 * @file Functions used to prompt the user for input.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestFilePath = exports.requestConfirmation = exports.confirmationQuestion = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const confirmationQuestion = (message, defaultValue = true) => ({
    message,
    name: 'confirmation',
    type: 'confirm',
    default: defaultValue,
});
exports.confirmationQuestion = confirmationQuestion;
const requestConfirmation = (message, defaultValue = true) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const confirmationAnswer = yield inquirer_1.default.prompt((0, exports.confirmationQuestion)(message, defaultValue));
        return confirmationAnswer.confirmation;
    }
    catch (err) {
        if (err instanceof Error) {
            throw Error(`Couldn't receive confirmation. ${err.message}`);
        }
        throw err;
    }
});
exports.requestConfirmation = requestConfirmation;
const requestFilePath = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const question = {
            message: 'Please enter a file path, or press Enter to finish:',
            name: 'filePath',
            type: 'input',
        };
        const filePathAnswer = yield inquirer_1.default.prompt([question]);
        return filePathAnswer.filePath;
    }
    catch (err) {
        if (err instanceof Error) {
            throw Error(`Couldn't receive file path. ${err.message}`);
        }
        throw err;
    }
});
exports.requestFilePath = requestFilePath;
//# sourceMappingURL=prompt.js.map