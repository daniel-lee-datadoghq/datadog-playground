"use strict";
/**
 * @file Functions used by `lambda flare` and `cloud-run flare`.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateCliVersion = exports.validateStartEndFlags = exports.validateFilePath = exports.getProjectFiles = exports.getEndpointUrl = exports.sendToDatadog = void 0;
const fs_1 = __importDefault(require("fs"));
const axios_1 = require("axios");
const form_data_1 = __importDefault(require("form-data"));
const upath_1 = __importDefault(require("upath"));
const constants_1 = require("../constants");
const fs_2 = require("./fs");
const helpersRenderer = __importStar(require("./renderer"));
const validation_1 = require("./validation");
const version_1 = require("./version");
/**
 * Send the zip file to Datadog support
 * @param zipPath
 * @param caseId
 * @param email
 * @param apiKey
 * @param rootFolderPath
 * @throws Error if the request fails
 */
const sendToDatadog = (zipPath, caseId, email, apiKey, rootFolderPath) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const endpointUrl = (0, exports.getEndpointUrl)();
    const form = new form_data_1.default();
    form.append('case_id', caseId);
    form.append('flare_file', fs_1.default.createReadStream(zipPath));
    form.append('datadog_ci_version', version_1.version);
    form.append('email', email);
    const headerConfig = {
        headers: Object.assign(Object.assign({}, form.getHeaders()), { 'DD-API-KEY': apiKey }),
    };
    try {
        yield (0, axios_1.post)(endpointUrl, form, headerConfig);
    }
    catch (err) {
        // Ensure the root folder is deleted if the request fails
        (0, fs_2.deleteFolder)(rootFolderPath);
        if ((0, axios_1.isAxiosError)(err)) {
            const errResponse = (_b = (_a = err.response) === null || _a === void 0 ? void 0 : _a.data.error) !== null && _b !== void 0 ? _b : '';
            const errorMessage = (_c = err.message) !== null && _c !== void 0 ? _c : '';
            let message = `Failed to send flare file to Datadog Support: ${errorMessage}. ${errResponse}\n`;
            const code = (_d = err.response) === null || _d === void 0 ? void 0 : _d.status;
            // The error message doesn't say why there was an error. All it says is:
            // "[Error] Failed to send flare file to Datadog Support: Request failed with status code 500."
            // Therefore, we need to add an explanation to clarify when the code is 500 or 403.
            switch (code) {
                case 500:
                    message += 'Are your case ID and email correct?\n';
                    break;
                case 400:
                case 403:
                    message += `Is your Datadog API key correct? Please follow this doc to set your API key: 
https://docs.datadoghq.com/serverless/libraries_integrations/cli/#environment-variables\n`;
                    break;
            }
            throw Error(message);
        }
        throw err;
    }
});
exports.sendToDatadog = sendToDatadog;
/**
 * Calculates the full endpoint URL
 * @throws Error if the site is invalid
 * @returns the full endpoint URL
 */
const getEndpointUrl = () => {
    var _a, _b;
    const baseUrl = (_b = (_a = process.env[constants_1.CI_SITE_ENV_VAR]) !== null && _a !== void 0 ? _a : process.env[constants_1.SITE_ENV_VAR]) !== null && _b !== void 0 ? _b : constants_1.DATADOG_SITE_US1;
    // The DNS doesn't redirect to the proper endpoint when a subdomain is not present in the baseUrl.
    // There is a DNS inconsistency
    let endpointUrl = baseUrl;
    if ([constants_1.DATADOG_SITE_US1, constants_1.DATADOG_SITE_EU1, constants_1.DATADOG_SITE_GOV].includes(baseUrl)) {
        endpointUrl = 'app.' + baseUrl;
    }
    if (!(0, validation_1.isValidDatadogSite)(baseUrl)) {
        throw Error(`Invalid site: ${baseUrl}. Must be one of: ${constants_1.DATADOG_SITES.join(', ')}`);
    }
    return 'https://' + endpointUrl + constants_1.FLARE_ENDPOINT_PATH;
};
exports.getEndpointUrl = getEndpointUrl;
/**
 * Searches current directory for project files
 * @returns a set of file paths of project files
 */
const getProjectFiles = (projectFiles) => __awaiter(void 0, void 0, void 0, function* () {
    const filePaths = new Set();
    const cwd = process.cwd();
    for (const fileName of projectFiles) {
        const filePath = upath_1.default.join(cwd, fileName);
        if (fs_1.default.existsSync(filePath)) {
            filePaths.add(filePath);
        }
    }
    return filePaths;
});
exports.getProjectFiles = getProjectFiles;
/**
 * Validates a path to a file
 * @param filePath path to the file
 * @param projectFilePaths map of file names to file paths
 * @param additionalFiles set of additional file paths
 * @throws Error if the file path is invalid or the file was already added
 * @returns the full path to the file
 */
const validateFilePath = (filePath, projectFilePaths, additionalFiles) => {
    const originalPath = filePath;
    filePath = fs_1.default.existsSync(filePath) ? filePath : upath_1.default.join(process.cwd(), filePath);
    if (!fs_1.default.existsSync(filePath)) {
        throw Error(helpersRenderer.renderError(`File path '${originalPath}' not found. Please try again.`));
    }
    filePath = upath_1.default.resolve(filePath);
    if (projectFilePaths.has(filePath) || additionalFiles.has(filePath)) {
        throw Error(helpersRenderer.renderSoftWarning(`File '${filePath}' has already been added.`));
    }
    return filePath;
};
exports.validateFilePath = validateFilePath;
/**
 * Validate the start and end flags and adds error messages if found
 * @param start start time as a string
 * @param end end time as a string
 * @throws error if start or end are not valid numbers
 * @returns [startMillis, endMillis] as numbers or [undefined, undefined] if both are undefined
 */
const validateStartEndFlags = (start, end) => {
    if (!start && !end) {
        return [undefined, undefined];
    }
    if (!start) {
        throw Error('Start time is required when end time is specified. [--start]');
    }
    if (!end) {
        throw Error('End time is required when start time is specified. [--end]');
    }
    let startMillis = Number(start);
    let endMillis = Number(end);
    if (isNaN(startMillis)) {
        throw Error(`Start time must be a time in milliseconds since Unix Epoch. '${start}' is not a number.`);
    }
    if (isNaN(endMillis)) {
        throw Error(`End time must be a time in milliseconds since Unix Epoch. '${end}' is not a number.`);
    }
    // Required for AWS SDK to work correctly
    startMillis = Math.min(startMillis, Date.now());
    endMillis = Math.min(endMillis, Date.now());
    if (startMillis >= endMillis) {
        throw Error('Start time must be before end time.');
    }
    return [startMillis, endMillis];
};
exports.validateStartEndFlags = validateStartEndFlags;
const validateCliVersion = (stdout) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const latestVersion = yield (0, version_1.getLatestVersion)();
        if (latestVersion !== version_1.version) {
            stdout.write(helpersRenderer.renderSoftWarning(`You are using an outdated version of datadog-ci (${version_1.version}). The latest version is ${latestVersion}. Please update for better support.`));
        }
    }
    catch (_e) {
        // Ignore Errors
    }
});
exports.validateCliVersion = validateCliVersion;
//# sourceMappingURL=flare.js.map