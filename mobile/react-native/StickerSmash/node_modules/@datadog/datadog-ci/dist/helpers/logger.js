"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
const chalk_1 = __importDefault(require("chalk"));
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class Logger {
    constructor(writeMessage, loglevel, shouldIncludeTimestamp) {
        this.shouldIncludeTimestamp = shouldIncludeTimestamp !== null && shouldIncludeTimestamp !== void 0 ? shouldIncludeTimestamp : false;
        this.writeMessage = (s) => {
            const message = this.shouldIncludeTimestamp ? `${new Date().toISOString()}: ${s}` : s;
            return writeMessage(message);
        };
        this.loglevel = loglevel;
    }
    setLogLevel(newLogLevel) {
        this.loglevel = newLogLevel;
    }
    setShouldIncludeTime(newShouldIncludeTimestamp) {
        this.shouldIncludeTimestamp = newShouldIncludeTimestamp;
    }
    error(s) {
        if (this.loglevel <= LogLevel.ERROR) {
            this.writeMessage(chalk_1.default.red(s) + '\n');
        }
    }
    warn(s) {
        if (this.loglevel <= LogLevel.WARN) {
            this.writeMessage(chalk_1.default.yellow(s) + '\n');
        }
    }
    info(s) {
        if (this.loglevel <= LogLevel.INFO) {
            this.writeMessage(s + '\n');
        }
    }
    debug(s) {
        if (this.loglevel <= LogLevel.DEBUG) {
            this.writeMessage(s + '\n');
        }
    }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map