"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetricsLogger = void 0;
const datadog_metrics_1 = __importDefault(require("datadog-metrics"));
const proxy_agent_1 = require("proxy-agent");
const getMetricsLogger = (opts) => {
    const apiUrl = getBaseAPIUrl(opts.datadogSite);
    const metricsOpts = {
        // ProxyAgent will retrieve proxy agent from env vars when relevant
        // agent is not in the type definitions file but has been introduced in datadog-metrics 0.8.x
        agent: new proxy_agent_1.ProxyAgent(),
        apiHost: apiUrl,
        apiKey: opts.apiKey,
        defaultTags: opts.defaultTags,
        flushIntervalSeconds: 15,
        prefix: opts.prefix,
    };
    const logger = new datadog_metrics_1.default.BufferedMetricsLogger(metricsOpts);
    return {
        flush: () => new Promise((resolve, reject) => {
            logger.flush(resolve, (err) => reject(new Error(`Could not flush metrics to ${apiUrl}: ${err}`)));
        }),
        logger,
    };
};
exports.getMetricsLogger = getMetricsLogger;
const getBaseAPIUrl = (datadogSite) => {
    if (datadogSite) {
        return 'api.' + datadogSite;
    }
    return 'api.datadoghq.com';
};
//# sourceMappingURL=metrics.js.map