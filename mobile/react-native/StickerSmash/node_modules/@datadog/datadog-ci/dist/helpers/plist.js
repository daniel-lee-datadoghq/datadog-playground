"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePlist = void 0;
const fs_1 = require("fs");
const fast_xml_parser_1 = require("fast-xml-parser");
const parseIfEnvVariable = (propertyValue, metadata) => {
    if (typeof propertyValue !== 'string') {
        return propertyValue;
    }
    // Matches "$(ANY_VARIABLE_NAME)", capturing "ANY_VARIABLE_NAME"
    const matchedEnvVariable = propertyValue.match(/^\$\((.*)\)$/);
    if (!matchedEnvVariable) {
        return propertyValue;
    }
    // matchedEnvVariable[0] is the matched string, i.e. "$(VARIABLE_NAME)"
    // matchedEnvVariable[1] is the captured group, i.e. "VARIABLE_NAME"
    const value = process.env[matchedEnvVariable[1]];
    // If we haven't captured, the value is not an env variable and we should return it directly
    if (value !== undefined) {
        return value;
    }
    throw new Error(`Environment variable ${matchedEnvVariable[0]} for key ${metadata.propertyName} wasn't found.`);
};
class PlistContent {
    constructor(content) {
        this.getContent = () => this.content;
        /**
         *
         * @param propertyName
         * @returns
         */
        this.getPropertyValue = (propertyName) => {
            const propertyNodeIndex = this.content.findIndex((node) => {
                if (!this.isKeyNode(node)) {
                    return false;
                }
                return node.key[0]['#text'] === propertyName;
            });
            if (propertyNodeIndex === -1) {
                throw new Error('Property not found');
            }
            const valueNode = this.content[propertyNodeIndex + 1];
            if (!this.isStringNode(valueNode)) {
                throw new Error('Property is not a string, this is not supported yet');
            }
            return parseIfEnvVariable(valueNode.string[0]['#text'], { propertyName });
        };
        /**
         * A key entry will be turned into element of the content looking like this:
         * ```
         * {
         *   "key": [
         *     {
         *       "#text": "CFBundleDevelopmentRegion",
         *     },
         *   ],
         * }
         * ```
         */
        this.isKeyNode = (node) => {
            return !!node.key;
        };
        /**
         * A string entry will be turned into element of the content looking like this:
         * ```
         * {
         *   "string": [
         *     {
         *       "#text": "1.0.3",
         *     },
         *   ],
         * }
         * ```
         */
        this.isStringNode = (node) => {
            return !!node.string;
        };
        this.content = content;
    }
}
const parsePlist = (plistPath) => {
    const xmlFileContentString = (0, fs_1.readFileSync)(plistPath).toString();
    const validationOutput = fast_xml_parser_1.XMLValidator.validate(xmlFileContentString);
    if (validationOutput !== true) {
        throw new Error(validationOutput.err.msg);
    }
    const xmlParser = new fast_xml_parser_1.XMLParser({ preserveOrder: true });
    const [_xmlHeader, plistDeclaration] = xmlParser.parse(xmlFileContentString);
    const plistContent = plistDeclaration.plist[0].dict;
    return new PlistContent(plistContent);
};
exports.parsePlist = parsePlist;
//# sourceMappingURL=plist.js.map