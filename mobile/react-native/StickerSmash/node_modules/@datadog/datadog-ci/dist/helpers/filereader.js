"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReadFunctions = exports.createReaderFromFile = exports.FileReader = void 0;
const fs_1 = __importDefault(require("fs"));
class FileReader {
    constructor(fd) {
        this.fd = fd;
    }
    read(length, position = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.buffer || this.buffer.length < length) {
                this.buffer = Buffer.alloc(length);
            }
            const { buffer, bytesRead } = yield this.fd.read(this.buffer, 0, length, position);
            return buffer.subarray(0, bytesRead);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.fd.close();
        });
    }
}
exports.FileReader = FileReader;
const createReaderFromFile = (filename) => __awaiter(void 0, void 0, void 0, function* () {
    const fd = yield fs_1.default.promises.open(filename, 'r');
    return new FileReader(fd);
});
exports.createReaderFromFile = createReaderFromFile;
const createReadFunctions = (buffer, littleEndian, is32bit) => {
    let position = 0;
    const readAndIncrementPos = (inc, read) => {
        const value = read(position);
        position += inc;
        return value;
    };
    const bufferReadUInt16 = (littleEndian ? buffer.readUInt16LE : buffer.readUInt16BE).bind(buffer);
    const bufferReadUInt32 = (littleEndian ? buffer.readUInt32LE : buffer.readUInt32BE).bind(buffer);
    const bufferReadBigUInt64 = (littleEndian ? buffer.readBigUInt64LE : buffer.readBigUInt64BE).bind(buffer);
    const readUInt16 = () => readAndIncrementPos(2, bufferReadUInt16);
    const readUInt32 = () => readAndIncrementPos(4, bufferReadUInt32);
    const readBigUInt64 = () => readAndIncrementPos(8, bufferReadBigUInt64);
    const readBigUInt32Or64 = is32bit ? () => BigInt(readUInt32()) : readBigUInt64;
    return { readUInt16, readUInt32, readBigUInt32Or64 };
};
exports.createReadFunctions = createReadFunctions;
//# sourceMappingURL=filereader.js.map