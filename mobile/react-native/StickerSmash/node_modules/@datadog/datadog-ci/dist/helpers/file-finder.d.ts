export declare const partitionFiles: (basePaths: string[], ignoredPaths: string[], partition: (filePath: string, strict: boolean) => string | undefined) => {
    [key: string]: string[];
};
/**
 * Finds and validates files based on the provided base paths.
 *
 * This function processes three types of inputs:
 * 1. Regular files - Direct file paths that exist
 * 2. Directories - Recursively searches for matching files in the directory
 * 3. Glob patterns - Uses the pattern to find matching files
 *
 * @param basePaths - Array of paths to search for files. Can include file paths, directory paths, or glob patterns.
 * @param searchRecursively - Whether to do recursive search in the nested folders (also applies to glob pattern matches).
 * @param ignoredPaths - List of paths to ignore
 * @param filterFile - Function to filter matching files. Should return true if a file matches. Is not applied to files specified explicitly.
 * @param validateFile - Function to validate files that matched. Should return undefined if valid, or an error message string if invalid.
 * @param renderInvalidFile - Function called for each invalid file to handle error reporting.
 * @returns Array of unique file paths that passed validation.
 */
export declare const findFiles: (basePaths: string[], searchRecursively: boolean, ignoredPaths: string[], filterFile: (filePath: string) => boolean, validateFile: (filePath: string) => string | undefined, renderInvalidFile: (filePath: string, errorMessage: string) => void) => string[];
