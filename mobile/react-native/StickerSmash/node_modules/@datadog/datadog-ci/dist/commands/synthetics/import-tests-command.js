"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportTestsCommand = void 0;
const clipanion_1 = require("clipanion");
const utils_1 = require("../../helpers/utils");
const base_command_1 = require("./base-command");
const import_tests_lib_1 = require("./import-tests-lib");
const datadogDocsBaseUrl = 'https://docs.datadoghq.com';
const datadogAppBaseUrl = 'https://app.datadoghq.com';
const $1 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/continuous_testing/cicd_integrations/configuration#test-files`);
const $2 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/synthetics/explore/#search`);
const $3 = (0, utils_1.makeTerminalLink)(`${datadogAppBaseUrl}/synthetics/tests`);
class ImportTestsCommand extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.config = ImportTestsCommand.getDefaultConfig();
        // TODO: Let's not reuse `files` as it has a different meaning.
        this.files = clipanion_1.Option.Array('-f,--files', {
            description: `The path to the Synthetic ${$1 `test configuration file`} to which to append imported Local Test Definitions.`,
        });
        this.publicIds = clipanion_1.Option.Array('-p,--public-id', { description: 'Public IDs of Synthetic tests to import.' });
        this.testSearchQuery = clipanion_1.Option.String('-s,--search', {
            description: `Use a ${$2 `search query`} to select which Synthetic tests to import. Use the ${$3 `Synthetic Tests list page's search bar`} to craft your query, then copy and paste it.`,
        });
    }
    static getDefaultConfig() {
        return Object.assign(Object.assign({}, super.getDefaultConfig()), { files: [], publicIds: [], testSearchQuery: '' });
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            // populate the config
            yield this.setup();
            try {
                yield (0, import_tests_lib_1.importTests)(this.reporter, this.config);
            }
            catch (error) {
                this.logger.error(`Error: ${error.message}`);
                return 1;
            }
        });
    }
    resolveConfigFromEnv() {
        var _a, _b;
        return Object.assign(Object.assign({}, super.resolveConfigFromEnv()), { files: (_a = process.env.DATADOG_SYNTHETICS_FILES) === null || _a === void 0 ? void 0 : _a.split(';'), publicIds: (_b = process.env.DATADOG_SYNTHETICS_PUBLIC_IDS) === null || _b === void 0 ? void 0 : _b.split(';'), testSearchQuery: process.env.DATADOG_SYNTHETICS_TEST_SEARCH_QUERY });
    }
    resolveConfigFromCli() {
        return Object.assign(Object.assign({}, super.resolveConfigFromCli()), { files: this.files, publicIds: this.publicIds, testSearchQuery: this.testSearchQuery });
    }
}
exports.ImportTestsCommand = ImportTestsCommand;
ImportTestsCommand.paths = [['synthetics', 'import-tests']];
ImportTestsCommand.usage = clipanion_1.Command.Usage({
    category: 'Synthetics',
    description: 'Import the Main Test Definition from a Datadog scheduled tests as a Local Test Definitions.',
    details: `
      This command imports a Main Test Definition from a Datadog scheduled tests as a Local Test Definitions to be used in local development.
    `,
    examples: [
        [
            'Explicitly specify multiple tests to run',
            'datadog-ci synthetics import-tests --public-id pub-lic-id1 --public-id pub-lic-id2',
        ],
        ['Override the default glob pattern', 'datadog-ci synthetics import-tests -f test-file.synthetics.json'],
    ],
});
//# sourceMappingURL=import-tests-command.js.map