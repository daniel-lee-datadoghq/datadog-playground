import ora from 'ora';
import { InstrumentCommand } from '../instrument';
import { UninstrumentCommand } from '../uninstrument';
/**
 * @returns a header indicating which `lambda` subcommand is running.
 * @param command current selected lambda subcommand.
 *
 * ```txt
 * [Dry Run] 🐶 Instrumenting Lambda function
 * ```
 */
export declare const renderLambdaHeader: (commandType: InstrumentCommand | UninstrumentCommand, isDryRun: boolean) => string;
/**
 * @param commandType the type of command being used.
 * @returns a message indicating that no functions are specified depending on the given command.
 *
 * ```txt
 * [Error] No functions specified for instrumentation.
 * or
 * [Error] No functions specified for uninstrumentation.
 * ```
 */
export declare const renderNoFunctionsSpecifiedError: (commandType: InstrumentCommand | UninstrumentCommand) => string;
/**
 * @returns a message indicating that both options `--extensionVersion` and `--forwarder` are set.
 *
 * ```txt
 * [Error] "extensionVersion" and "forwarder" should not be used at the same time.
 * ```
 */
export declare const renderExtensionAndForwarderOptionsBothSetError: () => string;
/**
 * @param functionsCommandUsed a boolean indicating which command was used for the specified functions.
 * @returns a message indicating that option `--functions-regex`
 * is being used along with either `--functions` or the parameter
 * `functions` in a config file.
 *
 * ```txt
 * [Error] "--functions" and "--functions-regex" should not be used at the same time.
 * or
 * [Error] Functions in config file and "--functions-regex" should not be used at the same time.
 * ```
 */
export declare const renderFunctionsAndFunctionsRegexOptionsBothSetError: (functionsCommandUsed: boolean) => string;
/**
 * @returns a message indicating that `--functions-regex` argument contains `:` which is mainly used with ARNs.
 *
 * ```txt
 * [Error] "--functions-regex" isn't meant to be used with ARNs.
 * ```
 */
export declare const renderRegexSetWithARNError: () => string;
/**
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that an error occurred while grouping functions.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [Error] Couldn't group functions. The provided error goes here!
 * ```
 */
export declare const renderCouldntGroupFunctionsError: (error: unknown) => string;
/**
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that an error occurred while updating.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [Error] Failure during update. The provided error goes here!
 * ```
 */
export declare const renderFailureDuringUpdateError: (error: unknown) => string;
/**
 * @param warning the message to warn about.
 * @returns the provided warning prefixed by {@link warningTag}.
 *
 * ```txt
 * [Warning] The provided warning goes here!
 * ```
 */
export declare const renderWarning: (warning: string) => string;
/**
 * @param message the message to set with the success tag.
 * @returns the provided message prefixed by {@link successCheckmarkTag}.
 *
 * ```txt
 * [✔] The provided message goes here!
 * ```
 */
export declare const renderSuccess: (message: string) => string;
/**
 * @param message the message to set with the fail tag.
 * @returns the provided message prefixed by {@link failCrossTag}.
 *
 * ```txt
 * [✖] The provided message goes here!
 * ```
 */
export declare const renderFail: (message: string) => string;
/**
 * @param sourceCodeIntegrationError the error encountered when trying to enable source code integration.
 * @returns a warning message, with the source code integration error attached.
 *
 * ```txt
 * [Warning] Couldn't add source code integration. The provided error goes here!
 * ```
 */
export declare const renderSourceCodeIntegrationWarning: (sourceCodeIntegrationError: unknown) => string;
/**
 * @returns a message suggesting to instrument in dev or staging environment first.
 *
 * ```txt
 * [Warning] Instrument your Lambda functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run `uninstrument` with the same arguments to revert the changes.
 * ```
 */
export declare const renderInstrumentInStagingFirst: () => string;
/**
 * @returns a soft warning message indicating that functions are going to be updated.
 *
 * ```txt
 * Functions to be updated:
 * ```
 */
export declare const renderFunctionsToBeUpdated: () => string;
/**
 * @returns a warning message reminding the user to lock versions for production.
 *
 * ```txt
 *    [Warning] At least one latest layer version is being used. Ensure to lock in versions for production applications using `--layerVersion` and `--extensionVersion`.
 * ```
 */
export declare const renderEnsureToLockLayerVersionsWarning: () => string;
/**
 * @returns a message indicating to configure AWS region.
 *
 * ```txt
 * [!] Configure AWS region.
 * ```
 */
export declare const renderConfigureAWSRegion: () => string;
/**
 * @returns a message indicating to configure Datadog settings.
 *
 * ```txt
 * [!] Configure Datadog settings.
 * ```
 */
export declare const renderConfigureDatadog: () => string;
/**
 * @returns a message indicating that no Lambda functions were found
 * in the specified region.
 *
 * ```txt
 * [Error] Couldn't find any Lambda functions in the specified region.
 * ```
 */
export declare const renderCouldntFindLambdaFunctionsInRegionError: () => string;
/**
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that no Lambda functions were fetched.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [Error] Couldn't fetch Lambda functions. The provided error goes here!
 * ```
 */
export declare const renderCouldntFetchLambdaFunctionsError: (error: unknown) => string;
/**
 * @param tagsMissing an array containing the tags that are not configured
 * @returns a message indicating which tags are not configured and where to
 * learn more about Datadog's unified service tagging.
 *
 * ```txt
 * [Warning] The service tag has not been configures. Learn more about Datadog unified service tagging: https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment.
 * ```
 */
export declare const renderTagsNotConfiguredWarning: (tagsMissing: string[]) => string;
/**
 * @returns a message indicating that the extra tags provided do not comply
 * with the <key>:<value> array standard.
 *
 * ```txt
 * [Error] Extra tags do not comply with the <key>:<value> array.
 * ```
 */
export declare const renderExtraTagsDontComplyError: () => string;
/**
 * @returns a message indicating that the `--layerVersion` argument provided is invalid.
 *
 * ```txt
 * [Error] Invalid layer version "provided value".
 * ```
 */
export declare const renderInvalidLayerVersionError: (layerVersion?: string) => string;
/**
 * @returns a message indicating that the `--extensionVersion` argument provided is invalid.
 *
 * ```txt
 * [Error] Invalid extension version "provided value".
 * ```
 */
export declare const renderInvalidExtensionVersionError: (extensionVersion?: string) => string;
/**
 * @returns a message indicating that the provided argument for a specific string boolean
 * field was invalid.
 *
 * ```txt
 * [Error] Invalid boolean specified for "string boolean field".
 * ```
 */
export declare const renderInvalidStringBooleanSpecifiedError: (stringBoolean: string) => string;
/**
 * @param isDryRun a boolean to define if a prefix should be added.
 * @returns a message indicating that no updates will be applied.
 *
 * ```txt
 * [Dry Run] No updates will be applied.
 * or
 * No updates will be applied.
 * ```
 */
export declare const renderNoUpdatesApplied: (isDryRun: boolean) => string;
/**
 * @param isDryRun a boolean to define if a prefix should be added.
 * @returns a message indicating that updates will be applied.
 *
 * ```txt
 * [Dry Run] Will apply the following updates:
 * or
 * Will apply the following updates:
 * ```
 */
export declare const renderWillApplyUpdates: (isDryRun: boolean) => string;
/**
 * @returns a soft warning message indicating that confirmation is needed.
 *
 * ```txt
 * [!] Confirmation needed.
 * ```
 */
export declare const renderConfirmationNeededSoftWarning: () => string;
/**
 * @returns a soft warning message indicating that functions are being instrumented.
 *
 * ```txt
 * [!] Instrumenting functions.
 * ```
 */
export declare const renderInstrumentingFunctionsSoftWarning: () => string;
/**
 * @returns a soft warning message indicating the removal of instrumentation
 * for functions.
 *
 * ```txt
 * [!] Uninstrumenting functions.
 * ```
 */
export declare const renderUninstrumentingFunctionsSoftWarning: () => string;
/**
 * @param functionsLength the number of Lambda functions that were fetched.
 * @returns a message indicating that it fetched Lambda functions.
 *
 * ```txt
 * Fetched 42 Lambda functions.
 * ```
 */
export declare const renderFetchedLambdaFunctions: (functionsLength: number) => string;
/**
 * @param region the AWS region where the Lambda configs belong to.
 * @param configsLength the number of Lambda configuration that were fetched.
 * @returns a message indicating that it updated Lambda functions.
 *
 * ```txt
 * [us-east-1] Fetched 42 Lambda configurations.
 * ```
 */
export declare const renderFetchedLambdaConfigurationsFromRegion: (region: string, configsLength: number) => string;
/**
 * @param functionsLength the number of Lambda functions that were updated.
 * @returns a message indicating that it updated Lambda functions.
 *
 * ```txt
 * Updated 42 Lambda functions.
 * ```
 */
export declare const renderUpdatedLambdaFunctions: (functionsLength: number) => string;
/**
 * @param region the AWS region where the Lambda functions belong to.
 * @param functionsLength the number of Lambda functions that were updated.
 * @returns a message indicating that it updated Lambda functions from a certain region.
 *
 * ```txt
 * [us-east-1] Updated 42 Lambda functions.
 * ```
 */
export declare const renderUpdatedLambdaFunctionsFromRegion: (region: string, functionsLength: number) => string;
/**
 * @returns a message indicating that it failed to fetch Lambda functions.
 *
 * ```txt
 * Failed fetching Lambda functions.
 * ```
 */
export declare const renderFailedFetchingLambdaFunctions: () => string;
/**
 * @param region the AWS region where the Lambda configs belong to.
 * @returns a message indicating that it failed to fetch Lambda configurations.
 * from a region.
 *
 * ```txt
 * [us-east-1] Failed fetching Lambda configurations.
 * ```
 */
export declare const renderFailedFetchingLambdaConfigurationsFromRegion: (region: string) => string;
/**
 * @param f the Lambda function which failed to update.
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that it failed while updating the Lambda function,
 * and the given error.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [us-east-1] Failed updating ARN Provided error goes here..
 * ```
 */
export declare const renderFailedUpdatingLambdaFunction: (f: string, error: unknown) => string;
/**
 * @returns a message indicating that it failed to update Lambda functions.
 *
 * ```txt
 * Failed updating Lambda functions.
 * ```
 */
export declare const renderFailedUpdatingLambdaFunctions: () => string;
/**
 * @returns a message indicating that it failed to update all Lambda functions.
 *
 * ```txt
 * Failed updating every Lambda function.
 * ```
 */
export declare const renderFailedUpdatingEveryLambdaFunction: () => string;
/**
 * @param region the AWS region where the Lambda configs belong to.
 * @returns a message indicating that it failed to update all Lambda functions
 * from the given region.
 *
 * ```txt
 * [us-east-1] Failed updating every Lambda function.
 * ```
 */
export declare const renderFailedUpdatingEveryLambdaFunctionFromRegion: (region: string) => string;
/**
 * Returns a spinner instance with text for lambda functions fetching.
 *
 * @returns an instance of an {@link ora} spinner.
 *
 * ```txt
 * ⠋ Fetching Lambda functions.
 * ```
 */
export declare const fetchingFunctionsSpinner: () => ora.Ora;
/**
 * Returns a spinner instance with text for lambda configurations fetching.
 *
 * @returns an instance of {@link ora} spinner.
 *
 * ```txt
 * ⠋ [us-east-1] Fetching Lambda configurations.
 * ```
 */
export declare const fetchingFunctionsConfigSpinner: (region: string) => ora.Ora;
/**
 * Returns a spinner instance with text for lambda functions updating.
 *
 * @returns an instance of an {@link ora} spinner.
 *
 * ```txt
 * ⠋ Updating 5 Lambda functions.
 * ```
 */
export declare const updatingFunctionsSpinner: (functions: number) => ora.Ora;
/**
 * Returns a spinner instance with text for Lambda functions being updated
 * from the given region.
 *
 * @returns an instance of {@link ora} spinner.
 *
 * ```txt
 * ⠋ [us-east-1] Updating Lambda functions.
 * ```
 */
export declare const updatingFunctionsConfigFromRegionSpinner: (region: string, functions: number) => ora.Ora;
