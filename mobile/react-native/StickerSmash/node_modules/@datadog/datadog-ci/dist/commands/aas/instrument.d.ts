import { WebSiteManagementClient } from '@azure/arm-appservice';
import { TagsOperations } from '@azure/arm-resources';
import { DefaultAzureCredential } from '@azure/identity';
import { AasCommand } from './common';
import { AasConfigOptions } from './interfaces';
export declare class InstrumentCommand extends AasCommand {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private service;
    private environment;
    private version;
    private isInstanceLoggingEnabled;
    private logPath;
    private shouldNotRestart;
    private isDotnet;
    private isMusl;
    private sourceCodeIntegration;
    private uploadGitMetadata;
    private extraTags;
    get additionalConfig(): Partial<AasConfigOptions>;
    execute(): Promise<0 | 1>;
    processSubscription(cred: DefaultAzureCredential, tagClient: TagsOperations, subscriptionId: string, resourceGroupToNames: Record<string, string[]>, config: AasConfigOptions): Promise<boolean>;
    /**
     * Process an Azure App Service for instrumentation.
     * @returns A promise that resolves to a boolean indicating success or failure.
     */
    processAas(aasClient: WebSiteManagementClient, tagClient: TagsOperations, config: AasConfigOptions, subscriptionId: string, resourceGroup: string, aasName: string): Promise<boolean>;
    addTags(tagClient: TagsOperations, config: AasConfigOptions, subscriptionId: string, resourceGroup: string, aasName: string, tags: Record<string, string>): Promise<void>;
    instrumentSidecar(client: WebSiteManagementClient, config: AasConfigOptions, resourceGroup: string, aasName: string): Promise<void>;
}
