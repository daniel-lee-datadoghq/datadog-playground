import type { ProxyAgent } from 'proxy-agent';
export interface TunnelInfo {
    host: string;
    id: string;
    privateKey: string;
}
export interface TunnelReporter {
    error(message: string): void;
    log(message: string): void;
    warn(message: string): void;
}
export declare class Tunnel {
    private url;
    private testIDs;
    private reporter?;
    private FORWARDING_TIMEOUT;
    private sshConfig;
    private privateKey;
    private publicKey;
    /** Used to catch SIGINT only once. */
    private started;
    /** Used to log "Successfully connected" only once. */
    private connected;
    private ws;
    private multiplexer?;
    private forwardedSockets;
    constructor(url: string, testIDs: string[], proxyAgent?: ProxyAgent, reporter?: TunnelReporter | undefined);
    /**
     * keepAlive will return a promise that tracks the state of the tunnel (and reject in case of error)
     */
    keepAlive(): Promise<void>;
    /**
     * start the tunnel:
     *   - get the pre-signed URL to connect to the tunnel service
     *   - Set up SSH
     *   - establish a WebSocket connection to the tunnel service
     */
    start(): Promise<TunnelInfo>;
    /**
     * stop the tunnel
     */
    stop(): Promise<void>;
    private authenticateSSHConnection;
    private forwardProxiedPacketsFromSSH;
    private forwardWebSocketToSSH;
    private getConnectionInfo;
    private processSSHStream;
    private handleSIGINT;
}
