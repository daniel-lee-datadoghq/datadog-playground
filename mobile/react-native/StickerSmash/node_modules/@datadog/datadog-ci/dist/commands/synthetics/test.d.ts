import { APIHelper } from './api';
import { RemoteTriggerConfig, MainReporter, RunTestsCommandConfig, Suite, Test, TriggerConfig, LocalTestDefinition, ImportTestsCommandConfig, TestMissing, TestSkipped, TestWithOverride, TestPayload, DeployTestsCommandConfig } from './interfaces';
import { InitialSummary } from './utils/public';
export declare const MAX_TESTS_TO_TRIGGER = 1000;
export declare const DEFAULT_TEST_CONFIG_FILES_GLOB = "{,!(node_modules)/**/}*.synthetics.json";
export declare const getTestConfigs: (config: RunTestsCommandConfig | ImportTestsCommandConfig | DeployTestsCommandConfig, reporter: MainReporter, suites?: Suite[]) => Promise<TriggerConfig[]>;
export declare const getTestsFromSearchQuery: (api: APIHelper, config: Pick<RunTestsCommandConfig, 'defaultTestOverrides' | 'testSearchQuery'>) => Promise<RemoteTriggerConfig[] | []>;
export declare const getTestsToTrigger: (api: APIHelper, triggerConfigs: TriggerConfig[], reporter: MainReporter, triggerFromSearch?: boolean, failOnMissingTests?: boolean, isTunnelEnabled?: boolean) => Promise<{
    tests: Test[];
    overriddenTestsToTrigger: TestPayload[];
    initialSummary: InitialSummary;
}>;
export declare const getTestAndOverrideConfig: (api: APIHelper, triggerConfig: TriggerConfig, reporter: MainReporter, summary: InitialSummary, isTunnelEnabled?: boolean) => Promise<TestMissing | TestSkipped | TestWithOverride>;
export declare const normalizeLocalTestDefinition: (localTestDefinition: LocalTestDefinition) => {
    public_id: string | undefined;
    config: {
        assertions: import("./interfaces").Assertion[];
        request?: import("./interfaces").TestRequest | undefined;
        steps?: {
            subtype: string;
        }[] | undefined;
        variables: string[];
    };
    locations: string[];
    name: string;
    options: import("./interfaces").OptionsWithUnsupportedFields;
    subtype?: string | undefined;
    steps?: import("./interfaces").TestStepWithUnsupportedFields[] | undefined;
    type: "api" | "browser" | "mobile";
};
