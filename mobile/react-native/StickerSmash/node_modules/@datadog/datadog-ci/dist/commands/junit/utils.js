"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestCommitRedirectURL = exports.getTestRunsUrl = exports.getTestRunsUrlPath = void 0;
const app_1 = require("../../helpers/app");
const tags_1 = require("../../helpers/tags");
const getTestRunsUrlPath = (spanTags, queryPrefix = '') => {
    if (!spanTags[tags_1.CI_PIPELINE_URL] && !spanTags[tags_1.CI_JOB_URL]) {
        return '';
    }
    let query = queryPrefix;
    if (spanTags[tags_1.CI_JOB_URL]) {
        query += ` @ci.job.url:"${spanTags[tags_1.CI_JOB_URL]}"`;
    }
    else if (spanTags[tags_1.CI_PIPELINE_URL]) {
        query += ` @ci.pipeline.url:"${spanTags[tags_1.CI_PIPELINE_URL]}"`;
    }
    return `ci/test-runs?query=${encodeURIComponent(query)}`;
};
exports.getTestRunsUrlPath = getTestRunsUrlPath;
const getTestRunsUrl = (spanTags, queryPrefix = '') => {
    const path = (0, exports.getTestRunsUrlPath)(spanTags, queryPrefix);
    return path ? `${(0, app_1.getBaseUrl)()}${path}` : '';
};
exports.getTestRunsUrl = getTestRunsUrl;
const getTestCommitRedirectURL = (spanTags, service, env) => {
    if (!spanTags[tags_1.GIT_REPOSITORY_URL] || !spanTags[tags_1.GIT_BRANCH] || !spanTags[tags_1.GIT_SHA] || !service) {
        return '';
    }
    const encodedRepoUrl = encodeURIComponent(`${spanTags[tags_1.GIT_REPOSITORY_URL]}`);
    const encodedService = encodeURIComponent(service);
    const encodedBranch = encodeURIComponent(`${spanTags[tags_1.GIT_BRANCH]}`);
    const commitSha = `${spanTags[tags_1.GIT_SHA]}`;
    let url = `${(0, app_1.getBaseUrl)()}ci/redirect/tests/${encodedRepoUrl}/-/${encodedService}/-/${encodedBranch}/-/${commitSha}`;
    if (env) {
        url += `?env=${encodeURIComponent(env)}`;
    }
    return url;
};
exports.getTestCommitRedirectURL = getTestCommitRedirectURL;
//# sourceMappingURL=utils.js.map