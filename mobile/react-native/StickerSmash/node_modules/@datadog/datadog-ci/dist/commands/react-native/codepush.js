"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodepushCommand = void 0;
const child_process_1 = require("child_process");
const clipanion_1 = require("clipanion");
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const errors_1 = require("./errors");
const interfaces_1 = require("./interfaces");
const upload_1 = require("./upload");
const utils_1 = require("./utils");
class CodepushCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.appCenterAppName = clipanion_1.Option.String('--app');
        this.appCenterDeployment = clipanion_1.Option.String('--deployment');
        /**
         * There should not be multiple uploads with the same version in the case
         * of codepush, so we can go with a default of "1".
         */
        this.buildVersion = clipanion_1.Option.String('--build-version', '1');
        this.bundle = clipanion_1.Option.String('--bundle');
        this.configPath = clipanion_1.Option.String('--config');
        this.disableGit = clipanion_1.Option.Boolean('--disable-git');
        this.dryRun = clipanion_1.Option.Boolean('--dry-run', false);
        this.maxConcurrency = clipanion_1.Option.String('--max-concurrency', '20');
        this.platform = clipanion_1.Option.String('--platform');
        this.projectPath = clipanion_1.Option.String('--project-path');
        this.removeSourcesContent = clipanion_1.Option.Boolean('--remove-sources-content');
        this.repositoryURL = clipanion_1.Option.String('--repository-url');
        this.service = clipanion_1.Option.String('--service');
        this.sourcemap = clipanion_1.Option.String('--sourcemap');
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.config = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
        this.getReleaseVersionFromCodepushHistory = (appCenterAppName, appCenterDeployment) => __awaiter(this, void 0, void 0, function* () {
            const command = `appcenter codepush deployment history ${appCenterDeployment} --app ${appCenterAppName} --output json`;
            return new Promise((resolve, reject) => {
                (0, child_process_1.exec)(command, (error, stdout, stderr) => {
                    if (error) {
                        reject(new errors_1.CodepushHistoryCommandError(stderr, command));
                        return;
                    }
                    try {
                        const history = JSON.parse(stdout);
                        if (history.length === 0) {
                            reject(new errors_1.NoCodepushReleaseError(appCenterAppName, appCenterDeployment));
                        }
                        const lastDeployment = history[history.length - 1];
                        const [lastCodePushLabel, _, lastVersion] = lastDeployment;
                        const version = (0, utils_1.sanitizeReleaseVersion)(lastVersion);
                        if (/^[^\d]/.test(version)) {
                            reject(new errors_1.CodepushHistoryParseError(`Error parsing codepush history: invalid version string '${lastVersion}'`));
                        }
                        resolve(`${version}-codepush.${lastCodePushLabel}`);
                    }
                    catch (parseError) {
                        reject(new errors_1.CodepushHistoryParseError(`Error parsing codepush history: \n${String(parseError)}\n${stdout}`));
                    }
                });
            });
        });
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.config.fips, this.fipsIgnoreError || this.config.fipsIgnoreError);
            if (!this.service) {
                this.context.stderr.write('Missing service\n');
                return 1;
            }
            if (!this.platform) {
                this.context.stderr.write('Missing platform\n');
                return 1;
            }
            if (!interfaces_1.RN_SUPPORTED_PLATFORMS.includes(this.platform)) {
                this.context.stderr.write(`Platform ${this.platform} is not supported.\nSupported platforms are ios and android.\n`);
                return 1;
            }
            if (!this.sourcemap) {
                this.context.stderr.write('Missing sourcemap file path\n');
                return 1;
            }
            if (!this.appCenterAppName) {
                this.context.stderr.write('Missing AppCenter app name\n');
                return 1;
            }
            if (!this.appCenterDeployment) {
                this.context.stderr.write('Missing AppCenter deployment\n');
                return 1;
            }
            this.releaseVersion = yield this.getReleaseVersionFromCodepushHistory(this.appCenterAppName, this.appCenterDeployment);
            // Run upload script in the background
            const cli = new clipanion_1.Cli();
            cli.register(upload_1.UploadCommand);
            const uploadCommand = [
                'react-native',
                'upload',
                '--platform',
                this.platform,
                '--release-version',
                this.releaseVersion,
                '--build-version',
                this.buildVersion,
                '--service',
                this.service,
                '--sourcemap',
                this.sourcemap,
            ];
            if (this.bundle) {
                uploadCommand.push('--bundle', this.bundle);
            }
            if (this.configPath) {
                uploadCommand.push('--config');
                uploadCommand.push(this.configPath);
            }
            if (this.maxConcurrency) {
                uploadCommand.push('--max-concurrency');
                uploadCommand.push(this.maxConcurrency.toString());
            }
            if (this.projectPath) {
                uploadCommand.push('--project-path');
                uploadCommand.push(this.projectPath);
            }
            if (this.repositoryURL) {
                uploadCommand.push('--repository-url');
                uploadCommand.push(this.repositoryURL);
            }
            if (this.disableGit) {
                uploadCommand.push('--disable-git');
            }
            if (this.removeSourcesContent) {
                uploadCommand.push('--remove-sources-content');
            }
            if (this.dryRun) {
                uploadCommand.push('--dry-run');
            }
            return cli.run(uploadCommand, this.context);
        });
    }
}
exports.CodepushCommand = CodepushCommand;
CodepushCommand.paths = [['react-native', 'codepush']];
CodepushCommand.usage = clipanion_1.Command.Usage({
    category: 'RUM',
    description: 'Upload your React Native Codepush bundle and sourcemaps to Datadog.',
    details: `
      This command will upload React Native Codepush sourcemaps and their corresponding JavaScript bundle to Datadog in order to un-minify front-end stack traces received by Datadog.\n
      See README for details.
    `,
    examples: [
        [
            'Upload ios staging sourcemaps for Company/AppNameiOS',
            'datadog-ci react-native codepush --platform ios --service com.company.app --bundle ./build/main.jsbundle --sourcemap ./build/main.jsbundle.map --app Company/AppNameiOS --deployment Staging',
        ],
        [
            'Upload android production sourcemaps for Company/AppNameAndroid',
            'datadog-ci react-native codepush --platform android --service com.company.app --bundle ./build/index.android.bundle --sourcemap ./build/index.android.bundle.map --app Company/AppNameAndroid --deployment Production',
        ],
    ],
});
//# sourceMappingURL=codepush.js.map