"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployTests = void 0;
const get_value_1 = __importDefault(require("get-value"));
const set_value_1 = __importDefault(require("set-value"));
const app_1 = require("../../helpers/app");
const api_1 = require("./api");
const test_1 = require("./test");
const internal_1 = require("./utils/internal");
const removeExcludedFields = (existingRemoteTest, excludeFields, test) => {
    if (!excludeFields || excludeFields.length === 0) {
        return test;
    }
    const newTest = Object.assign({}, test);
    for (const path of excludeFields) {
        const existingValue = (0, get_value_1.default)(existingRemoteTest, path);
        if (existingValue) {
            (0, set_value_1.default)(newTest, path, existingValue);
        }
    }
    return newTest;
};
const deployTests = (reporter, config) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const api = (0, api_1.getApiHelper)(config);
    reporter.log('Deploying tests...\n\n');
    const triggerConfigs = yield (0, test_1.getTestConfigs)(config, reporter);
    const localTestDefinitionsToDeploy = triggerConfigs.flatMap((triggerConfig) => {
        if (!(0, internal_1.isLocalTriggerConfig)(triggerConfig)) {
            return [];
        }
        if (!triggerConfig.localTestDefinition.public_id) {
            throw new Error('Local test definition is missing a public_id');
        }
        if (config.publicIds.length > 0 && !config.publicIds.includes(triggerConfig.localTestDefinition.public_id)) {
            return [];
        }
        return [triggerConfig];
    });
    for (const localTestDefinition of localTestDefinitionsToDeploy) {
        // SYNTH-18434: public ID should be made required
        const publicId = localTestDefinition.localTestDefinition.public_id;
        try {
            yield deployLocalTestDefinition(api, localTestDefinition, config.excludeFields);
            // SYNTH-18527: the edit test endpoint should return a version in the response, so we can print it in the logs and see it in version history
            const baseUrl = (0, app_1.getCommonAppBaseURL)(config.datadogSite, config.subdomain);
            const testLink = `${baseUrl}synthetics/details/${publicId}`;
            reporter.log(`New version successfully deployed for main test definition ${publicId}:\n  âŽ‹ ${testLink}\n\n`);
        }
        catch (e) {
            const errorMessage = (0, api_1.formatBackendErrors)(e);
            throw new api_1.EndpointError(`[${publicId}] Failed to update main test definition: ${errorMessage}\n`, (_a = e.response) === null || _a === void 0 ? void 0 : _a.status);
        }
    }
});
exports.deployTests = deployTests;
const deployLocalTestDefinition = (api, test, excludeFields) => __awaiter(void 0, void 0, void 0, function* () {
    // SYNTH-18434: public ID should be made required
    const publicId = test.localTestDefinition.public_id;
    const existingRemoteTest = yield api.getTest(publicId);
    // SYNTH-18528: the client should not have to handle the merge for partial update
    const newRemoteTest = removeUnsupportedEditTestFields(Object.assign(Object.assign(Object.assign({}, existingRemoteTest), test.localTestDefinition), { config: Object.assign(Object.assign({}, existingRemoteTest.config), test.localTestDefinition.config), options: Object.assign(Object.assign({}, existingRemoteTest.options), test.localTestDefinition.options) }));
    // Replace excluded fields with values from the existing remote test
    const finalTest = removeExcludedFields(existingRemoteTest, excludeFields || [], newRemoteTest);
    yield api.editTest(publicId, finalTest);
});
const removeUnsupportedEditTestFields = (testConfig) => {
    const editTestPayload = Object.assign({}, testConfig);
    delete editTestPayload.creator;
    delete editTestPayload.monitor_id;
    delete editTestPayload.created_at;
    delete editTestPayload.modified_at;
    delete editTestPayload.public_id;
    // Only remove bindings if they are null to make validation happy
    if (editTestPayload.options && !editTestPayload.options.bindings) {
        delete editTestPayload.options.bindings;
    }
    return editTestPayload;
};
//# sourceMappingURL=deploy-tests-lib.js.map