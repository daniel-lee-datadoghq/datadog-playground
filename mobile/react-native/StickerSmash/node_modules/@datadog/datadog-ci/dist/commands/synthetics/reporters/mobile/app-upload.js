"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppUploadReporter = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const constants_1 = require("../constants");
class AppUploadReporter {
    constructor(context) {
        this.context = context;
        this.startTime = Date.now();
    }
    start(appsToUpload, prependLineBreak = false) {
        this.write(`${prependLineBreak ? '\n' : ''}${appsToUpload.length} mobile application(s) to upload:\n`);
        this.write(appsToUpload.map((appToUpload) => this.getAppDescription(appToUpload)).join('\n') + '\n');
    }
    renderProgress(numberOfApplicationsLeft) {
        var _a;
        const text = `Uploading ${numberOfApplicationsLeft} application(s)â€¦`;
        (_a = this.spinner) === null || _a === void 0 ? void 0 : _a.stop();
        this.spinner = (0, ora_1.default)({
            stream: this.context.stdout,
            text,
        });
        this.spinner.start();
    }
    reportSuccess() {
        this.endRendering();
        this.write(`\n${constants_1.ICONS.SUCCESS} Successfully uploaded in ${Math.round((Date.now() - this.startTime) / 1000)} seconds\n`);
    }
    reportFailure(failedApp) {
        this.endRendering();
        this.write(`\n${constants_1.ICONS.FAILED} Failed to upload application:\n${this.getAppDescription(failedApp)}\n`);
    }
    endRendering() {
        var _a;
        (_a = this.spinner) === null || _a === void 0 ? void 0 : _a.stop();
        delete this.spinner;
    }
    getAppDescription(appUploadDetails) {
        let versionPrepend = '';
        if (appUploadDetails.versionName) {
            versionPrepend = `Version ${chalk_1.default.dim.cyan(appUploadDetails.versionName)} - `;
        }
        return `    ${versionPrepend}Application ID ${chalk_1.default.dim.cyan(appUploadDetails.appId)} - Local Path ${chalk_1.default.dim.cyan(appUploadDetails.appPath)}`;
    }
    write(message) {
        this.context.stdout.write(message);
    }
}
exports.AppUploadReporter = AppUploadReporter;
//# sourceMappingURL=app-upload.js.map