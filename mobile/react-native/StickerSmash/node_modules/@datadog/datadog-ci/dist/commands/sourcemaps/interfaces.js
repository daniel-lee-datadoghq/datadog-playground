"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sourcemap = void 0;
class Sourcemap {
    constructor(minifiedFilePath, minifiedUrl, sourcemapPath, relativePath, minifiedPathPrefix) {
        this.minifiedFilePath = minifiedFilePath;
        this.minifiedPathPrefix = minifiedPathPrefix;
        this.minifiedUrl = minifiedUrl;
        this.relativePath = relativePath;
        this.sourcemapPath = sourcemapPath;
    }
    addRepositoryData(gitData) {
        this.gitData = gitData;
    }
    asMultipartPayload(cliVersion, service, version, projectPath) {
        const content = new Map([
            ['event', this.getMetadataPayload(cliVersion, service, version, projectPath)],
            ['source_map', { type: 'file', path: this.sourcemapPath, options: { filename: 'source_map' } }],
            ['minified_file', { type: 'file', path: this.minifiedFilePath, options: { filename: 'minified_file' } }],
        ]);
        if (this.gitData !== undefined && this.gitData.gitRepositoryPayload !== undefined) {
            content.set('repository', {
                type: 'string',
                options: {
                    contentType: 'application/json',
                    filename: 'repository',
                },
                value: this.gitData.gitRepositoryPayload,
            });
        }
        return {
            content,
        };
    }
    getMetadataPayload(cliVersion, service, version, projectPath) {
        const metadata = {
            cli_version: cliVersion,
            minified_url: this.minifiedUrl,
            project_path: projectPath,
            service,
            type: 'js_sourcemap',
            version,
        };
        if (this.gitData !== undefined) {
            metadata.git_repository_url = this.gitData.gitRepositoryURL;
            metadata.git_commit_sha = this.gitData.gitCommitSha;
        }
        return {
            type: 'string',
            options: {
                contentType: 'application/json',
                filename: 'event',
            },
            value: JSON.stringify(metadata),
        };
    }
}
exports.Sourcemap = Sourcemap;
//# sourceMappingURL=interfaces.js.map