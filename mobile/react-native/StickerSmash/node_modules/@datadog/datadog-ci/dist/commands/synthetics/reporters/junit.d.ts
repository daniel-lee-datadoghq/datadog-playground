import type { CommandContext } from '../../../helpers/interfaces';
import { ExecutionRule, Reporter, Result, Summary, Test, UserConfigOverride } from '../interfaces';
interface SuiteStats {
    errors: number;
    failures: number;
    skipped: number;
    tests: number;
}
interface TestCaseStats {
    steps_allowfailures: number;
    steps_count: number;
    steps_errors: number;
    steps_failures: number;
    steps_skipped: number;
    steps_warnings: number;
}
interface XMLSuiteProperties extends SuiteStats {
    name: string;
}
interface XMLSuite {
    $: XMLSuiteProperties;
    testcase: XMLTestCase[];
}
interface XMLTestCaseProperties extends TestCaseStats {
    classname: string | undefined;
    file: string | undefined;
    name: string;
    time: number | undefined;
    timestamp: string;
}
export interface XMLTestCase {
    $: XMLTestCaseProperties;
    allowed_error: XMLError[];
    browser_error: XMLError[];
    error: XMLError[];
    failure: XMLError[];
    properties: {
        property: {
            $: {
                name: string;
                value: any;
            };
        }[];
    };
    skipped: string[];
    warning: XMLError[];
}
export interface XMLJSON {
    testsuites: {
        $: {
            batch_id: string;
            batch_url: string;
            name: string;
            tests_critical_error: number;
            tests_failed: number;
            tests_failed_non_blocking: number;
            tests_not_authorized: number;
            tests_not_found: number;
            tests_passed: number;
            tests_skipped: number;
            tests_timed_out: number;
        };
        testsuite: XMLSuite[];
    };
}
interface XMLError {
    $: {
        [key: string]: string;
        type: string;
    };
    _: string;
}
export interface Args {
    context: CommandContext;
    jUnitReport?: string;
    runName?: string;
}
export declare const getDefaultTestCaseStats: () => TestCaseStats;
export declare const getDefaultSuiteStats: () => SuiteStats;
export declare class JUnitReporter implements Reporter {
    private builder;
    private destination;
    private json;
    private write;
    constructor({ context, jUnitReport, runName }: Args);
    resultEnd(result: Result, baseUrl: string, batchId: string): void;
    runEnd(summary: Summary, baseUrl: string): void;
    testTrigger(test: Test, testId: string, executionRule: ExecutionRule, testOverrides: UserConfigOverride): void;
    private addTestCaseToSuite;
    private getApiStepStats;
    private getApiTestErrors;
    private getBrowserStepStats;
    private getBrowserTestErrors;
    private getMultiStepTestErrors;
    private getSkippedTestCase;
    private getSuiteByName;
    private getTestCase;
    private getTestCaseStats;
}
export {};
