"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importTests = void 0;
const promises_1 = require("fs/promises");
const api_1 = require("./api");
const test_1 = require("./test");
const internal_1 = require("./utils/internal");
const importTests = (reporter, config) => __awaiter(void 0, void 0, void 0, function* () {
    const api = (0, api_1.getApiHelper)(config);
    reporter.log('Importing tests...\n');
    const testConfigFromBackend = {
        tests: [],
    };
    for (const publicId of config.publicIds) {
        reporter.log(`Fetching test with public_id: ${publicId}\n`);
        let localTriggerConfig;
        const test = yield api.getLocalTestDefinition(publicId);
        if ((test === null || test === void 0 ? void 0 : test.type) === 'browser') {
            const testWithSteps = yield api.getLocalTestDefinition(publicId, test.type);
            localTriggerConfig = { localTestDefinition: testWithSteps };
        }
        else if ((test === null || test === void 0 ? void 0 : test.type) === 'mobile') {
            reporter.error('Unsupported test type: mobile\n');
            return;
        }
        else {
            localTriggerConfig = { localTestDefinition: test };
        }
        testConfigFromBackend.tests.push(localTriggerConfig);
    }
    const testConfigFromFile = {
        tests: yield (0, test_1.getTestConfigs)(config, reporter),
    };
    const testConfig = overwriteTestConfig(testConfigFromBackend, testConfigFromFile);
    const jsonString = JSON.stringify(testConfig, undefined, 2);
    try {
        yield (0, promises_1.writeFile)(config.files[0], jsonString, 'utf8');
        reporter.log(`Local test definition written to ${config.files[0]}\n`);
    }
    catch (error) {
        reporter.error(`Error writing file: ${error}\n`);
    }
});
exports.importTests = importTests;
const overwriteTestConfig = (testConfigFromBackend, testConfigFromFile) => {
    for (const test of testConfigFromBackend.tests) {
        const index = testConfigFromFile.tests.findIndex((t) => {
            var _a, _b;
            return (0, internal_1.isLocalTriggerConfig)(t) &&
                (0, internal_1.isLocalTriggerConfig)(test) &&
                ((_a = t.localTestDefinition) === null || _a === void 0 ? void 0 : _a.public_id) === ((_b = test.localTestDefinition) === null || _b === void 0 ? void 0 : _b.public_id);
        });
        if (index !== -1) {
            testConfigFromFile.tests[index] = test;
        }
        else {
            testConfigFromFile.tests.push(test);
        }
    }
    return testConfigFromFile;
};
//# sourceMappingURL=import-tests-lib.js.map