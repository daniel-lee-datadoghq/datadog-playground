import { Command } from 'clipanion';
export declare class GateEvaluateCommand extends Command {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private initialRetryMs;
    private maxRetries;
    private defaultTimeout;
    private dryRun;
    private failOnEmpty;
    private failIfUnavailable;
    private noWait;
    private timeoutInSeconds;
    private userScope;
    private tags;
    private logger;
    private fips;
    private fipsIgnoreError;
    private config;
    execute(): Promise<number>;
    private getApiHelper;
    private getSpanTags;
    private evaluateRules;
    /**
     * Evaluate gate rules and return a promise that will behave as follows:
     * - If the request is successful, the promise will be resolved with the response
     * - If the request is successful but the status is 'wait', the promise will be rejected after the received wait time (wait_time_ms)
     * - If the request is not successful, the promise will be rejected after `initialRetryMs`, with an exponential factor that depends on the attempt (exponential backoff).
     * - If the command execution time is greater than the command timeout, we bail to avoid retrying.
     * If the promise is rejected, `retryRequest` will handle the retry immediately.
     */
    private evaluateRulesWithWait;
    private getDelay;
    private handleEvaluationSuccess;
    private handleEvaluationError;
}
