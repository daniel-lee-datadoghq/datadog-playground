/// <reference types="node" />
import type { AxiosError, AxiosPromise, AxiosRequestConfig } from 'axios';
import { APIConfiguration, APIHelperConfig, Batch, LocalTestDefinition, MobileAppUploadResult, MobileApplicationNewVersionParams, MobileApplicationUploadPart, MobileApplicationUploadPartResponse, MultipartPresignedUrlsResponse, Payload, PollResult, ServerTest, SyntheticsOrgSettings, TestSearchResult, ServerTrigger } from './interfaces';
interface BackendError {
    errors: string[];
}
export declare class EndpointError extends Error {
    message: string;
    status: number;
    constructor(message: string, status: number);
}
/**
 * Extracts the public IDs from an error message like `Cannot write tests or results (test ids: ['aaa-aaa-aaa', 'bbb-bbb-bbb'])`.
 */
export declare const extractUnauthorizedTestPublicIds: (requestError: AxiosError<BackendError>) => Set<string> | undefined;
export declare const formatBackendErrors: (requestError: AxiosError<BackendError>, scopeName?: string) => string;
export declare const completeMultipartMobileApplicationUpload: (request: (args: AxiosRequestConfig) => AxiosPromise<{
    job_id: string;
}>) => (applicationId: string, uploadId: string, key: string, uploadPartResponses: MobileApplicationUploadPartResponse[], newVersionParams?: MobileApplicationNewVersionParams) => Promise<string>;
export declare const pollMobileApplicationUploadResponse: (request: (args: AxiosRequestConfig) => AxiosPromise<MobileAppUploadResult>) => (jobId: string) => Promise<MobileAppUploadResult>;
export type RetryPolicy = {
    retryOn404?: boolean | undefined;
    retryOn429?: boolean | undefined;
};
export declare const determineRetryDelay: (retries: number, error: Error, retryPolicy?: RetryPolicy) => number | undefined;
export declare const getErrorHttpStatus: (error: Error) => number | undefined;
export declare const isForbiddenError: (error: Error) => boolean;
export declare const isNotFoundError: (error: Error) => boolean;
export declare const isTooManyRequestsError: (error: Error) => boolean;
export declare const isNodeError: (error: unknown) => error is NodeJS.ErrnoException;
export declare const is5xxError: (error: Error) => boolean;
export declare const apiConstructor: (configuration: APIConfiguration) => {
    getBatch: (batchId: string) => Promise<Batch>;
    getMobileApplicationPresignedURLs: (applicationId: string, appSize: number, parts: MobileApplicationUploadPart[]) => Promise<MultipartPresignedUrlsResponse>;
    getTest: (testId: string, testType?: string) => Promise<ServerTest>;
    getLocalTestDefinition: (testId: string, testType?: string) => Promise<LocalTestDefinition>;
    editTest: (testId: string, data: ServerTest) => Promise<void>;
    getSyntheticsOrgSettings: () => Promise<SyntheticsOrgSettings>;
    getTunnelPresignedURL: (testIds: string[]) => Promise<{
        url: string;
    }>;
    pollResults: (resultIds: string[]) => Promise<PollResult[]>;
    searchTests: (query: string) => Promise<TestSearchResult>;
    triggerTests: (data: Payload) => Promise<ServerTrigger>;
    uploadMobileApplicationPart: (parts: MobileApplicationUploadPart[], multipartPresignedUrlsParams: MultipartPresignedUrlsResponse['multipart_presigned_urls_params']) => Promise<MobileApplicationUploadPartResponse[]>;
    completeMultipartMobileApplicationUpload: (applicationId: string, uploadId: string, key: string, uploadPartResponses: MobileApplicationUploadPartResponse[], newVersionParams?: MobileApplicationNewVersionParams) => Promise<string>;
    pollMobileApplicationUploadResponse: (jobId: string) => Promise<MobileAppUploadResult>;
};
export type APIHelper = ReturnType<typeof apiConstructor>;
export declare const getApiHelper: (config: APIHelperConfig) => APIHelper;
export {};
