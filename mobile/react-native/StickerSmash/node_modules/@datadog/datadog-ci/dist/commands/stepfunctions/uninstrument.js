"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UninstrumentStepFunctionsCommand = void 0;
const client_cloudwatch_logs_1 = require("@aws-sdk/client-cloudwatch-logs");
const client_sfn_1 = require("@aws-sdk/client-sfn");
const clipanion_1 = require("clipanion");
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const awsCommands_1 = require("./awsCommands");
const constants_2 = require("./constants");
const helpers_1 = require("./helpers");
class UninstrumentStepFunctionsCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.dryRun = clipanion_1.Option.Boolean('-d,--dry-run', false);
        this.stepFunctionArns = clipanion_1.Option.Array('-s,--step-function');
        // The options below are to match what InstrumentStepFunctionsCommand has so that customers can switch from instrument to uninstrument.
        // Lambda command adopts the same approach as well.
        this.environment = clipanion_1.Option.String('-e,--env', { hidden: true });
        this.forwarderArn = clipanion_1.Option.String('--forwarder', { hidden: true });
        this.service = clipanion_1.Option.String('--service', { hidden: true });
        this.mergeStepFunctionAndLambdaTraces = clipanion_1.Option.Boolean('-mlt,--merge-lambda-traces,--merge-step-function-and-lambda-traces', false, { hidden: true });
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.config = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    execute() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.config.fips, this.fipsIgnoreError || this.config.fipsIgnoreError);
            let validationError = false;
            let hasChanges = false;
            // remove duplicate step function arns
            const stepFunctionArns = [...new Set(this.stepFunctionArns)];
            if (stepFunctionArns.length === 0) {
                this.context.stdout.write(`[Error] must specify at least one \`--step-function\`\n`);
                validationError = true;
            }
            for (const stepFunctionArn of stepFunctionArns) {
                if (!(0, helpers_1.isValidArn)(stepFunctionArn)) {
                    this.context.stdout.write(`[Error] invalid arn format for \`--step-function\` ${stepFunctionArn}\n`);
                    validationError = true;
                }
            }
            if (validationError) {
                return 1;
            }
            // loop over step functions passed as parameters and generate a list of requests to make to AWS for each step function
            for (const stepFunctionArn of stepFunctionArns) {
                // use region from the step function arn to make requests to AWS
                const arnObject = (0, helpers_1.parseArn)(stepFunctionArn);
                const region = arnObject.region;
                const cloudWatchLogsClient = new client_cloudwatch_logs_1.CloudWatchLogsClient({ region });
                const stepFunctionsClient = new client_sfn_1.SFNClient({ region });
                let describeStateMachineCommandOutput;
                try {
                    describeStateMachineCommandOutput = yield (0, awsCommands_1.describeStateMachine)(stepFunctionsClient, stepFunctionArn);
                }
                catch (err) {
                    if (err instanceof Error) {
                        this.context.stdout.write(`\n[Error] ${err.message}. Unable to fetch Step Function ${stepFunctionArn}\n`);
                    }
                    return 1;
                }
                const logGroupArn = (0, helpers_1.getStepFunctionLogGroupArn)(describeStateMachineCommandOutput);
                if (logGroupArn === undefined) {
                    this.context.stdout.write('\n[Error] Unable to get Log Group arn from Step Function logging configuration\n');
                    return 1;
                }
                const logGroupName = (0, helpers_1.parseArn)(logGroupArn).resourceName;
                // delete subscription filters that are created by datadog-ci
                let describeSubscriptionFiltersResponse;
                try {
                    describeSubscriptionFiltersResponse = yield (0, awsCommands_1.describeSubscriptionFilters)(cloudWatchLogsClient, logGroupName);
                }
                catch (err) {
                    if (err instanceof Error) {
                        this.context.stdout.write(`\n[Error] ${err.message}. Unable to fetch Subscription Filter to delete for Log Group ${logGroupName}\n`);
                    }
                    return 1;
                }
                const subscriptionFilters = (_b = (_a = describeSubscriptionFiltersResponse.subscriptionFilters) === null || _a === void 0 ? void 0 : _a.filter((subscriptionFilter) => { var _a; return (_a = subscriptionFilter.filterName) === null || _a === void 0 ? void 0 : _a.includes(constants_2.DD_CI_IDENTIFYING_STRING); })) !== null && _b !== void 0 ? _b : [];
                for (const subscriptionFilter of subscriptionFilters) {
                    if (typeof subscriptionFilter.filterName === 'string') {
                        try {
                            yield (0, awsCommands_1.deleteSubscriptionFilter)(cloudWatchLogsClient, subscriptionFilter.filterName, logGroupName, stepFunctionArn, this.context, this.dryRun);
                        }
                        catch (err) {
                            if (err instanceof Error) {
                                this.context.stdout.write(`\n[Error] ${err.message}. Failed to delete subscription filter ${subscriptionFilter.filterName}\n`);
                            }
                            return 1;
                        }
                        hasChanges = true;
                    }
                }
                const tagKeysToRemove = [constants_2.TAG_VERSION_NAME];
                // Untag resource command is idempotent, no need to verify if the tag exist by making an additional api call to get tags
                try {
                    yield (0, awsCommands_1.untagResource)(stepFunctionsClient, tagKeysToRemove, stepFunctionArn, this.context, this.dryRun);
                }
                catch (err) {
                    if (err instanceof Error) {
                        this.context.stdout.write(`\n[Error] ${err.message}. Failed to untag resource for ${stepFunctionArn}\n`);
                    }
                    return 1;
                }
            }
            if (!hasChanges) {
                this.context.stdout.write(`\nNo change is applied.\n`);
            }
            return 0;
        });
    }
}
exports.UninstrumentStepFunctionsCommand = UninstrumentStepFunctionsCommand;
UninstrumentStepFunctionsCommand.paths = [['stepfunctions', 'uninstrument']];
UninstrumentStepFunctionsCommand.usage = clipanion_1.Command.Usage({
    category: 'Serverless',
    description: 'Remove Step Function log groups subscription filter created by datadog-ci.',
    details: '--stepfunction expects a Step Function ARN',
    examples: [
        [
            'View and apply changes to remove Step Functions log groups subscription filters created by datadog-ci',
            'datadog-ci stepfunctions uninstrument --step-function arn:aws:states:us-east-1:000000000000:stateMachine:ExampleStepFunction',
        ],
        [
            'View changes to remove Step Functions log groups subscription filters created by datadog-ci',
            'datadog-ci stepfunctions uninstrument --step-function arn:aws:states:us-east-1:000000000000:stateMachine:ExampleStepFunction --dry-run',
        ],
        [
            'View and apply changes to remove Step Functions log groups subscription filters created by datadog-ci',
            'datadog-ci stepfunctions uninstrument --step-function arn:aws:states:us-east-1:000000000000:stateMachine:ExampleStepFunction1 --step-function arn:aws:states:us-east-1:000000000000:stateMachine:ExampleStepFunction2',
        ],
    ],
});
//# sourceMappingURL=uninstrument.js.map