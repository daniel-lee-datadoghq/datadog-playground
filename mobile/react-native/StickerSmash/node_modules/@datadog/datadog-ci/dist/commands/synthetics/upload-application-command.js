"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadApplicationCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const env_1 = require("../../helpers/env");
const api_1 = require("./api");
const base_command_1 = require("./base-command");
const errors_1 = require("./errors");
const mobile_1 = require("./mobile");
const app_upload_1 = require("./reporters/mobile/app-upload");
class UploadApplicationCommand extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.config = UploadApplicationCommand.getDefaultConfig();
        this.mobileApplicationVersionFilePath = clipanion_1.Option.String('--mobileApp,--mobileApplicationVersionFilePath', {
            description: 'The path to the new version of your mobile application (`.apk` or `.ipa`).',
        });
        this.mobileApplicationId = clipanion_1.Option.String('--mobileApplicationId', {
            description: 'The ID of the application you want to upload the new version to.',
        });
        this.versionName = clipanion_1.Option.String('--versionName', {
            description: 'The name of the new version. It has to be unique.',
        });
        this.latest = clipanion_1.Option.Boolean('--latest', {
            description: 'Mark the new version as `latest`. Any tests that run on the latest version will use this version on their next run.',
        });
    }
    static getDefaultConfig() {
        return Object.assign(Object.assign({}, super.getDefaultConfig()), { mobileApplicationVersionFilePath: '', mobileApplicationId: '', versionName: '', latest: false });
    }
    execute() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setup();
            const appUploadReporter = new app_upload_1.AppUploadReporter(this.context);
            try {
                const result = yield (0, mobile_1.uploadMobileApplicationVersion)(this.config, appUploadReporter);
                const versionUuid = (_a = result.valid_app_result) === null || _a === void 0 ? void 0 : _a.app_version_uuid;
                if (!versionUuid) {
                    this.logger.error('The upload was successful, but the version ID is missing.');
                    return 1;
                }
                this.logger.info(`\nThe new version has version ID: ${chalk_1.default.green(versionUuid)}\nPass it when triggering Synthetic tests to run tests against that version.`);
            }
            catch (error) {
                if (error instanceof errors_1.CiError) {
                    this.logger.error(`A CI error occurred: [${error.code}] ${error.message}`);
                }
                else if (error instanceof api_1.EndpointError) {
                    this.logger.error(`A backend error occurred: ${error.message} (${error.status})`);
                }
                else {
                    const e = error;
                    this.logger.error(`An unexpected error occurred: ${e.stack || e.message}`);
                }
                return 1;
            }
            return 0;
        });
    }
    resolveConfigFromEnv() {
        return Object.assign(Object.assign({}, super.resolveConfigFromEnv()), { mobileApplicationId: process.env.DATADOG_SYNTHETICS_MOBILE_APPLICATION_ID, versionName: process.env.DATADOG_SYNTHETICS_VERSION_NAME, latest: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_LATEST) });
    }
    resolveConfigFromCli() {
        return Object.assign(Object.assign({}, super.resolveConfigFromCli()), { mobileApplicationVersionFilePath: this.mobileApplicationVersionFilePath, mobileApplicationId: this.mobileApplicationId, versionName: this.versionName, latest: this.latest });
    }
}
exports.UploadApplicationCommand = UploadApplicationCommand;
UploadApplicationCommand.paths = [['synthetics', 'upload-application']];
UploadApplicationCommand.usage = clipanion_1.Command.Usage({
    category: 'Synthetics',
    description: 'Upload a new version to an existing mobile application in Datadog.',
    details: `
      This command will upload a \`.apk\` or \`.ipa\` file as a new version for a given application, which already exists in Datadog.\n
      https://docs.datadoghq.com/mobile_app_testing/mobile_app_tests
    `,
    examples: [
        [
            'Upload version `example 1.0` and mark it as latest',
            "datadog-ci synthetics upload-application --mobileApplicationId '123-123-123' --mobileApplicationVersionFilePath example/test.apk --versionName 'example 1.0' --latest",
        ],
    ],
});
//# sourceMappingURL=upload-application-command.js.map