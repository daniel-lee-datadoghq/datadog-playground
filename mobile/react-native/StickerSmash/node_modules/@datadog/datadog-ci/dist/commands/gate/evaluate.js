"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GateEvaluateCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const uuid_1 = require("uuid");
const constants_1 = require("../../constants");
const ci_1 = require("../../helpers/ci");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const format_git_span_data_1 = require("../../helpers/git/format-git-span-data");
const logger_1 = require("../../helpers/logger");
const retry_1 = require("../../helpers/retry");
const tags_1 = require("../../helpers/tags");
const user_provided_git_1 = require("../../helpers/user-provided-git");
const validation = __importStar(require("../../helpers/validation"));
const api_1 = require("./api");
const renderer_1 = require("./renderer");
const utils_1 = require("./utils");
class GateEvaluateCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.initialRetryMs = 1000;
        this.maxRetries = 5;
        this.defaultTimeout = 600; // 10 min
        this.dryRun = clipanion_1.Option.Boolean('--dry-run', false);
        this.failOnEmpty = clipanion_1.Option.Boolean('--fail-on-empty', false);
        this.failIfUnavailable = clipanion_1.Option.Boolean('--fail-if-unavailable', false);
        this.noWait = clipanion_1.Option.Boolean('--no-wait', false);
        this.timeoutInSeconds = clipanion_1.Option.String('--timeout', String(this.defaultTimeout), {
            validator: validation.isInteger(),
        });
        this.userScope = clipanion_1.Option.Array('--scope');
        this.tags = clipanion_1.Option.Array('--tags');
        this.logger = new logger_1.Logger((s) => this.context.stdout.write(s), logger_1.LogLevel.INFO);
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.config = {
            apiKey: process.env.DD_API_KEY,
            appKey: process.env.DD_APP_KEY,
            envVarTags: process.env.DD_TAGS,
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.config.fips, this.fipsIgnoreError || this.config.fipsIgnoreError);
            const options = {
                dryRun: this.dryRun,
                noWait: this.noWait,
            };
            const api = this.getApiHelper();
            const spanTags = yield this.getSpanTags();
            const headRef = spanTags[tags_1.GIT_PULL_REQUEST_BASE_BRANCH];
            if (headRef) {
                const headSha = spanTags[tags_1.GIT_HEAD_SHA];
                if (headSha) {
                    options.pull_request_sha = headSha;
                }
                else {
                    this.logger.warn('Detected a pull request run but HEAD commit SHA could not be extracted.');
                }
            }
            const userScope = this.userScope ? (0, utils_1.parseScope)(this.userScope) : {};
            const startTimeMs = new Date().getTime();
            const payload = {
                requestId: (0, uuid_1.v4)(),
                spanTags,
                userScope,
                startTimeMs,
                options,
            };
            return this.evaluateRules(api, payload);
        });
    }
    getApiHelper() {
        if (!this.config.apiKey) {
            this.context.stdout.write(`Missing ${chalk_1.default.red.bold('DD_API_KEY')} in your environment.\n`);
            throw new Error('API key is missing');
        }
        if (!this.config.appKey) {
            this.context.stdout.write(`Missing ${chalk_1.default.red.bold('DD_APP_KEY')} in your environment.\n`);
            throw new Error('App key is missing');
        }
        return (0, api_1.apiConstructor)((0, utils_1.getBaseIntakeUrl)(), this.config.apiKey, this.config.appKey);
    }
    getSpanTags() {
        return __awaiter(this, void 0, void 0, function* () {
            const ciSpanTags = (0, ci_1.getCISpanTags)();
            const gitSpanTags = yield (0, format_git_span_data_1.getGitMetadata)();
            const userGitSpanTags = (0, user_provided_git_1.getUserGitSpanTags)();
            const envVarTags = this.config.envVarTags ? (0, tags_1.parseTags)(this.config.envVarTags.split(',')) : {};
            const cliTags = this.tags ? (0, tags_1.parseTags)(this.tags) : {};
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, gitSpanTags), ciSpanTags), userGitSpanTags), cliTags), envVarTags);
        });
    }
    evaluateRules(api, evaluateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            this.context.stdout.write((0, renderer_1.renderGateEvaluationInput)(evaluateRequest));
            /**
             * `retryRequest` does not allow setting a wait time dependent on a backend response,
             * so we handle the wait time in `evaluateRulesWithWait`: we'll wait whatever is necessary
             * for the returned promise to be rejected. The retry will start immediately after
             * and will be handled by `retryRequest`.
             */
            return (0, retry_1.retryRequest)((bail, attempt) => this.evaluateRulesWithWait(api, evaluateRequest, attempt, bail), {
                onRetry: (e, attempt) => {
                    // render retry message if error is not wait
                    if (e.message !== 'wait') {
                        this.context.stderr.write((0, renderer_1.renderEvaluationRetry)(attempt, e));
                    }
                },
                retries: this.maxRetries,
                maxTimeout: 0,
                minTimeout: 0,
            })
                .then((response) => {
                return this.handleEvaluationSuccess(response.data.data.attributes);
            })
                .catch((error) => {
                return this.handleEvaluationError(error);
            });
        });
    }
    /**
     * Evaluate gate rules and return a promise that will behave as follows:
     * - If the request is successful, the promise will be resolved with the response
     * - If the request is successful but the status is 'wait', the promise will be rejected after the received wait time (wait_time_ms)
     * - If the request is not successful, the promise will be rejected after `initialRetryMs`, with an exponential factor that depends on the attempt (exponential backoff).
     * - If the command execution time is greater than the command timeout, we bail to avoid retrying.
     * If the promise is rejected, `retryRequest` will handle the retry immediately.
     */
    evaluateRulesWithWait(api, evaluateRequest, attempt, bail) {
        return __awaiter(this, void 0, void 0, function* () {
            const timePassed = new Date().getTime() - evaluateRequest.startTimeMs;
            const remainingWait = this.timeoutInSeconds * 1000 - timePassed;
            return new Promise((resolve, reject) => {
                const request = Object.assign(Object.assign({}, evaluateRequest), { options: Object.assign({}, evaluateRequest.options) });
                if (remainingWait <= 0 || attempt === this.maxRetries + 1) {
                    request.options.isLastRetry = true;
                }
                api
                    .evaluateGateRules(request, this.context.stdout.write.bind(this.context.stdout))
                    .then((response) => {
                    var _a, _b;
                    if (remainingWait <= 0) {
                        bail === null || bail === void 0 ? void 0 : bail(new Error('wait'));
                        return;
                    }
                    if (response.data.data.attributes.status === 'wait') {
                        this.context.stdout.write((0, renderer_1.renderWaiting)());
                        const waitTime = (_b = (_a = response.data.data.attributes.metadata) === null || _a === void 0 ? void 0 : _a.wait_time_ms) !== null && _b !== void 0 ? _b : 0;
                        setTimeout(() => {
                            reject(new Error('wait'));
                        }, Math.min(remainingWait, waitTime));
                    }
                    else {
                        resolve(response);
                    }
                })
                    .catch((err) => {
                    if (remainingWait <= 0) {
                        bail === null || bail === void 0 ? void 0 : bail(new Error('wait'));
                        return;
                    }
                    setTimeout(() => {
                        reject(err);
                    }, Math.min(remainingWait, this.getDelay(attempt !== null && attempt !== void 0 ? attempt : 1)));
                });
            });
        });
    }
    getDelay(attempt) {
        return Math.pow(2, attempt) * this.initialRetryMs;
    }
    handleEvaluationSuccess(evaluationResponse) {
        this.context.stdout.write((0, renderer_1.renderEvaluationResponse)(evaluationResponse));
        if (evaluationResponse.status === 'failed' || (evaluationResponse.status === 'empty' && this.failOnEmpty)) {
            return 1;
        }
        return 0;
    }
    handleEvaluationError(error) {
        this.context.stderr.write((0, renderer_1.renderGateEvaluationError)(error, this.failIfUnavailable));
        if ((0, utils_1.is4xxError)(error) || (((0, utils_1.is5xxError)(error) || (0, utils_1.isTimeout)(error)) && this.failIfUnavailable)) {
            return 1;
        }
        return 0;
    }
}
exports.GateEvaluateCommand = GateEvaluateCommand;
GateEvaluateCommand.paths = [['gate', 'evaluate']];
GateEvaluateCommand.usage = clipanion_1.Command.Usage({
    category: 'CI Visibility',
    description: 'Evaluate Quality Gates rules in Datadog.',
    details: `
      This command will evaluate the matching quality gate rules in Datadog.\n
      See README for details.
    `,
    examples: [
        ['Evaluate matching quality gate rules in Datadog', 'datadog-ci gate evaluate'],
        [
            'Evaluate matching quality gate rules in Datadog, failing if no rules were found',
            'datadog-ci gate evaluate --fail-on-empty',
        ],
        [
            'Evaluate matching quality gate rules in Datadog, failing if Datadog is not available',
            'datadog-ci gate evaluate --fail-if-unavailable',
        ],
        [
            'Evaluate matching quality gate rules in Datadog and add extra scope',
            'datadog-ci gate evaluate --scope team:backend',
        ],
        [
            'Evaluate matching quality gate rules in Datadog and add extra tags',
            'datadog-ci gate evaluate --tags team:frontend',
        ],
        [
            'Evaluate matching quality gate rules in Datadog from the datadoghq.eu site',
            'DD_SITE=datadoghq.eu datadog-ci gate evaluate',
        ],
        [
            'Evaluate matching quality gate rules in Datadog with a timeout of 120 seconds',
            'datadog-ci gate evaluate --timeout 120',
        ],
        ['Evaluate matching quality gate rules in Datadog without waiting', 'datadog-ci gate evaluate --no-wait'],
    ],
});
//# sourceMappingURL=evaluate.js.map