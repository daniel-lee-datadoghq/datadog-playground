"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocket = void 0;
const events_1 = require("events");
const ws_1 = __importStar(require("ws"));
class WebSocket extends events_1.EventEmitter {
    constructor(url, proxyAgent) {
        super();
        this.url = url;
        this.proxyAgent = proxyAgent;
    }
    /**
     * close will terminate the WebSocket connection
     */
    close(gracefullyClose = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.websocket) {
                this.websocket.removeAllListeners();
                if (this.websocket.readyState === ws_1.default.OPEN) {
                    if (gracefullyClose) {
                        // Gracefully close the tunnel
                        this.websocket.close();
                        yield (0, events_1.once)(this.websocket, 'close');
                    }
                    // Clean up the underlying socket
                    this.websocket.terminate();
                }
                this.websocket = undefined;
            }
        });
    }
    /**
     * connect will start a WebSocket connection
     */
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            // Open the connection or throw
            yield new Promise((resolve, reject) => this.establishWebsocketConnection(resolve, reject));
        });
    }
    /**
     * duplex will create a duplex stream for the WS connection
     */
    duplex() {
        if (!this.websocket) {
            throw new Error('You must start the WebSocket connection before calling duplex');
        }
        return (0, ws_1.createWebSocketStream)(this.websocket, {
            // Increase websocket buffer sizes from 16kb to 64kb.
            readableHighWaterMark: 64 * 1024,
            writableHighWaterMark: 64 * 1024,
        });
    }
    /**
     * keepAlive will return a promise to keep track of the tunnel connection
     */
    keepAlive() {
        if (!this.keepAliveWebsocket) {
            // Use an artificial promise to keep track of the connection state and reconnect if necessary
            this.keepAliveWebsocket = new Promise((resolve, reject) => this.establishWebsocketConnection(resolve, reject));
        }
        return this.keepAliveWebsocket;
    }
    /**
     * on allows to listen for WebSocket messages
     */
    on(event, listener) {
        if (!this.websocket) {
            throw new Error('You must start the WebSocket connection before listening to messages');
        }
        this.websocket.on(event, listener);
        return this;
    }
    /**
     * once allows to listen for a WebSocket message
     */
    once(event, listener) {
        if (!this.websocket) {
            throw new Error('You must start the WebSocket connection before listening to messages');
        }
        this.websocket.once(event, listener);
        return this;
    }
    waitForFirstMessage() {
        if (!this.firstMessage) {
            throw new Error('Websocket connection was not established before reading first message');
        }
        return this.firstMessage;
    }
    establishWebsocketConnection(resolve, reject) {
        if (!this.websocket) {
            const options = {
                agent: this.proxyAgent,
            };
            this.websocket = new ws_1.default(this.url, options);
        }
        this.firstMessage = new Promise((firstMessageResolve, firstMessageReject) => {
            if (!this.websocket) {
                firstMessageReject(Error('Unable to start websocket connection'));
            }
            else {
                this.websocket.once('message', firstMessageResolve);
            }
        });
        this.websocket.on('unexpected-response', (req, res) => {
            let body = '';
            res.on('readable', () => {
                body += res.read();
            });
            res.on('end', () => {
                reject(Error(`Got unexpected response in WebSocket connection (code: ${res.statusCode}): ${body}`));
            });
            req.end();
            res.destroy();
        });
        this.websocket.on('open', () => {
            resolve();
        });
    }
}
exports.WebSocket = WebSocket;
//# sourceMappingURL=websocket.js.map