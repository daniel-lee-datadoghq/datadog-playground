"use strict";
// Only the function is exported, not the test such that there is no test duplication
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCIProviderTests = void 0;
/* eslint-disable jest/no-export */
const makeCIProviderTests = (runCLI, runCLIArgs) => {
    describe('execute', () => {
        test('should fail if no CI is detected', () => __awaiter(void 0, void 0, void 0, function* () {
            process.env = {};
            const { context, code } = yield runCLI(runCLIArgs);
            expect(code).toBe(1);
            expect(context.stdout.toString()).toContain('Unsupported CI provider "unknown"');
        }));
        test('should detect the circleci environment', () => __awaiter(void 0, void 0, void 0, function* () {
            const { context, code } = yield runCLI(runCLIArgs, {
                CIRCLECI: 'true',
                CIRCLE_WORKFLOW_ID: 'test',
                CIRCLE_BUILD_NUM: '10',
                NON_CIRCLE_ENV: 'bar',
            });
            expect(code).toBe(0);
            const dryRunOutput = context.stdout.toString();
            expect(dryRunOutput).toContain('\\"CIRCLE_WORKFLOW_ID\\":\\"test\\"');
            expect(dryRunOutput).toContain('\\"CIRCLE_BUILD_NUM\\":\\"10\\"');
        }));
        test('should detect the jenkins environment', () => __awaiter(void 0, void 0, void 0, function* () {
            const { context, code } = yield runCLI(runCLIArgs, {
                DD_CUSTOM_TRACE_ID: 'abc',
                DD_CUSTOM_PARENT_ID: 'xyz',
                JENKINS_HOME: '/root',
                JENKINS_URL: 'http://jenkins',
                NON_JENKINS_ENV: 'bar',
                WORKSPACE: 'def',
            });
            expect(code).toBe(0);
            const dryRunOutput = context.stdout.toString();
            expect(dryRunOutput).toContain('\\"DD_CUSTOM_TRACE_ID\\":\\"abc\\"');
            expect(dryRunOutput).toContain('\\"DD_CUSTOM_PARENT_ID\\":\\"xyz\\"');
        }));
        test('should detect the github environment', () => __awaiter(void 0, void 0, void 0, function* () {
            const { context, code } = yield runCLI(runCLIArgs, {
                GITHUB_ACTIONS: 'true',
                GITHUB_SERVER_URL: 'http://github',
                GITHUB_REPOSITORY: 'test/test',
                GITHUB_RUN_ID: '10',
                GITHUB_RUN_ATTEMPT: '1',
                GITHUB_JOB: 'jobname',
                DD_GITHUB_JOB_NAME: 'custom_jobname',
            });
            expect(code).toBe(0);
            const dryRunOutput = context.stdout.toString();
            expect(dryRunOutput).toContain('\\"GITHUB_SERVER_URL\\":\\"http://github\\"');
            expect(dryRunOutput).toContain('\\"GITHUB_REPOSITORY\\":\\"test/test\\"');
            expect(dryRunOutput).toContain('\\"GITHUB_RUN_ID\\":\\"10\\"');
            expect(dryRunOutput).toContain('\\"GITHUB_RUN_ATTEMPT\\":\\"1\\"');
            expect(dryRunOutput).toContain('\\"DD_GITHUB_JOB_NAME\\":\\"custom_jobname\\"');
            expect(dryRunOutput).toContain('"ci.job.name":"jobname"');
        }));
        test('should detect the gitlab environment', () => __awaiter(void 0, void 0, void 0, function* () {
            const { context, code } = yield runCLI(runCLIArgs, {
                GITLAB_CI: 'true',
                CI_PROJECT_URL: 'http://gitlab',
                CI_PIPELINE_ID: '10',
                CI_JOB_ID: '50',
            });
            expect(code).toBe(0);
            const dryRunOutput = context.stdout.toString();
            expect(dryRunOutput).toContain('\\"CI_PROJECT_URL\\":\\"http://gitlab\\"');
            expect(dryRunOutput).toContain('\\"CI_PIPELINE_ID\\":\\"10\\"');
            expect(dryRunOutput).toContain('\\"CI_JOB_ID\\":\\"50\\"');
        }));
        test('should detect the azure environment', () => __awaiter(void 0, void 0, void 0, function* () {
            const { context, code } = yield runCLI(runCLIArgs, {
                TF_BUILD: 'true',
                SYSTEM_TEAMPROJECTID: 'test',
                BUILD_BUILDID: '10',
                SYSTEM_JOBID: '3acfg',
            });
            expect(code).toBe(0);
            const dryRunOutput = context.stdout.toString();
            expect(dryRunOutput).toContain('\\"SYSTEM_TEAMPROJECTID\\":\\"test\\"');
            expect(dryRunOutput).toContain('\\"BUILD_BUILDID\\":\\"10\\"');
            expect(dryRunOutput).toContain('\\"SYSTEM_JOBID\\":\\"3acfg\\"');
        }));
        test('should detect the aws codepipeline environment', () => __awaiter(void 0, void 0, void 0, function* () {
            const { context, code } = yield runCLI(runCLIArgs, {
                CODEBUILD_INITIATOR: 'codepipeline-abc',
                DD_PIPELINE_EXECUTION_ID: 'def-234',
                CODEBUILD_BUILD_ARN: 'arn:aws:codebuild:us-west-2:123456789012:build/MyProjectName:6a8f0d8a',
            });
            expect(code).toBe(0);
            const dryRunOutput = context.stdout.toString();
            expect(dryRunOutput).toContain('\\"DD_PIPELINE_EXECUTION_ID\\":\\"def-234\\"');
            expect(dryRunOutput).toContain('\\"CODEBUILD_BUILD_ARN\\":\\"arn:aws:codebuild:us-west-2:123456789012:build/MyProjectName:6a8f0d8a\\"');
        }));
        test('should detect the buildkite environment', () => __awaiter(void 0, void 0, void 0, function* () {
            const { context, code } = yield runCLI(runCLIArgs, {
                BUILDKITE: 'true',
                BUILDKITE_BUILD_ID: 'abc',
                BUILDKITE_JOB_ID: 'def',
            });
            expect(code).toBe(0);
            const dryRunOutput = context.stdout.toString();
            expect(dryRunOutput).toContain('\\"BUILDKITE_BUILD_ID\\":\\"abc\\"');
            expect(dryRunOutput).toContain('\\"BUILDKITE_JOB_ID\\":\\"def\\"');
        }));
    });
};
exports.makeCIProviderTests = makeCIProviderTests;
//# sourceMappingURL=test-utils.js.map