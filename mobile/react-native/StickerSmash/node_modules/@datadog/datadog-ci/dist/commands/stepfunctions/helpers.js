"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectContextForStepFunctions = exports.injectContextForLambdaFunctions = exports.injectContextIntoTasks = exports.buildLogAccessPolicyName = exports.parseArn = exports.getStepFunctionLogGroupArn = exports.isValidArn = exports.buildSubscriptionFilterName = exports.buildLogGroupName = exports.buildArn = exports.displayChanges = void 0;
const deep_object_diff_1 = require("deep-object-diff");
const awsCommands_1 = require("./awsCommands");
const constants_1 = require("./constants");
const displayChanges = (stepFunctionArn, context, commandName, dryRun, params, previousParams) => {
    context.stdout.write(`\n${dryRun ? '\nPlanning for' : 'Will apply'} the following change:\n`);
    if (previousParams !== undefined) {
        context.stdout.write(`\n${commandName}:\nFrom:\n${JSON.stringify((0, deep_object_diff_1.diff)(params, previousParams), undefined, 2)}\nTo:\n${JSON.stringify((0, deep_object_diff_1.diff)(previousParams, params), undefined, 2)}\n`);
    }
    else {
        context.stdout.write(`\n${commandName}:\n${JSON.stringify(params, undefined, 2)}\n`);
    }
};
exports.displayChanges = displayChanges;
const buildArn = (partition, service, region, accountId, resourceType, resourceId) => {
    return `arn:${partition}:${service}:${region}:${accountId}:${resourceType}:${resourceId}`;
};
exports.buildArn = buildArn;
const buildLogGroupName = (stepFunctionName, env) => {
    return `/aws/vendedlogs/states/${stepFunctionName}-Logs${env !== undefined ? '-' + env : ''}`;
};
exports.buildLogGroupName = buildLogGroupName;
const buildSubscriptionFilterName = (stepFunctionName) => {
    return `${stepFunctionName}-${constants_1.DD_CI_IDENTIFYING_STRING}`;
};
exports.buildSubscriptionFilterName = buildSubscriptionFilterName;
const isValidArn = (str) => {
    const arnFields = str.split(':');
    return arnFields.length >= 7 && arnFields[0] === 'arn';
};
exports.isValidArn = isValidArn;
const getStepFunctionLogGroupArn = (stepFunction) => {
    var _a, _b, _c;
    const [logDestinations] = (_b = (_a = stepFunction.loggingConfiguration) === null || _a === void 0 ? void 0 : _a.destinations) !== null && _b !== void 0 ? _b : [{ cloudWatchLogsLogGroup: {} }];
    return (_c = logDestinations.cloudWatchLogsLogGroup) === null || _c === void 0 ? void 0 : _c.logGroupArn;
};
exports.getStepFunctionLogGroupArn = getStepFunctionLogGroupArn;
const parseArn = (arn) => {
    const [, partition, , region, accountId, , resourceName] = arn.split(':');
    return {
        partition,
        region,
        accountId,
        resourceName,
    };
};
exports.parseArn = parseArn;
const buildLogAccessPolicyName = (stepFunction) => {
    return `LogsDeliveryAccessPolicy-${stepFunction.name}`;
};
exports.buildLogAccessPolicyName = buildLogAccessPolicyName;
const injectContextIntoTasks = (describeStateMachineCommandOutput, stepFunctionsClient, context, dryRun) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof describeStateMachineCommandOutput.definition !== 'string') {
        return;
    }
    let definitionHasBeenUpdated = false;
    const definitionObj = JSON.parse(describeStateMachineCommandOutput.definition);
    for (const stepName in definitionObj.States) {
        if (definitionObj.States.hasOwnProperty(stepName)) {
            const step = definitionObj.States[stepName];
            const lambdaUpdated = (0, exports.injectContextForLambdaFunctions)(step, context, stepName);
            const stepUpdated = (0, exports.injectContextForStepFunctions)(step, context, stepName);
            definitionHasBeenUpdated = definitionHasBeenUpdated || lambdaUpdated || stepUpdated;
        }
    }
    if (definitionHasBeenUpdated) {
        yield (0, awsCommands_1.updateStateMachineDefinition)(stepFunctionsClient, describeStateMachineCommandOutput, definitionObj, context, dryRun);
    }
});
exports.injectContextIntoTasks = injectContextIntoTasks;
// Truth table
// Case | Input                                                    | Expected
// -----|----------------------------------------------------------|---------
//   1  | No "Payload" or "Payload.$"                              | true
//  2.1 | "Payload" is object, already injected                    | false
//  2.2 | "Payload" object has Execution, State or StateMachine    | false
//  2.3 | "Payload" object has no Execution, State or StateMachine | true
//   3  | "Payload" is not object                                  | false
//  4.1 | "Payload.$": "$" (default payload)                       | true
//  4.2 | "Payload.$": "States.JsonMerge($$, $, false)" or         | false
//      | "Payload.$": "$$['Execution', 'State', 'StateMachine']"  |
//  4.3 | Custom "Payload.$"                                       | false
const injectContextForLambdaFunctions = (step, context, stepName) => {
    var _a, _b;
    // not default lambda api or legacy lambda definition
    // Using startsWith on the lambda invoke to allow for waitForTaskToken invocations
    if (!((_a = step.Resource) === null || _a === void 0 ? void 0 : _a.startsWith('arn:aws:states:::lambda:invoke')) && !((_b = step.Resource) === null || _b === void 0 ? void 0 : _b.startsWith('arn:aws:lambda'))) {
        return false;
    }
    if (!step.Parameters) {
        context.stdout
            .write(`[Warn] Step ${stepName} does not have a Parameters field. Step Functions Context Object injection \
skipped. Your Step Functions trace will not be merged with downstream Lambda traces. To manually merge these traces, \
check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
        return false;
    }
    // Case 1: payload field not set
    if (!step.Parameters.hasOwnProperty('Payload.$') && !step.Parameters.hasOwnProperty('Payload')) {
        step.Parameters[`Payload.$`] = `$$['Execution', 'State', 'StateMachine']`;
        return true;
    }
    if (step.Parameters.hasOwnProperty('Payload')) {
        if (typeof step.Parameters['Payload'] !== 'object') {
            // Case 3: payload is not a JSON object
            context.stdout
                .write(`[Warn] Step ${stepName}'s Payload field is not a JSON object. Step Functions Context Object \
injection skipped. Your Step Functions trace will not be merged with downstream Lambda traces. To manually \
merge these traces, check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
            return false;
        }
        else {
            // Case 2: payload is not a JSON object
            const payload = step.Parameters.Payload;
            if (payload['Execution.$'] === '$$.Execution' &&
                payload['State.$'] === '$$.State' &&
                payload['StateMachine.$'] === '$$.StateMachine') {
                // Case 2.1: already injected into "Payload"
                context.stdout.write(`Step ${stepName}: Context injection is already set up. Skipping context injection.\n`);
                return false;
            }
            else if (payload.hasOwnProperty('Execution.$') ||
                payload.hasOwnProperty('Execution') ||
                payload.hasOwnProperty('State.$') ||
                payload.hasOwnProperty('State') ||
                payload.hasOwnProperty('StateMachine.$') ||
                payload.hasOwnProperty('StateMachine')) {
                // Case 2.2: "Payload" object has Execution, State or StateMachine
                context.stdout
                    .write(`[Warn] Step ${stepName} may be using custom Execution, State or StateMachine field. Step Functions Context Object \
injection skipped. Your Step Functions trace will not be merged with downstream Lambda traces. To manually \
merge these traces, check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
                return false;
            }
            else {
                // Case 2.3: "Payload" object has no Execution, State or StateMachine
                payload['Execution.$'] = '$$.Execution';
                payload['State.$'] = '$$.State';
                payload['StateMachine.$'] = '$$.StateMachine';
                return true;
            }
        }
    }
    // Case 4.1: default payload
    if (step.Parameters['Payload.$'] === '$') {
        step.Parameters[`Payload.$`] = 'States.JsonMerge($$, $, false)';
        return true;
    }
    // Case 4.2: context injection is already set up using "Payload.$"
    if (step.Parameters['Payload.$'] === 'States.JsonMerge($$, $, false)' ||
        step.Parameters['Payload.$'] === `$$['Execution', 'State', 'StateMachine']`) {
        context.stdout.write(` Step ${stepName}: Context injection is already set up. Skipping context injection.\n`);
        return false;
    }
    // Case 4.3: custom "Payload.$"
    context.stdout
        .write(`[Warn] Step ${stepName} has a custom Payload field. Step Functions Context Object injection skipped. \
Your Step Functions trace will not be merged with downstream Lambda traces. To manually merge these traces, \
check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
    return false;
};
exports.injectContextForLambdaFunctions = injectContextForLambdaFunctions;
// Truth table
// Case | Input                                                    | Expected
// -----|----------------------------------------------------------|---------
//   1  | No "CONTEXT" or "CONTEXT.$"                              | true
//   2  | Has "CONTEXT"                                            | false
//  3.1 | "CONTEXT.$": "States.JsonMerge($$, $, false)" or         | false
//      | "CONTEXT.$": "$$['Execution', 'State', 'StateMachine']"  |
//  3.2 | Custom "CONTEXT.$"                                       | false
const injectContextForStepFunctions = (step, context, stepName) => {
    var _a;
    // not default lambda api
    if (!((_a = step.Resource) === null || _a === void 0 ? void 0 : _a.startsWith('arn:aws:states:::states:startExecution'))) {
        return false;
    }
    if (!step.Parameters) {
        context.stdout
            .write(`[Warn] Step ${stepName} does not have a Parameters field. Step Functions Context Object injection \
skipped. Your Step Functions trace will not be merged with downstream Step Function traces. To manually merge these \
traces, check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
        return false;
    }
    if (!step.Parameters.Input) {
        step.Parameters.Input = { 'CONTEXT.$': `$$['Execution', 'State', 'StateMachine']` };
        return true;
    }
    if (typeof step.Parameters.Input !== 'object') {
        context.stdout
            .write(`[Warn] Step ${stepName}'s Parameters.Input field is not a JSON object. Step Functions Context Object \
injection skipped. Your Step Functions trace will not be merged with downstream Step Function traces. To manually \
merge these traces, check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
        return false;
    }
    // Case 1: 'CONTEXT.$' and 'CONTEXT' fields are not set
    if (!step.Parameters.Input['CONTEXT.$'] && !step.Parameters.Input['CONTEXT']) {
        step.Parameters.Input['CONTEXT.$'] = `$$['Execution', 'State', 'StateMachine']`;
        return true;
    }
    // Case 2: Has 'CONTEXT' field.
    // This case should be rare so we don't support context injection for this case for now
    if (step.Parameters.Input.hasOwnProperty('CONTEXT')) {
        context.stdout.write(`[Warn] Step ${stepName}'s has custom CONTEXT field. Step Functions Context Object \
injection skipped. Your Step Functions trace will not be merged with downstream Step Function traces. To manually \
merge these traces, check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
        return false;
    }
    // Case 3.1 context injection is already set up
    if (step.Parameters.Input['CONTEXT.$'] === 'States.JsonMerge($$, $, false)' ||
        step.Parameters.Input['CONTEXT.$'] === `$$['Execution', 'State', 'StateMachine']`) {
        context.stdout.write(` Step ${stepName}: Context injection is already set up. Skipping context injection.\n`);
        return false;
    }
    // Case 3.2 custom CONTEXT.$ field
    context.stdout
        .write(`[Warn] Step ${stepName}'s Parameters.Input field has a custom CONTEXT.$ field. Step Functions Context \
Object injection skipped. Your Step Functions trace will not be merged with downstream Step Function traces. To \
manually merge these traces, check out https://docs.datadoghq.com/serverless/step_functions/troubleshooting/\n`);
    return false;
};
exports.injectContextForStepFunctions = injectContextForStepFunctions;
//# sourceMappingURL=helpers.js.map