"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = exports.uploadSarifReport = void 0;
const fs_1 = __importDefault(require("fs"));
const zlib_1 = require("zlib");
const form_data_1 = __importDefault(require("form-data"));
const uuid_1 = require("uuid");
const utils_1 = require("../../helpers/utils");
const renderer_1 = require("./renderer");
// Dependency follows-redirects sets a default maxBodyLength of 10 MB https://github.com/follow-redirects/follow-redirects/blob/b774a77e582b97174813b3eaeb86931becba69db/index.js#L391
// We don't want any hard limit enforced by the CLI, the backend will enforce a max size by returning 413 errors.
const maxBodyLength = Infinity;
const uploadSarifReport = (request) => (sarifReport, write) => __awaiter(void 0, void 0, void 0, function* () {
    const form = new form_data_1.default();
    write((0, renderer_1.renderUpload)(sarifReport));
    const metadata = Object.assign(Object.assign({ service: sarifReport.service }, sarifReport.spanTags), { event_type: 'static_analysis', event_format_name: 'sarif', event_format_version: '2.1.0' });
    form.append('event', JSON.stringify(metadata), { filename: 'event.json' });
    form.append('sarif_report_file', fs_1.default.createReadStream(sarifReport.reportPath).pipe((0, zlib_1.createGzip)()), {
        filename: `${(0, uuid_1.v4)()}.sarif.gz`,
    });
    return request({
        data: form,
        headers: form.getHeaders(),
        maxBodyLength,
        method: 'POST',
        url: 'api/v2/cicodescan',
    });
});
exports.uploadSarifReport = uploadSarifReport;
const apiConstructor = (baseIntakeUrl, apiKey) => {
    const requestIntake = (0, utils_1.getRequestBuilder)({ baseUrl: baseIntakeUrl, apiKey });
    return {
        uploadSarifReport: (0, exports.uploadSarifReport)(requestIntake),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map