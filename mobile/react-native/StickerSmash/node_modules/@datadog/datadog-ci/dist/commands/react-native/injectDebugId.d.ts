import { Command } from 'clipanion';
export declare class InjectDebugIdCommand extends Command {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private assetsPath;
    private dryRun;
    private fips;
    private fipsIgnoreError;
    private fipsConfig;
    execute(): Promise<number>;
    /**
     * Scans the directory for bundles and sourcemaps, then injects Debug IDs.
     *
     * @param directory - The directory containing JavaScript bundles and sourcemaps.
     * @param dryRun - If true, does not modify files.
     */
    private injectDebugIds;
    /**
     * Modifies the JS bundle by injecting a minified code snippet to allow runtime consumption of the given Debug ID,
     * and it appends it to the end of the file, while preserving mappings.
     *
     * - Appends a **code snippet** containing the Debug ID.
     * - Adds a **comment** with `//# debugId=<debug_id>`.
     * - Moves the last `//# sourceMappingURL=` or `//@ sourceMappingURL=` comment to the end.
     *
     * @param filePath - The path to the JavaScript file.
     * @param debugId - The Debug ID to inject.
     */
    private injectDebugIdIntoBundle;
    /**
     * Injects a Debug ID into a sourcemap JSON file.
     */
    private injectDebugIdIntoSourceMap;
    /**
     * Reads the Debug ID from a JavaScript bundle, if present.
     */
    private extractDebugIdFromBundle;
    /**
     * Reads the Debug ID from a sourcemap file.
     */
    private extractDebugIdFromSourceMap;
}
