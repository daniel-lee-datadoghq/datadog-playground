"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderUpload = exports.renderCommandInfo = exports.renderSuccessfulCommand = exports.renderRetriedUpload = exports.renderFailedUpload = exports.renderMinifiedPathPrefixMisusage = exports.renderInvalidPrefix = exports.renderConfigurationError = exports.renderSourcesNotFoundWarning = exports.renderGitDataNotAttachedWarning = exports.renderGitWarning = void 0;
const chalk_1 = __importDefault(require("chalk"));
const formatting_1 = require("../../helpers/formatting");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const renderGitWarning = (errorMessage) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} An error occured while invoking git: ${errorMessage}
Make sure the command is running within your git repository to fully leverage Datadog's git integration.
To ignore this warning use the --disable-git flag.\n`);
exports.renderGitWarning = renderGitWarning;
const renderGitDataNotAttachedWarning = (sourcemap, errorMessage) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} Could not attach git data for sourcemap ${sourcemap}: ${errorMessage}\n`);
exports.renderGitDataNotAttachedWarning = renderGitDataNotAttachedWarning;
const renderSourcesNotFoundWarning = (sourcemap) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} No tracked files found for sources contained in ${sourcemap}\n`);
exports.renderSourcesNotFoundWarning = renderSourcesNotFoundWarning;
const renderConfigurationError = (error) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Configuration error: ${error}.\n`);
exports.renderConfigurationError = renderConfigurationError;
exports.renderInvalidPrefix = chalk_1.default.red(`${formatting_1.ICONS.FAILED} --minified-path-prefix should either be an URL (such as "http://example.com/static") or an absolute path starting with a / such as "/static"\n`);
const renderMinifiedPathPrefixMisusage = (sourcemap, repeated) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} The --minified-path-prefix flag value "${sourcemap.minifiedPathPrefix}" seems to repeat "${repeated}" which is already present in the path "${sourcemap.relativePath}"\n`);
exports.renderMinifiedPathPrefixMisusage = renderMinifiedPathPrefixMisusage;
const renderFailedUpload = (sourcemap, errorMessage) => {
    const sourcemapPathBold = `[${chalk_1.default.bold.dim(sourcemap.sourcemapPath)}]`;
    return chalk_1.default.red(`${formatting_1.ICONS.FAILED} Failed upload sourcemap for ${sourcemapPathBold}: ${errorMessage}\n`);
};
exports.renderFailedUpload = renderFailedUpload;
const renderRetriedUpload = (payload, errorMessage, attempt) => {
    const sourcemapPathBold = `[${chalk_1.default.bold.dim(payload.sourcemapPath)}]`;
    return chalk_1.default.yellow(`[attempt ${attempt}] Retrying sourcemap upload ${sourcemapPathBold}: ${errorMessage}\n`);
};
exports.renderRetriedUpload = renderRetriedUpload;
const renderSuccessfulCommand = (statuses, duration, dryRun) => {
    const results = new Map();
    statuses.forEach((status) => {
        if (!results.has(status)) {
            results.set(status, 0);
        }
        results.set(status, results.get(status) + 1);
    });
    const output = ['', chalk_1.default.bold('Command summary:')];
    if (results.get(upload_1.UploadStatus.Failure)) {
        output.push(chalk_1.default.red(`${formatting_1.ICONS.FAILED} Some sourcemaps have not been uploaded correctly.`));
    }
    else if (results.get(upload_1.UploadStatus.Skipped)) {
        output.push(chalk_1.default.yellow(`${formatting_1.ICONS.WARNING}  Some sourcemaps have been skipped.`));
    }
    else if (results.get(upload_1.UploadStatus.Success)) {
        if (dryRun) {
            output.push(chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} [DRYRUN] Handled ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'sourcemap', 'sourcemaps')} with success in ${duration} seconds.`));
        }
        else {
            output.push(chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} Uploaded ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'sourcemap', 'sourcemaps')} in ${duration} seconds.`));
        }
    }
    else {
        output.push(chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} No sourcemaps detected. Did you specify the correct directory?`));
    }
    if (results.get(upload_1.UploadStatus.Failure) || results.get(upload_1.UploadStatus.Skipped)) {
        output.push(`Details about the ${(0, utils_1.pluralize)(statuses.length, 'found sourcemap', 'found sourcemaps')}:`);
        if (results.get(upload_1.UploadStatus.Success)) {
            output.push(`  * ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'sourcemap', 'sourcemaps')} successfully uploaded`);
        }
        if (results.get(upload_1.UploadStatus.Skipped)) {
            output.push(chalk_1.default.yellow(`  * ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Skipped), 'sourcemap was', 'sourcemaps were')} skipped`));
        }
        if (results.get(upload_1.UploadStatus.Failure)) {
            output.push(chalk_1.default.red(`  * ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Failure), 'sourcemap', 'sourcemaps')} failed to upload`));
        }
    }
    return output.join('\n') + '\n';
};
exports.renderSuccessfulCommand = renderSuccessfulCommand;
const renderCommandInfo = (basePath, minifiedPathPrefix, projectPath, releaseVersion, service, poolLimit, dryRun) => {
    let fullStr = '';
    if (dryRun) {
        fullStr += chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} DRY-RUN MODE ENABLED. WILL NOT UPLOAD SOURCEMAPS\n`);
    }
    const startStr = chalk_1.default.green(`Starting upload with concurrency ${poolLimit}. \n`);
    fullStr += startStr;
    const basePathStr = chalk_1.default.green(`Will look for sourcemaps in ${basePath}\n`);
    fullStr += basePathStr;
    const minifiedPathPrefixStr = chalk_1.default.green(`Will match JS files for errors on files starting with ${minifiedPathPrefix}\n`);
    fullStr += minifiedPathPrefixStr;
    const serviceVersionProjectPathStr = chalk_1.default.green(`version: ${releaseVersion} service: ${service} project path: ${projectPath}\n`);
    fullStr += serviceVersionProjectPathStr;
    return fullStr;
};
exports.renderCommandInfo = renderCommandInfo;
const renderUpload = (sourcemap) => `Uploading sourcemap ${sourcemap.sourcemapPath} for JS file available at ${sourcemap.minifiedUrl}\n`;
exports.renderUpload = renderUpload;
//# sourceMappingURL=renderer.js.map