"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = exports.uploadJUnitXML = exports.apiUrl = exports.intakeUrl = exports.datadogSite = void 0;
const fs_1 = __importDefault(require("fs"));
const zlib_1 = require("zlib");
const form_data_1 = __importDefault(require("form-data"));
const upath_1 = __importDefault(require("upath"));
const uuid_1 = require("uuid");
const utils_1 = require("../../helpers/utils");
// Dependency follows-redirects sets a default maxBodyLength of 10 MB https://github.com/follow-redirects/follow-redirects/blob/b774a77e582b97174813b3eaeb86931becba69db/index.js#L391
// We don't want any hard limit enforced by the CLI, the backend will enforce a max size by returning 413 errors.
const maxBodyLength = Infinity;
exports.datadogSite = process.env.DATADOG_SITE || process.env.DD_SITE || 'datadoghq.com';
exports.intakeUrl = `https://cireport-intake.${exports.datadogSite}`;
exports.apiUrl = `https://api.${exports.datadogSite}`;
const uploadJUnitXML = (request) => (jUnitXML) => __awaiter(void 0, void 0, void 0, function* () {
    const form = new form_data_1.default();
    let fileName;
    try {
        fileName = upath_1.default.parse(jUnitXML.xmlPath).name;
    }
    catch (e) {
        fileName = 'default_file_name';
    }
    const reportTagsAndMetrics = {
        tags: jUnitXML.reportTags,
        metrics: jUnitXML.reportMeasures, // We can't change `metrics` to `measures` because the backend only accepts `metrics`.
    };
    const custom = {
        metadata: jUnitXML.spanTags,
        tags: jUnitXML.customTags,
        metrics: jUnitXML.customMeasures,
        session: reportTagsAndMetrics,
        '_dd.cireport_version': '3',
        '_dd.hostname': jUnitXML.hostname,
        '_dd.report_name': fileName,
    };
    if (jUnitXML.logsEnabled) {
        custom['_dd.junitxml_logs'] = true;
    }
    if (jUnitXML.xpathTags) {
        custom['_dd.junitxml_xpath_tags'] = jUnitXML.xpathTags;
    }
    form.append('event', JSON.stringify(custom), { filename: 'event.json' });
    form.append('junit_xml_report_file', fs_1.default.createReadStream(jUnitXML.xmlPath).pipe((0, zlib_1.createGzip)()), {
        filename: `${(0, uuid_1.v4)()}.xml.gz`,
    });
    return request({
        data: form,
        headers: form.getHeaders(),
        maxBodyLength,
        method: 'POST',
        url: 'api/v2/cireport',
    });
});
exports.uploadJUnitXML = uploadJUnitXML;
const apiConstructor = (baseIntakeUrl, apiKey) => {
    const requestIntake = (0, utils_1.getRequestBuilder)({ baseUrl: baseIntakeUrl, apiKey });
    return {
        uploadJUnitXML: (0, exports.uploadJUnitXML)(requestIntake),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map