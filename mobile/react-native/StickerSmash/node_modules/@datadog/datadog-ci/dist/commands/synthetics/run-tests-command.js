"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunTestsCommand = void 0;
const clipanion_1 = require("clipanion");
const deep_extend_1 = __importDefault(require("deep-extend"));
const env_1 = require("../../helpers/env");
const utils_1 = require("../../helpers/utils");
const validation = __importStar(require("../../helpers/validation"));
const validation_1 = require("../../helpers/validation");
const base_command_1 = require("./base-command");
const build_and_test_1 = require("./build-and-test");
const errors_1 = require("./errors");
const junit_1 = require("./reporters/junit");
const run_tests_lib_1 = require("./run-tests-lib");
const internal_1 = require("./utils/internal");
const public_1 = require("./utils/public");
const datadogDocsBaseUrl = 'https://docs.datadoghq.com';
const datadogAppBaseUrl = 'https://app.datadoghq.com';
const $1 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/continuous_testing/cicd_integrations/configuration#test-files`);
const $2 = (0, utils_1.makeTerminalLink)(`${datadogAppBaseUrl}/synthetics/settings/continuous-testing`);
const $3 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/synthetics/explore/#search`);
const $4 = (0, utils_1.makeTerminalLink)(`${datadogAppBaseUrl}/synthetics/tests`);
const $5 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/continuous_testing/environments/proxy_firewall_vpn#what-is-the-testing-tunnel`);
const $6 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/synthetics/mobile_app_testing/`);
class RunTestsCommand extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        // JUnit options
        this.jUnitReport = clipanion_1.Option.String('-j,--jUnitReport', {
            description: 'The filename for a JUnit report if you want to generate one.',
        });
        this.runName = clipanion_1.Option.String('-n,--runName', {
            description: 'A name for this run, which will be included in the JUnit report.',
        });
        this.config = (0, run_tests_lib_1.getDefaultConfig)();
        this.batchTimeout = clipanion_1.Option.String('--batchTimeout', {
            description: 'The duration in milliseconds after which the CI batch fails as timed out. This does not affect the outcome of a test run that already started.',
            validator: validation.isInteger(),
        });
        this.failOnCriticalErrors = clipanion_1.Option.Boolean('--failOnCriticalErrors', {
            description: 'Fail the CI job if a critical error that is typically transient occurs, such as rate limits, authentication failures, or Datadog infrastructure issues.',
        });
        this.failOnMissingTests = clipanion_1.Option.Boolean('--failOnMissingTests', {
            description: `Fail the CI job if the list of tests to run is empty or if some explicitly listed tests are missing.`,
        });
        this.failOnTimeout = clipanion_1.Option.Boolean('--failOnTimeout', {
            description: 'A boolean flag that fails the CI job if at least one test exceeds the default test timeout.',
        });
        this.files = clipanion_1.Option.Array('-f,--files', {
            description: `Glob patterns to detect Synthetic ${$1 `test configuration files`}}.`,
        });
        this.mobileApplicationVersion = clipanion_1.Option.String('--mobileApplicationVersion', {
            description: `Override the mobile application version for ${$6 `Synthetic mobile application tests`}. The version must be uploaded and available within Datadog.`,
        });
        this.mobileApplicationVersionFilePath = clipanion_1.Option.String('--mobileApp,--mobileApplicationVersionFilePath', {
            description: `Override the mobile application version for ${$6 `Synthetic mobile application tests`} with a local or recently built application.`,
        });
        this.overrides = clipanion_1.Option.Array('--override', {
            description: 'Override specific test properties.',
        });
        this.publicIds = clipanion_1.Option.Array('-p,--public-id', {
            description: `Public IDs of Synthetic tests to run. If no value is provided, tests are discovered in Synthetic ${$1 `test configuration files`}.`,
        });
        this.selectiveRerun = clipanion_1.Option.Boolean('--selectiveRerun', {
            description: `Whether to only rerun failed tests. If a test has already passed for a given commit, it will not be rerun in subsequent CI batches. By default, your ${$2 `organization's default setting`} is used. Set it to \`false\` to force full runs when your configuration enables it by default.`,
        });
        this.subdomain = clipanion_1.Option.String('--subdomain', {
            description: 'The custom subdomain to access your Datadog organization. If your URL is `myorg.datadoghq.com`, the custom subdomain is `myorg`.',
        });
        this.testSearchQuery = clipanion_1.Option.String('-s,--search', {
            description: `Use a ${$3 `search query`} to select which Synthetic tests to run. Use the ${$4 `Synthetic Tests list page's search bar`} to craft your query, then copy and paste it.`,
        });
        this.tunnel = clipanion_1.Option.Boolean('-t,--tunnel', {
            description: `Use the ${$5 `Continuous Testing tunnel`} to launch tests against internal environments.`,
        });
        this.buildCommand = clipanion_1.Option.String('--buildCommand', {
            description: 'The build command to generate the assets to run the tests against.',
        });
        this.tearDowns = [];
        this.tearDown = () => __awaiter(this, void 0, void 0, function* () {
            for (const tearDown of this.tearDowns) {
                yield tearDown();
            }
        });
    }
    execute() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.setup();
            }
            catch (error) {
                (0, public_1.reportExitLogs)(this.reporter, this.config, { error });
                return 1;
            }
            const startTime = Date.now();
            if (this.config.tunnel) {
                this.reporter.log('You are using tunnel option, the chosen location(s) will be overridden by a location in your account region.\n');
            }
            let results;
            let summary;
            const [_, command] = (_a = this.path) !== null && _a !== void 0 ? _a : [];
            if (command === 'build-and-test') {
                if (!this.config.buildCommand) {
                    this.reporter.error('The `buildCommand` option is required for the `build-and-test` command.');
                    return 1;
                }
                const { builds, devServerUrl, stop } = yield (0, build_and_test_1.buildAssets)(this.config.buildCommand, this.reporter);
                this.tearDowns.push(stop);
                const resourceUrlSubstitutionRegexes = builds.map(
                // All of the resources matching the publicPath prefix will be redirected to the dev server.
                (build) => `.*${build.publicPath}|${devServerUrl}/${build.publicPath}`);
                this.config = (0, deep_extend_1.default)(this.config, {
                    tunnel: true,
                    defaultTestOverrides: {
                        resourceUrlSubstitutionRegexes,
                    },
                });
            }
            try {
                ;
                ({ results, summary } = yield (0, run_tests_lib_1.executeTests)(this.reporter, this.config));
            }
            catch (error) {
                (0, public_1.reportExitLogs)(this.reporter, this.config, { error });
                return (0, public_1.toExitCode)((0, public_1.getExitReason)(this.config, { error }));
            }
            finally {
                yield this.tearDown();
            }
            const orgSettings = yield (0, public_1.getOrgSettings)(this.reporter, this.config);
            (0, public_1.renderResults)({
                config: this.config,
                orgSettings,
                reporter: this.reporter,
                results,
                startTime,
                summary,
            });
            (0, public_1.reportExitLogs)(this.reporter, this.config, { results });
            return (0, public_1.toExitCode)((0, public_1.getExitReason)(this.config, { results }));
        });
    }
    resolveConfigFromEnv() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        // Override with OVERRIDE ENV variables
        const envOverrideBasicAuth = (0, deep_extend_1.default)((_b = (_a = this.config.defaultTestOverrides) === null || _a === void 0 ? void 0 : _a.basicAuth) !== null && _b !== void 0 ? _b : {}, (0, utils_1.removeUndefinedValues)({
            password: process.env.DATADOG_SYNTHETICS_OVERRIDE_BASIC_AUTH_PASSWORD,
            username: process.env.DATADOG_SYNTHETICS_OVERRIDE_BASIC_AUTH_USERNAME,
        }));
        const envOverrideCookies = (0, utils_1.removeUndefinedValues)({
            append: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_COOKIES_APPEND),
            value: process.env.DATADOG_SYNTHETICS_OVERRIDE_COOKIES,
        });
        const envOverrideSetCookies = (0, utils_1.removeUndefinedValues)({
            append: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_SET_COOKIES_APPEND),
            value: process.env.DATADOG_SYNTHETICS_OVERRIDE_SET_COOKIES,
        });
        const envOverrideRetryConfig = (0, deep_extend_1.default)((_d = (_c = this.config.defaultTestOverrides) === null || _c === void 0 ? void 0 : _c.retry) !== null && _d !== void 0 ? _d : {}, (0, utils_1.removeUndefinedValues)({
            count: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_RETRY_COUNT),
            interval: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_RETRY_INTERVAL),
        }));
        return Object.assign(Object.assign({}, super.resolveConfigFromEnv()), { batchTimeout: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_BATCH_TIMEOUT), buildCommand: process.env.DATADOG_SYNTHETICS_BUILD_COMMAND, defaultTestOverrides: {
                allowInsecureCertificates: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_ALLOW_INSECURE_CERTIFICATES),
                basicAuth: Object.keys(envOverrideBasicAuth).length > 0 ? envOverrideBasicAuth : undefined,
                body: process.env.DATADOG_SYNTHETICS_OVERRIDE_BODY,
                bodyType: process.env.DATADOG_SYNTHETICS_OVERRIDE_BODY_TYPE,
                cookies: Object.keys(envOverrideCookies).length > 0 ? envOverrideCookies : undefined,
                setCookies: Object.keys(envOverrideSetCookies).length > 0 ? envOverrideSetCookies : undefined,
                defaultStepTimeout: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_DEFAULT_STEP_TIMEOUT),
                deviceIds: (_e = process.env.DATADOG_SYNTHETICS_OVERRIDE_DEVICE_IDS) === null || _e === void 0 ? void 0 : _e.split(';'),
                executionRule: (0, internal_1.toExecutionRule)(process.env.DATADOG_SYNTHETICS_OVERRIDE_EXECUTION_RULE),
                followRedirects: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_OVERRIDE_FOLLOW_REDIRECTS),
                headers: (0, env_1.toStringMap)(process.env.DATADOG_SYNTHETICS_OVERRIDE_HEADERS),
                locations: (_f = process.env.DATADOG_SYNTHETICS_OVERRIDE_LOCATIONS) === null || _f === void 0 ? void 0 : _f.split(';'),
                mobileApplicationVersion: process.env.DATADOG_SYNTHETICS_OVERRIDE_MOBILE_APPLICATION_VERSION,
                resourceUrlSubstitutionRegexes: (_g = process.env.DATADOG_SYNTHETICS_OVERRIDE_RESOURCE_URL_SUBSTITUTION_REGEXES) === null || _g === void 0 ? void 0 : _g.split(';'),
                retry: Object.keys(envOverrideRetryConfig).length > 0 ? envOverrideRetryConfig : undefined,
                startUrl: process.env.DATADOG_SYNTHETICS_OVERRIDE_START_URL,
                startUrlSubstitutionRegex: process.env.DATADOG_SYNTHETICS_OVERRIDE_START_URL_SUBSTITUTION_REGEX,
                testTimeout: (0, env_1.toNumber)(process.env.DATADOG_SYNTHETICS_OVERRIDE_TEST_TIMEOUT),
                variables: (0, env_1.toStringMap)(process.env.DATADOG_SYNTHETICS_OVERRIDE_VARIABLES),
            }, failOnCriticalErrors: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_FAIL_ON_CRITICAL_ERRORS), failOnMissingTests: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_FAIL_ON_MISSING_TESTS), failOnTimeout: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_FAIL_ON_TIMEOUT), files: (_h = process.env.DATADOG_SYNTHETICS_FILES) === null || _h === void 0 ? void 0 : _h.split(';'), jUnitReport: process.env.DATADOG_SYNTHETICS_JUNIT_REPORT, publicIds: (_j = process.env.DATADOG_SYNTHETICS_PUBLIC_IDS) === null || _j === void 0 ? void 0 : _j.split(';'), selectiveRerun: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_SELECTIVE_RERUN), subdomain: process.env.DATADOG_SUBDOMAIN, testSearchQuery: process.env.DATADOG_SYNTHETICS_TEST_SEARCH_QUERY, tunnel: (0, env_1.toBoolean)(process.env.DATADOG_SYNTHETICS_TUNNEL) });
    }
    resolveConfigFromCli() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        // Override defaultTestOverrides with CLI parameters
        let validatedOverrides;
        try {
            validatedOverrides = (0, internal_1.validateAndParseOverrides)(this.overrides);
        }
        catch (error) {
            throw new errors_1.CiError('INVALID_CONFIG', error.message);
        }
        const cliOverrideBasicAuth = (0, deep_extend_1.default)((_b = (_a = this.config.defaultTestOverrides) === null || _a === void 0 ? void 0 : _a.basicAuth) !== null && _b !== void 0 ? _b : {}, (0, utils_1.removeUndefinedValues)({
            password: (_c = validatedOverrides.basicAuth) === null || _c === void 0 ? void 0 : _c.password,
            username: (_d = validatedOverrides.basicAuth) === null || _d === void 0 ? void 0 : _d.username,
        }));
        const cliOverrideCookies = (0, utils_1.removeUndefinedValues)({
            append: (_e = validatedOverrides.cookies) === null || _e === void 0 ? void 0 : _e.append,
            value: (_f = validatedOverrides.cookies) === null || _f === void 0 ? void 0 : _f.value,
        });
        const cliOverrideSetCookies = (0, utils_1.removeUndefinedValues)({
            append: (_g = validatedOverrides.setCookies) === null || _g === void 0 ? void 0 : _g.append,
            value: (_h = validatedOverrides.setCookies) === null || _h === void 0 ? void 0 : _h.value,
        });
        const cliOverrideRetryConfig = (0, deep_extend_1.default)((_k = (_j = this.config.defaultTestOverrides) === null || _j === void 0 ? void 0 : _j.retry) !== null && _k !== void 0 ? _k : {}, (0, utils_1.removeUndefinedValues)({
            count: (_l = validatedOverrides.retry) === null || _l === void 0 ? void 0 : _l.count,
            interval: (_m = validatedOverrides.retry) === null || _m === void 0 ? void 0 : _m.interval,
        }));
        return Object.assign(Object.assign({}, super.resolveConfigFromCli()), { batchTimeout: this.batchTimeout, buildCommand: this.buildCommand, defaultTestOverrides: {
                allowInsecureCertificates: validatedOverrides.allowInsecureCertificates,
                basicAuth: Object.keys(cliOverrideBasicAuth).length > 0 ? cliOverrideBasicAuth : undefined,
                body: validatedOverrides.body,
                bodyType: validatedOverrides.bodyType,
                cookies: Object.keys(cliOverrideCookies).length > 0 ? cliOverrideCookies : undefined,
                setCookies: Object.keys(cliOverrideSetCookies).length > 0 ? cliOverrideSetCookies : undefined,
                defaultStepTimeout: validatedOverrides.defaultStepTimeout,
                deviceIds: validatedOverrides.deviceIds,
                executionRule: validatedOverrides.executionRule,
                followRedirects: validatedOverrides.followRedirects,
                headers: validatedOverrides.headers,
                locations: validatedOverrides.locations,
                mobileApplicationVersion: this.mobileApplicationVersion,
                mobileApplicationVersionFilePath: this.mobileApplicationVersionFilePath,
                resourceUrlSubstitutionRegexes: validatedOverrides.resourceUrlSubstitutionRegexes,
                retry: Object.keys(cliOverrideRetryConfig).length > 0 ? cliOverrideRetryConfig : undefined,
                startUrl: validatedOverrides.startUrl,
                startUrlSubstitutionRegex: validatedOverrides.startUrlSubstitutionRegex,
                testTimeout: validatedOverrides.testTimeout,
                variables: validatedOverrides.variables,
            }, failOnCriticalErrors: this.failOnCriticalErrors, failOnMissingTests: this.failOnMissingTests, failOnTimeout: this.failOnTimeout, files: this.files, jUnitReport: this.jUnitReport, publicIds: this.publicIds, selectiveRerun: this.selectiveRerun, subdomain: this.subdomain, testSearchQuery: this.testSearchQuery, tunnel: this.tunnel });
    }
    normalizeConfig() {
        var _a, _b;
        // Convert cookies to object
        if (typeof ((_a = this.config.defaultTestOverrides) === null || _a === void 0 ? void 0 : _a.cookies) === 'string') {
            this.config.defaultTestOverrides.cookies = { value: this.config.defaultTestOverrides.cookies };
        }
        // Convert setCookies to object
        if (typeof ((_b = this.config.defaultTestOverrides) === null || _b === void 0 ? void 0 : _b.setCookies) === 'string') {
            this.config.defaultTestOverrides.setCookies = { value: this.config.defaultTestOverrides.setCookies };
        }
    }
    validateConfig() {
        var _a, _b;
        if (!(0, validation_1.isValidDatadogSite)(this.config.datadogSite)) {
            throw new errors_1.CiError('INVALID_CONFIG', `The \`datadogSite\` config property (${JSON.stringify(this.config.datadogSite)}) must match one of the sites supported by Datadog.\nFor more information, see "Site parameter" in our documentation: https://docs.datadoghq.com/getting_started/site/#access-the-datadog-site`);
        }
        if (typeof ((_a = this.config.defaultTestOverrides) === null || _a === void 0 ? void 0 : _a.cookies) === 'object' &&
            !this.config.defaultTestOverrides.cookies.value) {
            throw new errors_1.CiError('INVALID_CONFIG', 'Cookies value cannot be empty.');
        }
        if (typeof ((_b = this.config.defaultTestOverrides) === null || _b === void 0 ? void 0 : _b.setCookies) === 'object' &&
            !this.config.defaultTestOverrides.setCookies.value) {
            throw new errors_1.CiError('INVALID_CONFIG', 'SetCookies value cannot be empty.');
        }
    }
    getReporters() {
        if (this.config.jUnitReport) {
            return [
                new junit_1.JUnitReporter({
                    context: this.context,
                    jUnitReport: this.config.jUnitReport,
                    runName: this.runName,
                }),
            ];
        }
        return [];
    }
}
exports.RunTestsCommand = RunTestsCommand;
RunTestsCommand.paths = [
    ['synthetics', 'run-tests'],
    ['synthetics', 'build-and-test'],
];
RunTestsCommand.usage = clipanion_1.Command.Usage({
    category: 'Synthetics',
    description: 'Run Synthetic tests with Datadog.',
    details: `
      This command will run Synthetic tests with Datadog, wait for the results and report a summary.\n
      https://docs.datadoghq.com/continuous_testing/cicd_integrations
    `,
    examples: [
        [
            'Explicitly specify multiple tests to run',
            'datadog-ci synthetics run-tests --public-id pub-lic-id1 --public-id pub-lic-id2',
        ],
        ['Discover tests with a search query', "datadog-ci synthetics run-tests --search 'tag:e2e-tests'"],
        [
            'Override the default glob pattern to group the tests in suites',
            'datadog-ci synthetics run-tests -f ./component-1/**/*.synthetics.json -f ./component-2/**/*.synthetics.json',
        ],
        [
            'Override existing or inject new local and global variables in tests',
            'datadog-ci synthetics run-tests -f ./component-1/**/*.synthetics.json --override variables.NAME=VALUE',
        ],
    ],
});
//# sourceMappingURL=run-tests-command.js.map