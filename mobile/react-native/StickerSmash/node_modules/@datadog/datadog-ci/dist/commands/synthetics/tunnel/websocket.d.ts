/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import type { ProxyAgent } from 'proxy-agent';
import { default as WebSocketModule } from 'ws';
export declare class WebSocket extends EventEmitter {
    private url;
    private proxyAgent;
    private firstMessage?;
    private keepAliveWebsocket?;
    private websocket?;
    constructor(url: string, proxyAgent: ProxyAgent | undefined);
    /**
     * close will terminate the WebSocket connection
     */
    close(gracefullyClose?: boolean): Promise<void>;
    /**
     * connect will start a WebSocket connection
     */
    connect(): Promise<void>;
    /**
     * duplex will create a duplex stream for the WS connection
     */
    duplex(): import("stream").Duplex;
    /**
     * keepAlive will return a promise to keep track of the tunnel connection
     */
    keepAlive(): Promise<void>;
    /**
     * on allows to listen for WebSocket messages
     */
    on(event: 'message', listener: (data: WebSocketModule.Data) => void): this;
    /**
     * once allows to listen for a WebSocket message
     */
    once(event: 'message', listener: (data: WebSocketModule.Data) => void): this;
    waitForFirstMessage(): Promise<WebSocketModule.Data>;
    private establishWebsocketConnection;
}
