"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderPayloadWarning = exports.renderSuccessfulCommand = exports.renderUploading = exports.renderFailedUpload = exports.renderNoDefaultBranch = exports.renderDuplicateUpload = exports.renderInvalidPayload = exports.renderInvalidFile = void 0;
const chalk_1 = __importDefault(require("chalk"));
const app_1 = require("../../helpers/app");
const validation_1 = require("./validation");
const ICONS = {
    FAILED: '❌',
    SUCCESS: '✅',
    WARNING: '⚠️',
    INFO: 'ℹ️',
};
const renderInvalidFile = (sbomReport) => {
    const reportPath = `[${chalk_1.default.bold.dim(sbomReport)}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.FAILED} Invalid SBOM report file ${reportPath}.\n`);
    fullStr += chalk_1.default.red(`The report is not a valid SBOM or is not compliant with our json schema.\n`);
    return fullStr;
};
exports.renderInvalidFile = renderInvalidFile;
const renderInvalidPayload = (sbomReport) => {
    const reportPath = `[${chalk_1.default.bold.dim(sbomReport)}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`Cannot generate payload for file ${reportPath}.\n`);
    fullStr += chalk_1.default.red(`Make sure you run the command inside a git repository and the SBOM file is valid\n`);
    return fullStr;
};
exports.renderInvalidPayload = renderInvalidPayload;
const renderDuplicateUpload = (branch, sha) => {
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.WARNING}  Duplicate upload detected\n`);
    fullStr += chalk_1.default.red(`An SBOM has already been processed for branch:${branch} and sha:${sha}\n`);
    fullStr += chalk_1.default.red(`Push a new commit before uploading again\n`);
    fullStr += chalk_1.default.red(`If you have a monorepo with multiple SBOM's you will need to combine them\n`);
    fullStr += chalk_1.default.red(`Exiting with code 0\n`);
    return fullStr;
};
exports.renderDuplicateUpload = renderDuplicateUpload;
const renderNoDefaultBranch = (repositoryUrl) => {
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.WARNING}  Failed to infer the default branch for ${repositoryUrl}\n`);
    fullStr += chalk_1.default.red(`To resolve this, do one of the following:\n`);
    fullStr += chalk_1.default.red(` - Upload from your default branch first (must be one of: master, main, default, stable, source, prod, or develop)\n`);
    fullStr += chalk_1.default.red(` - Or visit ${(0, app_1.getBaseUrl)()}source-code/repositories to manually override the default branch for this repository\n`);
    fullStr += chalk_1.default.red(`After completing either step, you can retry uploading the SBOM from this branch\n`);
    return fullStr;
};
exports.renderNoDefaultBranch = renderNoDefaultBranch;
const renderFailedUpload = (sbomReport, error, debug) => {
    var _a, _b, _c, _d;
    const reportPath = `[${chalk_1.default.bold.dim(sbomReport)}]`;
    let fullStr = '';
    fullStr += chalk_1.default.red(`${ICONS.FAILED}  Failed upload SBOM file ${reportPath}: ${error.message}\n`);
    const status = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status;
    const errors = (_c = (_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.errors;
    if (status) {
        let str = `API status code: ${status}`;
        // Always show the first error detail if present
        if (Array.isArray(errors) && errors.length > 0 && errors[0].detail) {
            str += `, Detail: ${errors[0].detail}`;
        }
        fullStr += chalk_1.default.red(`${str}\n`);
    }
    if (debug && Array.isArray(errors)) {
        fullStr += chalk_1.default.red(`API full error response:\n${JSON.stringify((_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data, undefined, 2)}\n`);
    }
    return fullStr;
};
exports.renderFailedUpload = renderFailedUpload;
const renderUploading = (sbomReport, scaRequest) => {
    const languages = new Set();
    for (const dep of scaRequest.dependencies) {
        languages.add(dep.language.toString());
    }
    return `Uploading SBOM report in ${sbomReport} (${scaRequest.dependencies.length} dependencies detected for languages ${Array.from(languages).join(',')})\nUpload for repository ${scaRequest.repository.url}, branch ${scaRequest.commit.branch}, sha ${scaRequest.commit.sha}\n`;
};
exports.renderUploading = renderUploading;
const renderSuccessfulCommand = (duration) => {
    let fullStr = '';
    fullStr += chalk_1.default.green(`${ICONS.SUCCESS} Uploaded SBOM file in ${duration} seconds.\n`);
    fullStr += chalk_1.default.green(`${ICONS.INFO}  Results available on ${(0, app_1.getBaseUrl)()}ci/code-analysis\n`);
    fullStr += chalk_1.default.green('=================================================================================================\n');
    return fullStr;
};
exports.renderSuccessfulCommand = renderSuccessfulCommand;
const renderPayloadWarning = (dependencies) => {
    let ret = '';
    for (const dep of dependencies) {
        if (!(0, validation_1.validateDependencyName)(dep)) {
            ret += `invalid dependency name ${dep.name}\n`;
        }
    }
    return ret;
};
exports.renderPayloadWarning = renderPayloadWarning;
//# sourceMappingURL=renderer.js.map