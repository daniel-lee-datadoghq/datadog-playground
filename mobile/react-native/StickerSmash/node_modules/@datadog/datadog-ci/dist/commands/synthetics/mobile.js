"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadMobileApplicationsAndUpdateOverrideConfigs = exports.uploadMobileApplicationVersion = exports.overrideMobileConfig = exports.AppUploadCache = exports.uploadMobileApplication = exports.getSizeAndPartsFromFile = exports.MAX_APP_UPLOAD_POLLING_TIMEOUT = exports.APP_UPLOAD_POLLING_INTERVAL = void 0;
const crypto = __importStar(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const api_1 = require("./api");
const errors_1 = require("./errors");
const app_upload_1 = require("./reporters/mobile/app-upload");
const internal_1 = require("./utils/internal");
const UPLOAD_FILE_MAX_PART_SIZE = 10 * 1024 * 1024; // MiB
exports.APP_UPLOAD_POLLING_INTERVAL = 1000; // 1 second
exports.MAX_APP_UPLOAD_POLLING_TIMEOUT = 5 * 60 * 1000; // 5 minutes
const getSizeAndPartsFromFile = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, e_1, _b, _c;
    const readStreamOptions = {
        // Limit the chunk size for the stream
        // https://nodejs.org/api/stream.html#buffering
        highWaterMark: UPLOAD_FILE_MAX_PART_SIZE,
    };
    const fileStream = fs_1.default.createReadStream(filePath, readStreamOptions);
    const parts = [];
    try {
        for (var _d = true, fileStream_1 = __asyncValues(fileStream), fileStream_1_1; fileStream_1_1 = yield fileStream_1.next(), _a = fileStream_1_1.done, !_a; _d = true) {
            _c = fileStream_1_1.value;
            _d = false;
            const chunk = _c;
            if (!(chunk instanceof Buffer)) {
                // this should never happen, but for-await-of creates an any that we don't want
                throw new Error('Unexpected chunk type from file stream');
            }
            parts.push({
                md5: crypto.createHash('md5').update(chunk).digest('base64'),
                partNumber: parts.length + 1,
                blob: chunk,
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (!_d && !_a && (_b = fileStream_1.return)) yield _b.call(fileStream_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        appSize: fileStream.bytesRead,
        parts,
    };
});
exports.getSizeAndPartsFromFile = getSizeAndPartsFromFile;
const uploadMobileApplication = (api, applicationPathToUpload, applicationId, newVersionParams) => __awaiter(void 0, void 0, void 0, function* () {
    var _e, _f, _g, _h, _j, _k;
    const { appSize, parts } = yield (0, exports.getSizeAndPartsFromFile)(applicationPathToUpload);
    let multipartPresignedUrlsResponse;
    try {
        multipartPresignedUrlsResponse = yield api.getMobileApplicationPresignedURLs(applicationId, appSize, parts);
    }
    catch (e) {
        throw new api_1.EndpointError(`Failed to get presigned URL: ${(0, api_1.formatBackendErrors)(e)}\n`, (_e = e.response) === null || _e === void 0 ? void 0 : _e.status);
    }
    let uploadPartResponses;
    try {
        uploadPartResponses = yield api.uploadMobileApplicationPart(parts, multipartPresignedUrlsResponse.multipart_presigned_urls_params);
    }
    catch (e) {
        throw new api_1.EndpointError(`Failed to upload mobile application: ${(0, api_1.formatBackendErrors)(e)}\n`, (_f = e.response) === null || _f === void 0 ? void 0 : _f.status);
    }
    const { upload_id: uploadId, key } = multipartPresignedUrlsResponse.multipart_presigned_urls_params;
    let jobId;
    try {
        jobId = yield api.completeMultipartMobileApplicationUpload(applicationId, uploadId, key, uploadPartResponses, newVersionParams);
    }
    catch (e) {
        throw new api_1.EndpointError(`Failed to complete upload mobile application: ${(0, api_1.formatBackendErrors)(e)}\n`, (_g = e.response) === null || _g === void 0 ? void 0 : _g.status);
    }
    let appUploadResponse;
    const maxPollingDate = Date.now() + exports.MAX_APP_UPLOAD_POLLING_TIMEOUT;
    while (true) {
        if (Date.now() >= maxPollingDate) {
            throw new errors_1.CriticalError('MOBILE_APP_UPLOAD_TIMEOUT', 'Timeout while polling for mobile application upload');
        }
        try {
            appUploadResponse = yield api.pollMobileApplicationUploadResponse(jobId);
        }
        catch (e) {
            throw new api_1.EndpointError(`Failed to validate mobile application: ${(0, api_1.formatBackendErrors)(e)}\n`, (_h = e.response) === null || _h === void 0 ? void 0 : _h.status);
        }
        if (appUploadResponse.status !== 'pending') {
            break;
        }
        yield (0, internal_1.wait)(exports.APP_UPLOAD_POLLING_INTERVAL);
    }
    if (appUploadResponse.status === 'complete' && !appUploadResponse.is_valid) {
        throw new errors_1.CriticalError('INVALID_MOBILE_APP', `Mobile application failed validation for reason: ${(_j = appUploadResponse.invalid_app_result) === null || _j === void 0 ? void 0 : _j.invalid_message}`);
    }
    if (appUploadResponse.status === 'user_error') {
        throw new errors_1.CriticalError('INVALID_MOBILE_APP_UPLOAD_PARAMETERS', `Mobile application failed validation for reason: ${(_k = appUploadResponse.user_error_result) === null || _k === void 0 ? void 0 : _k.user_error_message}`);
    }
    if (appUploadResponse.status === 'error') {
        throw new errors_1.CriticalError('UNKNOWN_MOBILE_APP_UPLOAD_FAILURE', `Unknown mobile application upload error.`);
    }
    return { appUploadResponse, fileName: multipartPresignedUrlsResponse.file_name };
});
exports.uploadMobileApplication = uploadMobileApplication;
class AppUploadCache {
    constructor() {
        this.cache = {};
    }
    setAppCacheKeys(triggerConfigs, testsAndConfigsOverride) {
        var _a;
        for (const [index, item] of testsAndConfigsOverride.entries()) {
            if ('test' in item && item.test.type === 'mobile' && !('errorMessage' in item)) {
                const appId = item.test.options.mobileApplication.applicationId;
                const userConfigOverride = (_a = triggerConfigs[index].testOverrides) !== null && _a !== void 0 ? _a : {};
                const appPath = userConfigOverride.mobileApplicationVersionFilePath;
                if (appPath && (!this.cache[appPath] || !this.cache[appPath][appId])) {
                    this.cache[appPath] = Object.assign(Object.assign({}, (this.cache[appPath] || {})), { [appId]: undefined });
                }
            }
        }
    }
    getAppsToUpload() {
        const appsToUpload = [];
        for (const appPath of Object.keys(this.cache)) {
            for (const appId of Object.keys(this.cache[appPath])) {
                appsToUpload.push({ appId, appPath });
            }
        }
        return appsToUpload;
    }
    getUploadedAppFileName(appPath, appId) {
        return this.cache[appPath][appId];
    }
    setUploadedAppFileName(appPath, appId, fileName, extractedMetadata) {
        this.cache[appPath][appId] = { fileName, extractedMetadata };
    }
}
exports.AppUploadCache = AppUploadCache;
const overrideMobileConfig = (overriddenTest, appId, tempFileName, mobileApplicationVersion, extractedMetadata) => {
    if (tempFileName) {
        overriddenTest.mobileApplication = {
            applicationId: appId,
            referenceId: tempFileName,
            referenceType: 'temporary',
        };
        overriddenTest.appExtractedMetadata = extractedMetadata;
    }
    else if (mobileApplicationVersion) {
        overriddenTest.mobileApplication = {
            applicationId: appId,
            referenceId: mobileApplicationVersion,
            referenceType: 'version',
        };
    }
};
exports.overrideMobileConfig = overrideMobileConfig;
const uploadMobileApplicationVersion = (config, appUploadReporter) => __awaiter(void 0, void 0, void 0, function* () {
    var _l;
    const api = (0, api_1.getApiHelper)(config);
    if (!config.mobileApplicationVersionFilePath) {
        throw new errors_1.CiError('MISSING_MOBILE_APPLICATION_PATH', 'Mobile application path is required.');
    }
    if (!config.mobileApplicationId) {
        throw new errors_1.CiError('MISSING_MOBILE_APPLICATION_ID', 'Mobile application id is required.');
    }
    if (!config.versionName) {
        throw new errors_1.CiError('MISSING_MOBILE_VERSION_NAME', 'Version name is required.');
    }
    config.latest = (_l = config.latest) !== null && _l !== void 0 ? _l : false;
    const newVersionParams = {
        originalFileName: config.mobileApplicationVersionFilePath,
        versionName: config.versionName,
        isLatest: config.latest,
    };
    const appRenderingInfo = {
        appId: config.mobileApplicationId,
        appPath: config.mobileApplicationVersionFilePath,
        versionName: config.versionName,
    };
    appUploadReporter.start([appRenderingInfo]);
    appUploadReporter.renderProgress(1);
    let appUploadResponse;
    try {
        ;
        ({ appUploadResponse } = yield (0, exports.uploadMobileApplication)(api, config.mobileApplicationVersionFilePath, config.mobileApplicationId, newVersionParams));
        appUploadReporter.reportSuccess();
    }
    catch (error) {
        appUploadReporter.reportFailure(appRenderingInfo);
        throw error;
    }
    return appUploadResponse;
});
exports.uploadMobileApplicationVersion = uploadMobileApplicationVersion;
const uploadMobileApplicationsAndUpdateOverrideConfigs = (api, triggerConfigs, testsAndConfigsOverride) => __awaiter(void 0, void 0, void 0, function* () {
    var _m, _o;
    if (!testsAndConfigsOverride.length) {
        return;
    }
    if (!triggerConfigs.filter((config) => { var _a; return (_a = config.testOverrides) === null || _a === void 0 ? void 0 : _a.mobileApplicationVersionFilePath; }).length) {
        return;
    }
    const appUploadCache = new AppUploadCache();
    const appUploadReporter = new app_upload_1.AppUploadReporter(process);
    appUploadCache.setAppCacheKeys(triggerConfigs, testsAndConfigsOverride);
    const appsToUpload = appUploadCache.getAppsToUpload();
    appUploadReporter.start(appsToUpload, true);
    for (const [index, item] of appsToUpload.entries()) {
        appUploadReporter.renderProgress(appsToUpload.length - index);
        try {
            const { appUploadResponse, fileName } = yield (0, exports.uploadMobileApplication)(api, item.appPath, item.appId);
            appUploadCache.setUploadedAppFileName(item.appPath, item.appId, fileName, (_m = appUploadResponse.valid_app_result) === null || _m === void 0 ? void 0 : _m.extracted_metadata);
        }
        catch (error) {
            appUploadReporter.reportFailure(item);
            throw error;
        }
    }
    appUploadReporter.reportSuccess();
    for (const [index, item] of testsAndConfigsOverride.entries()) {
        if ('test' in item) {
            const appId = item.test.options.mobileApplication.applicationId;
            const userConfigOverride = (_o = triggerConfigs[index].testOverrides) !== null && _o !== void 0 ? _o : {};
            const appPath = userConfigOverride.mobileApplicationVersionFilePath;
            const cacheEntry = appPath ? appUploadCache.getUploadedAppFileName(appPath, appId) : undefined;
            const fileName = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.fileName;
            const extractedMetadata = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.extractedMetadata;
            (0, exports.overrideMobileConfig)(item.overriddenConfig, appId, fileName, userConfigOverride.mobileApplicationVersion, extractedMetadata);
        }
    }
});
exports.uploadMobileApplicationsAndUpdateOverrideConfigs = uploadMobileApplicationsAndUpdateOverrideConfigs;
//# sourceMappingURL=mobile.js.map