import { APIHelper } from './api';
import { MobileAppExtractedMetadata, MobileAppUploadResult, MobileApplicationUploadPart, TestPayload, UploadApplicationCommandConfig, MobileApplicationNewVersionParams, TriggerConfig, AppUploadDetails, MobileTestWithOverride } from './interfaces';
import { AppUploadReporter } from './reporters/mobile/app-upload';
export declare const APP_UPLOAD_POLLING_INTERVAL = 1000;
export declare const MAX_APP_UPLOAD_POLLING_TIMEOUT: number;
export declare const getSizeAndPartsFromFile: (filePath: string) => Promise<{
    appSize: number;
    parts: MobileApplicationUploadPart[];
}>;
export declare const uploadMobileApplication: (api: APIHelper, applicationPathToUpload: string, applicationId: string, newVersionParams?: MobileApplicationNewVersionParams) => Promise<{
    appUploadResponse: MobileAppUploadResult;
    fileName: string;
}>;
type AppUploadCacheEntry = {
    fileName: string;
    extractedMetadata?: MobileAppExtractedMetadata;
};
export declare class AppUploadCache {
    private cache;
    setAppCacheKeys(triggerConfigs: TriggerConfig[], testsAndConfigsOverride: MobileTestWithOverride[]): void;
    getAppsToUpload(): AppUploadDetails[];
    getUploadedAppFileName(appPath: string, appId: string): AppUploadCacheEntry | undefined;
    setUploadedAppFileName(appPath: string, appId: string, fileName: string, extractedMetadata?: MobileAppExtractedMetadata): void;
}
export declare const overrideMobileConfig: (overriddenTest: TestPayload, appId: string, tempFileName?: string, mobileApplicationVersion?: string, extractedMetadata?: MobileAppExtractedMetadata) => void;
export declare const uploadMobileApplicationVersion: (config: UploadApplicationCommandConfig, appUploadReporter: AppUploadReporter) => Promise<MobileAppUploadResult>;
export declare const uploadMobileApplicationsAndUpdateOverrideConfigs: (api: APIHelper, triggerConfigs: TriggerConfig[], testsAndConfigsOverride: MobileTestWithOverride[]) => Promise<void>;
export {};
