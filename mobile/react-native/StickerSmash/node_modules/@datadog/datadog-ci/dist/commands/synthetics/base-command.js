"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCommand = void 0;
const clipanion_1 = require("clipanion");
const deep_extend_1 = __importDefault(require("deep-extend"));
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const logger_1 = require("../../helpers/logger");
const utils_1 = require("../../helpers/utils");
const errors_1 = require("./errors");
const default_1 = require("./reporters/default");
const public_1 = require("./utils/public");
const datadogDocsBaseUrl = 'https://docs.datadoghq.com';
const $1 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/account_management/api-app-keys`);
const $2 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/continuous_testing/cicd_integrations/configuration#global-configuration-file`);
const $3 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/getting_started/site/#access-the-datadog-site`);
class BaseCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.config = BaseCommand.getDefaultConfig();
        this.apiKey = clipanion_1.Option.String('--apiKey', {
            description: `Your Datadog API key. This key is ${$1 `created in your Datadog organization`} and should be stored as a secret.`,
        });
        this.appKey = clipanion_1.Option.String('--appKey', {
            description: `Your Datadog application key. This key is ${$1 `created in your Datadog organization`} and should be stored as a secret.`,
        });
        this.configPath = clipanion_1.Option.String('--config', {
            description: `The path to the ${$2 `global configuration file`} that configures datadog-ci.`,
        });
        this.datadogSite = clipanion_1.Option.String('--datadogSite', {
            description: `Your Datadog site. Possible values are listed ${$3 `in this table`}.`,
        });
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.fipsConfig = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
        this.logger = new logger_1.Logger((s) => {
            this.context.stdout.write(s);
        }, logger_1.LogLevel.INFO);
    }
    /** This method can be overloaded by the child class. Use `super.getDefaultConfig()` to add more config. */
    static getDefaultConfig() {
        return {
            apiKey: '',
            appKey: '',
            configPath: 'datadog-ci.json',
            datadogSite: 'datadoghq.com',
            proxy: { protocol: 'http' },
        };
    }
    setup() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.fipsConfig.fips, this.fipsIgnoreError || this.fipsConfig.fipsIgnoreError);
            // Bootstrap reporter
            this.reporter = (0, public_1.getReporter)([new default_1.DefaultReporter(this)]);
            // Load config
            yield this.resolveConfig();
            this.normalizeConfig();
            this.validateConfig();
            // Update reporter
            this.reporter = (0, public_1.getReporter)([new default_1.DefaultReporter(this), ...this.getReporters()]);
        });
    }
    resolveConfig() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            // Defaults < file < ENV < CLI
            // Override with config file variables (e.g. datadog-ci.json)
            try {
                // Override Config Path with ENV variables
                const overrideConfigPath = (_b = (_a = this.configPath) !== null && _a !== void 0 ? _a : process.env.DATADOG_SYNTHETICS_CONFIG_PATH) !== null && _b !== void 0 ? _b : 'datadog-ci.json';
                this.config = yield (0, utils_1.resolveConfigFromFile)(this.config, {
                    configPath: overrideConfigPath,
                    defaultConfigPaths: [this.config.configPath],
                });
            }
            catch (error) {
                if (this.configPath) {
                    throw new errors_1.CiError('INVALID_CONFIG', error.message);
                }
            }
            // Override with ENV variables
            this.config = (0, deep_extend_1.default)(this.config, (0, utils_1.recursivelyRemoveUndefinedValues)(this.resolveConfigFromEnv()));
            // Override with CLI parameters
            this.config = (0, deep_extend_1.default)(this.config, (0, utils_1.recursivelyRemoveUndefinedValues)(this.resolveConfigFromCli()));
        });
    }
    /** This method can be overloaded by the child class. Use `super.resolveConfigFromEnv()` to add more config. */
    resolveConfigFromEnv() {
        return {
            apiKey: process.env.DATADOG_API_KEY || process.env.DD_API_KEY,
            appKey: process.env.DATADOG_APP_KEY || process.env.DD_APP_KEY,
            configPath: process.env.DATADOG_SYNTHETICS_CONFIG_PATH,
            datadogSite: process.env.DATADOG_SITE || process.env.DD_SITE,
        };
    }
    /** This method can be overloaded by the child class. Use `super.resolveConfigFromCli()` to add more config. */
    resolveConfigFromCli() {
        return {
            apiKey: this.apiKey,
            appKey: this.appKey,
            configPath: this.configPath,
            datadogSite: this.datadogSite,
        };
    }
    /** This method can be overloaded by the child class. */
    normalizeConfig() { }
    /** This method can be overloaded by the child class. */
    validateConfig() { }
    /** This method can be overloaded by the child class. */
    getReporters() {
        return [];
    }
}
exports.BaseCommand = BaseCommand;
//# sourceMappingURL=base-command.js.map