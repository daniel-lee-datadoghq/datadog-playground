"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = exports.uploadCodeCoverageReport = exports.apiUrl = exports.intakeUrl = exports.datadogSite = void 0;
const fs_1 = __importDefault(require("fs"));
const zlib_1 = require("zlib");
const form_data_1 = __importDefault(require("form-data"));
const concurrency_1 = require("../../helpers/concurrency");
const utils_1 = require("../../helpers/utils");
// Dependency follows-redirects sets a default maxBodyLength of 10 MB https://github.com/follow-redirects/follow-redirects/blob/b774a77e582b97174813b3eaeb86931becba69db/index.js#L391
// We don't want any hard limit enforced by the CLI, the backend will enforce a max size by returning 413 errors.
const maxBodyLength = Infinity;
exports.datadogSite = process.env.DATADOG_SITE || process.env.DD_SITE || 'datadoghq.com';
exports.intakeUrl = `https://ci-intake.${exports.datadogSite}`;
exports.apiUrl = `https://api.${exports.datadogSite}`;
const uploadCodeCoverageReport = (request) => (payload) => __awaiter(void 0, void 0, void 0, function* () {
    const form = new form_data_1.default();
    const event = Object.assign(Object.assign(Object.assign({ type: 'coverage_report', '_dd.hostname': payload.hostname, format: payload.format, basepath: payload.basePath }, payload.spanTags), payload.customTags), payload.customMeasures);
    form.append('event', JSON.stringify(event), { filename: 'event.json' });
    if (payload.prDiff) {
        form.append('pr_diff', (0, zlib_1.gzipSync)(Buffer.from(JSON.stringify(payload.prDiff), 'utf8')), {
            filename: 'pr_diff.json.gz',
        });
    }
    if (payload.commitDiff) {
        form.append('commit_diff', (0, zlib_1.gzipSync)(Buffer.from(JSON.stringify(payload.commitDiff), 'utf8')), {
            filename: 'commit_diff.json.gz',
        });
    }
    yield (0, concurrency_1.doWithMaxConcurrency)(20, payload.paths, (path) => __awaiter(void 0, void 0, void 0, function* () {
        const gzip = fs_1.default.createReadStream(path).pipe((0, zlib_1.createGzip)());
        form.append('code_coverage_report_file', gzip, { filename: `${getReportFilename(path)}.gz` });
    }));
    return request({
        data: form,
        headers: form.getHeaders(),
        maxBodyLength,
        method: 'POST',
        url: 'api/v2/cicovreprt',
    });
});
exports.uploadCodeCoverageReport = uploadCodeCoverageReport;
const getReportFilename = (path) => {
    const filename = path.split('/').pop() || path;
    // Remove leading dot if it exists, as the backend does not accept filenames starting with a dot
    return filename.startsWith('.') ? filename.slice(1) : filename;
};
const apiConstructor = (baseIntakeUrl, apiKey) => {
    const requestIntake = (0, utils_1.getRequestBuilder)({ baseUrl: baseIntakeUrl, apiKey });
    return {
        uploadCodeCoverageReport: (0, exports.uploadCodeCoverageReport)(requestIntake),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map