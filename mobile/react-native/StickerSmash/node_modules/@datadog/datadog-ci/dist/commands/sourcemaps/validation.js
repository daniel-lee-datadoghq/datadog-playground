"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePayload = exports.InvalidPayload = void 0;
const validation_1 = require("../../helpers/validation");
const renderer_1 = require("./renderer");
const utils_1 = require("./utils");
class InvalidPayload extends Error {
    constructor(reason, message) {
        super(message);
        this.reason = reason;
    }
}
exports.InvalidPayload = InvalidPayload;
const validatePayload = (sourcemap, stdout) => {
    // Check existence of sourcemap file
    const sourcemapCheck = (0, validation_1.checkFile)(sourcemap.sourcemapPath);
    if (!sourcemapCheck.exists) {
        // This case should not happen as all collected sourcemaps should point to correct files
        throw new InvalidPayload('missing_sourcemap', `Skipping missing sourcemap (${sourcemap.sourcemapPath})`);
    }
    if (sourcemapCheck.empty) {
        throw new InvalidPayload('empty_sourcemap', `Skipping empty sourcemap (${sourcemap.sourcemapPath})`);
    }
    // Check existence of minified file
    const minifiedFileCheck = (0, validation_1.checkFile)(sourcemap.minifiedFilePath);
    if (!minifiedFileCheck.exists) {
        throw new InvalidPayload('missing_js', `Missing corresponding JS file for sourcemap (${sourcemap.minifiedFilePath})`);
    }
    if (minifiedFileCheck.empty) {
        throw new InvalidPayload('empty_js', `Skipping sourcemap (${sourcemap.sourcemapPath}) due to ${sourcemap.minifiedFilePath} being empty`);
    }
    // Check for --minified-path-prefix flag misuages.
    if (sourcemap.minifiedPathPrefix) {
        const repeated = (0, utils_1.extractRepeatedPath)(sourcemap.minifiedPathPrefix, sourcemap.relativePath);
        if (repeated) {
            stdout.write((0, renderer_1.renderMinifiedPathPrefixMisusage)(sourcemap, repeated));
        }
    }
};
exports.validatePayload = validatePayload;
//# sourceMappingURL=validation.js.map