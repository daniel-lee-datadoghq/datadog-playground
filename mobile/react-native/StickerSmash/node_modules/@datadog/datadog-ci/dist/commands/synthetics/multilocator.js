"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateLTDMultiLocators = void 0;
const promises_1 = require("fs/promises");
const ci_1 = require("../../helpers/ci");
const prompt_1 = require("../../helpers/prompt");
const local_test_definition_1 = require("./local-test-definition");
const constants_1 = require("./reporters/constants");
const test_1 = require("./test");
const internal_1 = require("./utils/internal");
const updateLTDMultiLocators = (reporter, config, results) => __awaiter(void 0, void 0, void 0, function* () {
    reporter.log('Checking for MultiLocator updates...\r'); // replaced by next log
    const multiLocatorMap = getMultiLocatorsFromResults(results);
    const hasMLUpdates = Object.values(multiLocatorMap).some((steps) => steps.some((ml) => ml !== undefined));
    if (!hasMLUpdates) {
        return reporter.log('No MultiLocator updates found. No changes will be made.\n');
    }
    if (!(0, ci_1.isInteractive)()) {
        return reporter.log('MultiLocator updates found, but cannot apply them in non-interactive mode.\n');
    }
    const userConfirmed = yield (0, prompt_1.requestConfirmation)('MultiLocator updates found. Do you want to apply them to your local test definition?', false);
    if (!userConfirmed) {
        return reporter.log('\nMultiLocator updates aborted by user.\n');
    }
    reporter.log('\nApplying MultiLocator updates...\n\n');
    const testConfigFromFile = {
        tests: yield (0, test_1.getTestConfigs)(config, reporter),
    };
    const testConfig = overwriteMultiLocatorsInTestConfig(multiLocatorMap, testConfigFromFile);
    try {
        yield (0, promises_1.writeFile)(config.files[0], JSON.stringify(testConfig, undefined, 2), 'utf8');
        reporter.log(`${constants_1.ICONS.SUCCESS} MultiLocator updates have been successfully applied in ${config.files[0]}\n`);
    }
    catch (error) {
        reporter.error(`${constants_1.ICONS.FAILED} Error writing to file: ${error}\n`);
    }
});
exports.updateLTDMultiLocators = updateLTDMultiLocators;
const getMultiLocatorsFromResults = (results) => {
    var _a;
    const multiLocatorMap = {};
    for (const result of results) {
        const publicId = result.test.public_id;
        if (publicId === undefined) {
            continue;
        }
        const stepMLUpdates = [];
        if ((0, internal_1.hasDefinedResult)(result) && result.result && (0, internal_1.isBrowserServerResult)(result.result)) {
            const steps = result.result.steps.slice(1); // Skip first step (navigation)
            for (const step of steps) {
                const multiLocator = (_a = step.element_updates) === null || _a === void 0 ? void 0 : _a.multi_locator;
                stepMLUpdates.push(multiLocator);
            }
        }
        if (stepMLUpdates.some((ml) => ml !== undefined)) {
            multiLocatorMap[publicId] = stepMLUpdates;
        }
    }
    return multiLocatorMap;
};
const overwriteMultiLocatorsInTestConfig = (multiLocatorMap, testConfigFromFile) => {
    for (const publicId of Object.keys(multiLocatorMap)) {
        const test = (0, local_test_definition_1.findUniqueLocalTestDefinition)(testConfigFromFile, publicId);
        if (test && test.localTestDefinition.steps) {
            const steps = test.localTestDefinition.steps;
            for (const [stepIndex, step] of steps.entries()) {
                const multiLocator = multiLocatorMap[publicId][stepIndex];
                if (multiLocator) {
                    if (!step.params.element) {
                        step.params.element = {};
                    }
                    step.params.element.multiLocator = multiLocator;
                }
            }
        }
    }
    return testConfigFromFile;
};
//# sourceMappingURL=multilocator.js.map