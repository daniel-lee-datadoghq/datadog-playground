"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderCommandInfo = exports.renderUpload = exports.renderDryRunUpload = exports.renderSuccessfulCommand = exports.renderSuccessfulGitDBSync = exports.renderSuccessfulUpload = exports.renderRetriedUpload = exports.renderFailedGitDBSync = exports.renderFailedUpload = exports.renderInvalidFile = void 0;
const chalk_1 = __importDefault(require("chalk"));
const upath_1 = __importDefault(require("upath"));
const utils_1 = require("./utils");
const ICONS = {
    FAILED: '❌',
    SUCCESS: '✅',
    WARNING: '⚠️',
};
const renderInvalidFile = (xmlPath, errorMessage) => {
    const jUnitXMLPath = `[${chalk_1.default.bold.dim(xmlPath)}]`;
    return chalk_1.default.red(`${ICONS.FAILED} Invalid jUnitXML file ${jUnitXMLPath}: ${errorMessage}\n`);
};
exports.renderInvalidFile = renderInvalidFile;
const renderFailedUpload = (payload, errorMessage) => {
    const jUnitXMLPath = `[${chalk_1.default.bold.dim(payload.xmlPath)}]`;
    return chalk_1.default.red(`${ICONS.FAILED} Failed upload jUnitXML for ${jUnitXMLPath}: ${errorMessage}\n`);
};
exports.renderFailedUpload = renderFailedUpload;
const renderFailedGitDBSync = (err) => {
    return chalk_1.default.red.bold(`${ICONS.FAILED} Could not sync git metadata: ${err}\n`);
};
exports.renderFailedGitDBSync = renderFailedGitDBSync;
const renderRetriedUpload = (payload, errorMessage, attempt) => {
    const jUnitXMLPath = `[${chalk_1.default.bold.dim(payload.xmlPath)}]`;
    return chalk_1.default.yellow(`[attempt ${attempt}] Retrying jUnitXML upload ${jUnitXMLPath}: ${errorMessage}\n`);
};
exports.renderRetriedUpload = renderRetriedUpload;
const renderSuccessfulUpload = (dryRun, fileCount, duration) => {
    return chalk_1.default.green(`${dryRun ? '[DRYRUN] ' : ''}${ICONS.SUCCESS} Uploaded ${fileCount} files in ${duration} seconds.`);
};
exports.renderSuccessfulUpload = renderSuccessfulUpload;
const renderSuccessfulGitDBSync = (dryRun, elapsed) => {
    return chalk_1.default.green(`${dryRun ? '[DRYRUN] ' : ''}${ICONS.SUCCESS} Synced git metadata in ${elapsed} seconds.`);
};
exports.renderSuccessfulGitDBSync = renderSuccessfulGitDBSync;
const renderSuccessfulCommand = (spanTags, service, env) => {
    let fullStr = '';
    fullStr += chalk_1.default.green('=================================================================================================\n');
    fullStr += chalk_1.default.green('* View detailed reports on Datadog (they can take a few minutes to become available)\n');
    const redirectTestCommitURL = (0, utils_1.getTestCommitRedirectURL)(spanTags, service, env);
    if (redirectTestCommitURL) {
        fullStr += chalk_1.default.green('* Commit report:\n');
        fullStr += chalk_1.default.green(`* ${redirectTestCommitURL}\n`);
    }
    const testRunsUrl = (0, utils_1.getTestRunsUrl)(spanTags);
    if (testRunsUrl) {
        fullStr += chalk_1.default.green('* Test runs report:\n');
        fullStr += chalk_1.default.green(`* ${testRunsUrl}\n`);
    }
    fullStr += chalk_1.default.green('=================================================================================================\n');
    return fullStr;
};
exports.renderSuccessfulCommand = renderSuccessfulCommand;
const renderDryRunUpload = (payload) => `[DRYRUN] ${(0, exports.renderUpload)(payload)}`;
exports.renderDryRunUpload = renderDryRunUpload;
const renderUpload = (payload) => `Uploading jUnit XML test report file in ${payload.xmlPath}`;
exports.renderUpload = renderUpload;
const renderCommandInfo = (basePaths, service, concurrency, dryRun) => {
    let fullStr = '';
    if (dryRun) {
        fullStr += chalk_1.default.yellow(`${ICONS.WARNING} DRY-RUN MODE ENABLED. WILL NOT UPLOAD JUNIT XML\n`);
    }
    fullStr += chalk_1.default.green(`Starting upload with concurrency ${concurrency}. \n`);
    if (basePaths.length === 1 && !!upath_1.default.extname(basePaths[0])) {
        fullStr += chalk_1.default.green(`Will upload jUnit XML file ${basePaths[0]}\n`);
    }
    else {
        fullStr += chalk_1.default.green(`Will look for jUnit XML files in ${basePaths.join(', ')}\n`);
    }
    if (service) {
        fullStr += chalk_1.default.green(`service: ${service}`);
    }
    return fullStr;
};
exports.renderCommandInfo = renderCommandInfo;
//# sourceMappingURL=renderer.js.map