"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = exports.sendDeploymentEvent = exports.apiUrl = exports.datadogSite = void 0;
const utils_1 = require("../../helpers/utils");
exports.datadogSite = process.env.DD_SITE || 'datadoghq.com';
exports.apiUrl = `https://api.${exports.datadogSite}`;
const sendDeploymentEvent = (request) => (deployment) => __awaiter(void 0, void 0, void 0, function* () {
    const attrs = {
        service: deployment.service,
        started_at: deployment.startedAt.getTime() * 1e6,
        finished_at: deployment.finishedAt.getTime() * 1e6, // ms to ns
    };
    if (deployment.env) {
        attrs.env = deployment.env;
    }
    if (deployment.version) {
        attrs.version = deployment.version;
    }
    if (deployment.git) {
        attrs.git = {
            repository_url: deployment.git.repoURL,
            commit_sha: deployment.git.commitSHA,
        };
    }
    if (deployment.team) {
        attrs.team = deployment.team;
    }
    if (deployment.customTags) {
        attrs.custom_tags = deployment.customTags;
    }
    return request({
        method: 'POST',
        url: 'api/v2/dora/deployment',
        data: {
            data: {
                attributes: attrs,
            },
        },
    });
});
exports.sendDeploymentEvent = sendDeploymentEvent;
const apiConstructor = (apiKey) => {
    const requestAPI = (0, utils_1.getRequestBuilder)({ baseUrl: exports.apiUrl, apiKey });
    return {
        sendDeploymentEvent: (0, exports.sendDeploymentEvent)(requestAPI),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map