import { CloudWatchLogsClient, OutputLogEvent } from '@aws-sdk/client-cloudwatch-logs';
import { FunctionConfiguration, LambdaClient } from '@aws-sdk/client-lambda';
import { Command } from 'clipanion';
export declare class LambdaFlareCommand extends Command {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private isDryRun;
    private withLogs;
    private functionName;
    private region;
    private caseId;
    private email;
    private start;
    private end;
    private apiKey?;
    private credentials?;
    private fips;
    private fipsIgnoreError;
    private config;
    /**
     * Entry point for the `lambda flare` command.
     * Gathers config, logs, tags, project files, and more from a
     * Lambda function and sends them to Datadog support.
     * @returns 0 if the command ran successfully, 1 otherwise.
     */
    execute(): Promise<0 | 1>;
}
/**
 * Summarizes the Lambda config as to not flood the terminal
 * @param config
 * @returns a summarized config
 */
export declare const summarizeConfig: (config: any) => any;
/**
 * Gets the LOG_STREAM_COUNT latest log stream names, sorted by last event time
 * @param cwlClient CloudWatch Logs client
 * @param logGroupName name of the log group
 * @param startMillis start time in milliseconds or undefined if no start time is specified
 * @param endMillis end time in milliseconds or undefined if no end time is specified
 * @returns an array of the last LOG_STREAM_COUNT log stream names or an empty array if no log streams are found
 * @throws Error if the log streams cannot be retrieved
 */
export declare const getLogStreamNames: (cwlClient: CloudWatchLogsClient, logGroupName: string, startMillis?: number, endMillis?: number) => Promise<string[]>;
/**
 * Gets the log events for a log stream
 * @param cwlClient
 * @param logGroupName
 * @param logStreamName
 * @param startMillis
 * @param endMillis
 * @returns the log events or an empty array if no log events are found
 * @throws Error if the log events cannot be retrieved
 */
export declare const getLogEvents: (cwlClient: CloudWatchLogsClient, logGroupName: string, logStreamName: string, startMillis?: number, endMillis?: number) => Promise<OutputLogEvent[]>;
/**
 * Gets all CloudWatch logs for a function
 * @param region
 * @param functionName
 * @param startMillis start time in milliseconds or undefined if no end time is specified
 * @param endMillis end time in milliseconds or undefined if no end time is specified
 * @returns a map of log stream names to log events or an empty map if no logs are found
 */
export declare const getAllLogs: (region: string, functionName: string, startMillis?: number, endMillis?: number) => Promise<Map<string, OutputLogEvent[]>>;
/**
 * Gets the tags for a function
 * @param lambdaClient
 * @param region
 * @param arn
 * @returns the tags or an empty object if no tags are found
 * @throws Error if the tags cannot be retrieved
 */
export declare const getTags: (lambdaClient: LambdaClient, region: string, arn: string) => Promise<Record<string, string>>;
/**
 * Generate unique file names
 * If the original file name is unique, keep it as is
 * Otherwise, replace separators in the file path with dashes
 * @param filePaths the list of file paths
 * @returns a mapping of file paths to new file names
 */
export declare const getUniqueFileNames: (filePaths: Set<string>) => Map<string, string>;
/**
 * Convert the log events to a CSV string
 * @param logEvents array of log events
 * @returns the CSV string
 */
export declare const convertToCSV: (logEvents: OutputLogEvent[]) => string;
/**
 * @param ms number of milliseconds to sleep
 */
export declare const sleep: (ms: number) => Promise<void>;
/**
 * Get the framework used based on the files in the directory
 * @returns the framework used or undefined if no framework is found
 */
export declare const getFramework: () => string;
/**
 * Generate the insights file
 * @param insightsFilePath path to the insights file
 * @param isDryRun whether or not this is a dry run
 * @param config Lambda function configuration
 */
export declare const generateInsightsFile: (insightsFilePath: string, isDryRun: boolean, config: FunctionConfiguration) => void;
