"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApiHelper = void 0;
const constants_1 = require("../../constants");
const app_1 = require("../../helpers/app");
const utils_1 = require("../../helpers/utils");
const constants_2 = require("./constants");
const maxBodyLength = Infinity;
/**
 * Get the function to upload our results to the intake.
 * @param apiKey
 */
const getApiHelper = (apiKey, appKey) => {
    /**
     * function used to marshall and send the data
     * @param request - the AXIOS element used to send the request
     */
    const uploadSBomPayload = (request) => (scaPayload) => __awaiter(void 0, void 0, void 0, function* () {
        // Make sure we follow the API signature
        const payload = {
            data: {
                type: 'scarequests',
                attributes: scaPayload,
            },
        };
        return request({
            data: JSON.stringify(payload),
            headers: {
                [constants_1.CONTENT_TYPE_HEADER]: constants_1.CONTENT_TYPE_VALUE_JSON,
                'DD-EVP-ORIGIN': 'datadog-ci',
                'DD-EVP-ORIGIN-VERSION': '0.0.1',
            },
            maxBodyLength,
            method: constants_1.METHOD_POST,
            url: constants_2.API_ENDPOINT,
        });
    });
    // Get the intake name
    const url = (0, app_1.getBaseUrl)();
    // Get the AXIOS request/response function
    const requestIntake = (0, utils_1.getRequestBuilder)({ baseUrl: url, apiKey, appKey });
    return uploadSBomPayload(requestIntake);
};
exports.getApiHelper = getApiHelper;
//# sourceMappingURL=api.js.map