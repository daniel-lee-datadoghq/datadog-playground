"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadMultipartHelper = exports.getUnityRequestBuilder = void 0;
const base_intake_url_1 = require("../../helpers/base-intake-url");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const getUnityRequestBuilder = (apiKey, cliVersion, site) => (0, utils_1.getRequestBuilder)({
    apiKey,
    baseUrl: (0, base_intake_url_1.getBaseSourcemapIntakeUrl)(site),
    headers: new Map([
        ['DD-EVP-ORIGIN', 'datadog-ci_unity-symbols'],
        ['DD-EVP-ORIGIN-VERSION', cliVersion],
    ]),
    overrideUrl: 'api/v2/srcmap',
});
exports.getUnityRequestBuilder = getUnityRequestBuilder;
// This function exists partially just to make mocking network calls easier.
const uploadMultipartHelper = (requestBuilder, payload, opts) => __awaiter(void 0, void 0, void 0, function* () { return (0, upload_1.upload)(requestBuilder)(payload, opts); });
exports.uploadMultipartHelper = uploadMultipartHelper;
//# sourceMappingURL=helpers.js.map