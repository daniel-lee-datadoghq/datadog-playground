import { Writable } from 'stream';
import { CloudWatchLogsClient } from '@aws-sdk/client-cloudwatch-logs';
import { LambdaClient, FunctionConfiguration as LFunctionConfiguration, UpdateFunctionConfigurationCommandInput, Runtime } from '@aws-sdk/client-lambda';
import { FromIniInit } from '@aws-sdk/credential-provider-ini';
import { AwsCredentialIdentity } from '@aws-sdk/types';
import { LayerKey } from '../constants';
import { FunctionConfiguration, InstrumentationSettings, InstrumentedConfigurationGroup } from '../interfaces';
/**
 * Returns an array of merged layer ARNs if given a Full Layer ARN,
 * if not, it justs returns the layer ARNs provided.
 *
 * @param fullLayerARN a complete layer ARN.
 * @param partialLayerARN a partial layer ARN.
 * @param layerARNs an array of layer ARNs.
 * @returns an array of layer ARNs.
 */
export declare const addLayerArn: (fullLayerArn: string | undefined, previousLayerName: string, layerARNs: string[]) => string[];
/**
 * Returns a coerced boolean given string booleans or booleans in
 * an spread array. Every other value will be ignored.
 *
 * @param fallback default value if none of the provided `values` comply.
 * @param values an spread array of string booleans or booleans.
 * @returns a coerced boolean.
 */
export declare const coerceBoolean: (fallback: boolean, ...values: any[]) => boolean;
/**
 * Returns an array of functions grouped by its region, it
 * throws an error if there are functions without a region.
 *
 * @param functions an array of strings comprised by
 * Functions ARNs, Partial ARNs, or Function Names.
 * @param defaultRegion a fallback region
 * @returns an array of functions grouped by region
 */
export declare const collectFunctionsByRegion: (functions: string[], defaultRegion: string | undefined) => {
    [key: string]: string[];
};
/**
 * Given a layer runtime, return its latest version.
 *
 * @param runtime the runtime of the layer.
 * @param region the region where the layer is stored.
 * @returns the latest version of the layer to find.
 */
export declare const findLatestLayerVersion: (layer: LayerKey, region: string) => Promise<number>;
export declare const getAWSFileCredentialsParams: (profile: string) => FromIniInit;
/**
 * Returns the loaded AWS Credentials from the given profile.
 *
 * Note: the AWS SDK loads credentials automatically in
 * node environments.
 *
 * @param {string} profile the AWS Credentials profile
 * @returns {AwsCredentialIdentity} credentials object.
 */
export declare const getAWSProfileCredentials: (profile: string) => Promise<AwsCredentialIdentity | undefined>;
export declare const getAWSCredentials: () => Promise<AwsCredentialIdentity | undefined>;
export declare const isMissingAnyDatadogApiKeyEnvVar: () => boolean;
export declare const isMissingDatadogEnvVars: () => boolean;
export declare const getAllLambdaFunctionConfigs: (lambdaClient: LambdaClient) => Promise<LFunctionConfiguration[]>;
export declare const checkRuntimeTypesAreUniform: (configList: FunctionConfiguration[]) => boolean;
/**
 * Given a Lambda instance and a regular expression,
 * returns all the Function Configurations that match.
 *
 * @param lambda an instance of Lambda from aws-sdk.
 * @param pattern a regular expression
 * @returns an array of Lambda FunctionConfiguration's that match the pattern above.
 */
export declare const getLambdaFunctionConfigsFromRegex: (lambdaClient: LambdaClient, pattern: string) => Promise<LFunctionConfiguration[]>;
/**
 * Given a Lambda instance and an array of Lambda names,
 * return all the Lambda Function Configurations.
 *
 * @param lambda an instance of Lambda from aws-sdk.
 * @param functionARNs an array of strings comprised by
 * Functions ARNs, Partial ARNs, or Function Names.
 * @returns an array of Lambda FunctionConfiguration's.
 */
export declare const getLambdaFunctionConfigs: (lambdaClient: LambdaClient, functionARNs: string[]) => Promise<LFunctionConfiguration[]>;
/**
 * Returns the correct ARN of a **Specific Runtime Layer** given its configuration, region,
 * and settings (optional).
 *
 * @param config a Lambda FunctionConfiguration.
 * @param layer a Lambda layer.
 * @param region a region where the layer is hosted.
 * @param settings instrumentation settings, mainly used to change the AWS account that contains the Layer.
 * @returns the ARN of a **Specific Runtime Layer** with the correct region, account, architecture, and name.
 */
export declare const getLayerArn: (config: LFunctionConfiguration, layer: LayerKey, region: string, settings?: InstrumentationSettings) => string;
export declare const getLayerNameWithVersion: (layerArn: string) => string | undefined;
export declare const getLayers: (config: LFunctionConfiguration) => string[];
/**
 * Call the aws-sdk Lambda api to get a Function given
 * an ARN and then return its Configuration.
 *
 * @param lambdaClient an instance of LambdaClient.
 * @param functionARN a string, can be Function ARN, Partial ARN, or a Function Name.
 * @returns the Lambda FunctionConfiguration of the given ARN.
 */
export declare const getLambdaFunctionConfig: (lambdaClient: LambdaClient, functionARN: string) => Promise<LFunctionConfiguration>;
/**
 * Given a Function ARN, return its region by splitting the string,
 * can return undefined if it doesn't exist.
 *
 * @param functionARN a string, can be Function ARN, Partial ARN, or a Function Name.
 * @returns the region of an ARN.
 */
export declare const getRegion: (functionARN: string) => string | undefined;
/**
 * Returns whether the runtime given is supported by the Datadog CI Lambda.
 *
 * @param runtime a string representing a Lambda FunctionConfiguration Runtime.
 * @returns if a runtime is supported.
 */
export declare const isSupportedRuntime: (runtime?: string) => runtime is Runtime;
export declare const isLayerRuntime: (runtime: string) => runtime is "dotnet6" | "dotnet8" | "java11" | "java17" | "java21" | "java8.al2" | "nodejs16.x" | "nodejs18.x" | "nodejs20.x" | "nodejs22.x" | "python3.10" | "python3.11" | "python3.12" | "python3.13" | "python3.8" | "python3.9" | "ruby3.2" | "ruby3.3" | "extension";
export declare const sentenceMatchesRegEx: (sentence: string, regex: RegExp) => RegExpMatchArray | null;
export declare const updateLambdaFunctionConfig: (lambdaClient: LambdaClient, cloudWatchLogsClient: CloudWatchLogsClient, config: FunctionConfiguration) => Promise<void>;
export declare const updateFunctionConfiguration: (client: LambdaClient, input: UpdateFunctionConfigurationCommandInput) => Promise<void>;
export declare const handleLambdaFunctionUpdates: (configGroups: InstrumentedConfigurationGroup[], stdout: Writable) => Promise<void>;
export declare const willUpdateFunctionConfigs: (configs: FunctionConfiguration[]) => boolean;
/**
 * Masks environment variables in a Lambda function configuration.
 * Makes a copy as to not modify the config in place.
 * @param config
 * @returns masked config
 */
export declare const maskConfig: (config: any) => any;
