import { DescribeStateMachineCommandOutput } from '@aws-sdk/client-sfn';
import { SFNClient } from '@aws-sdk/client-sfn/dist-types/SFNClient';
import { BaseContext } from 'clipanion';
export declare const displayChanges: (stepFunctionArn: string, context: BaseContext, commandName: string, dryRun: boolean, params: any, previousParams?: any) => void;
export declare const buildArn: (partition: string, service: string, region: string, accountId: string, resourceType: string, resourceId: string) => string;
export declare const buildLogGroupName: (stepFunctionName: string, env: string | undefined) => string;
export declare const buildSubscriptionFilterName: (stepFunctionName: string) => string;
export declare const isValidArn: (str: string) => boolean;
export declare const getStepFunctionLogGroupArn: (stepFunction: DescribeStateMachineCommandOutput) => string | undefined;
export declare const parseArn: (arn: string) => {
    partition: string;
    region: string;
    accountId: string;
    resourceName: string;
};
export declare const buildLogAccessPolicyName: (stepFunction: DescribeStateMachineCommandOutput) => string;
export declare const injectContextIntoTasks: (describeStateMachineCommandOutput: DescribeStateMachineCommandOutput, stepFunctionsClient: SFNClient, context: BaseContext, dryRun: boolean) => Promise<void>;
export type StateMachineDefinitionType = {
    Comment?: string;
    StartAt?: string;
    States?: StatesType;
};
export type StatesType = Record<string, StepType>;
export type StepType = {
    Type: string;
    Parameters?: ParametersType;
    Resource?: string;
    Next?: string;
    End?: boolean;
};
export type PayloadObject = {
    'Execution.$'?: any;
    Execution?: any;
    'State.$'?: any;
    State?: any;
    'StateMachine.$'?: any;
    StateMachine?: any;
};
export type ParametersType = {
    'Payload.$'?: string;
    Payload?: string | PayloadObject;
    FunctionName?: string;
    StateMachineArn?: string;
    TableName?: string;
    Input?: {
        'CONTEXT.$'?: string;
        CONTEXT?: string;
    };
};
export declare const injectContextForLambdaFunctions: (step: StepType, context: BaseContext, stepName: string) => boolean;
export declare const injectContextForStepFunctions: (step: StepType, context: BaseContext, stepName: string) => boolean;
