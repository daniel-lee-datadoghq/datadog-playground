import type { IContainer, IService, ServicesClient as IServicesClient } from './types';
import { Command } from 'clipanion';
export declare class InstrumentCommand extends Command {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private dryRun;
    private environment;
    private extraTags;
    private project;
    private services;
    private interactive;
    private region;
    private logLevel;
    private sourceCodeIntegration;
    private uploadGitMetadata;
    private tracing;
    private version;
    private llmobs;
    private healthCheckPort;
    private sidecarImage;
    private sidecarName;
    private sharedVolumeName;
    private sharedVolumePath;
    private logsPath;
    private sidecarCpus;
    private sidecarMemory;
    private fips;
    private fipsIgnoreError;
    private fipsConfig;
    execute(): Promise<0 | 1>;
    instrumentSidecar(project: string, services: string[], region: string, ddService: string | undefined): Promise<void>;
    instrumentService(client: IServicesClient, existingService: IService, serviceName: string, ddService: string): Promise<void>;
    createInstrumentedServiceConfig(service: IService, ddService: string): IService;
    buildSidecarContainer(existingSidecarContainer: IContainer | undefined, ddService: string): IContainer;
    private updateAppContainer;
}
