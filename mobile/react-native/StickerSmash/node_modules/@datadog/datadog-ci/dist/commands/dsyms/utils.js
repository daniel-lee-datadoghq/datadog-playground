"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluralize = exports.getBaseIntakeUrl = exports.executeLipo = exports.executeDwarfdump = exports.unzipArchiveToDirectory = exports.zipDirectoryToArchive = exports.deleteDirectory = exports.createUniqueTmpDirectory = exports.isZipFile = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const os_1 = require("os");
const upath_1 = __importDefault(require("upath"));
const utils_1 = require("../../helpers/utils");
const isZipFile = (filepath) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const stats = yield promises_1.default.stat(filepath);
        return stats.size !== 0 && upath_1.default.extname(filepath) === '.zip';
    }
    catch (error) {
        // Log to console "file exists yet empty" ?
        return false;
    }
});
exports.isZipFile = isZipFile;
const createUniqueTmpDirectory = () => __awaiter(void 0, void 0, void 0, function* () {
    const uniqueValue = Math.random() * Number.MAX_SAFE_INTEGER;
    const directoryPath = (0, utils_1.buildPath)((0, os_1.tmpdir)(), uniqueValue.toString());
    yield promises_1.default.mkdir(directoryPath, { recursive: true });
    return directoryPath;
});
exports.createUniqueTmpDirectory = createUniqueTmpDirectory;
const deleteDirectory = (directoryPath) => __awaiter(void 0, void 0, void 0, function* () {
    yield promises_1.default.rm(directoryPath, { recursive: true });
});
exports.deleteDirectory = deleteDirectory;
const zipDirectoryToArchive = (directoryPath, archivePath) => __awaiter(void 0, void 0, void 0, function* () {
    const cwd = upath_1.default.dirname(directoryPath);
    const directoryName = upath_1.default.basename(directoryPath);
    yield (0, utils_1.execute)(`zip -r '${archivePath}' '${directoryName}'`, cwd);
});
exports.zipDirectoryToArchive = zipDirectoryToArchive;
const unzipArchiveToDirectory = (archivePath, directoryPath) => __awaiter(void 0, void 0, void 0, function* () {
    yield promises_1.default.mkdir(directoryPath, { recursive: true });
    yield (0, utils_1.execute)(`unzip -o '${archivePath}' -d '${directoryPath}'`);
});
exports.unzipArchiveToDirectory = unzipArchiveToDirectory;
const executeDwarfdump = (dSYMPath) => __awaiter(void 0, void 0, void 0, function* () { return (0, utils_1.execute)(`dwarfdump --uuid '${dSYMPath}'`); });
exports.executeDwarfdump = executeDwarfdump;
const executeLipo = (objectPath, arch, newObjectPath) => __awaiter(void 0, void 0, void 0, function* () { return (0, utils_1.execute)(`lipo '${objectPath}' -thin ${arch} -output '${newObjectPath}'`); });
exports.executeLipo = executeLipo;
const getBaseIntakeUrl = (datadogSite) => {
    if (process.env.DATADOG_DSYM_INTAKE_URL) {
        return process.env.DATADOG_DSYM_INTAKE_URL;
    }
    else if (datadogSite) {
        return 'https://sourcemap-intake.' + datadogSite;
    }
    return 'https://sourcemap-intake.datadoghq.com';
};
exports.getBaseIntakeUrl = getBaseIntakeUrl;
const pluralize = (nb, singular, plural) => {
    if (nb >= 2) {
        return `${nb} ${plural}`;
    }
    return `${nb} ${singular}`;
};
exports.pluralize = pluralize;
//# sourceMappingURL=utils.js.map