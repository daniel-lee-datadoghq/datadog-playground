"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestConfirmation = exports.requestSite = exports.requestServiceName = exports.requestGCPRegion = exports.requestGCPProject = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const constants_1 = require("../../constants");
const checkboxPlusPrompt = require('inquirer-checkbox-plus-prompt');
inquirer_1.default.registerPrompt('checkbox-plus', checkboxPlusPrompt);
const requestGCPProject = () => __awaiter(void 0, void 0, void 0, function* () {
    const answer = yield inquirer_1.default.prompt({
        message: 'Enter GCP Project ID:',
        name: 'project',
        type: 'input',
        validate: (value) => {
            if (!value || value.trim().length === 0) {
                return 'Project ID is required.';
            }
            return true;
        },
    });
    return answer.project;
});
exports.requestGCPProject = requestGCPProject;
const requestGCPRegion = (defaultRegion) => __awaiter(void 0, void 0, void 0, function* () {
    const answer = yield inquirer_1.default.prompt({
        default: defaultRegion || 'us-central1',
        message: 'Enter GCP Region:',
        name: 'region',
        type: 'input',
        validate: (value) => {
            if (!value || value.trim().length === 0) {
                return 'Region is required.';
            }
            return true;
        },
    });
    return answer.region;
});
exports.requestGCPRegion = requestGCPRegion;
const requestServiceName = () => __awaiter(void 0, void 0, void 0, function* () {
    const answer = yield inquirer_1.default.prompt({
        message: 'Enter Cloud Run service name:',
        name: 'serviceName',
        type: 'input',
        validate: (value) => {
            if (!value || value.trim().length === 0) {
                return 'Service name is required.';
            }
            return true;
        },
    });
    return answer.serviceName;
});
exports.requestServiceName = requestServiceName;
const requestSite = () => __awaiter(void 0, void 0, void 0, function* () {
    const answer = yield inquirer_1.default.prompt({
        choices: constants_1.DATADOG_SITES,
        message: 'Select a Datadog Site:',
        name: 'site',
        type: 'list',
    });
    return answer.site;
});
exports.requestSite = requestSite;
const requestConfirmation = (message, defaultValue = true) => __awaiter(void 0, void 0, void 0, function* () {
    const confirmationAnswer = yield inquirer_1.default.prompt({
        message,
        name: 'confirmation',
        type: 'confirm',
        default: defaultValue,
    });
    return confirmationAnswer.confirmation !== false;
});
exports.requestConfirmation = requestConfirmation;
//# sourceMappingURL=prompt.js.map