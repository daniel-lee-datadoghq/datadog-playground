"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RN_SUPPORTED_PLATFORMS = exports.RNSourcemap = void 0;
const fs_1 = __importDefault(require("fs"));
class RNSourcemap {
    constructor(bundleName, sourcemapPath) {
        this.removeSourcesContentFromSourceMap = () => {
            const newSourcemapFilePath = `${this.sourcemapPath}.no-sources-content`;
            const data = fs_1.default.readFileSync(this.sourcemapPath, 'utf8');
            const sourcemap = JSON.parse(data);
            delete sourcemap.sourcesContent;
            fs_1.default.writeFileSync(newSourcemapFilePath, JSON.stringify(sourcemap), 'utf8');
            this.sourcemapPath = newSourcemapFilePath;
        };
        this.extractDebugId = (context) => {
            try {
                const data = fs_1.default.readFileSync(this.sourcemapPath, 'utf8');
                const sourcemap = JSON.parse(data);
                const debugId = sourcemap['debugId'];
                if (debugId) {
                    context.stdout.write(`Extracted Debug ID from sourcemap: ${debugId}\n`);
                    return debugId;
                }
                else {
                    context.stderr.write(`Debug ID not found in sourcemap\n`);
                }
            }
            catch (err) {
                const errorMsg = err instanceof Error ? err.message : String(err);
                context.stderr.write(`Cannot extract Debug ID from sourcemap: ${errorMsg}\n`);
            }
            return undefined;
        };
        this.bundleName = bundleName;
        this.sourcemapPath = sourcemapPath;
    }
    addRepositoryData(gitData) {
        this.gitData = gitData;
    }
    asMultipartPayload(cliVersion, service, version, projectPath, platform, build, context) {
        const content = new Map([
            [
                'event',
                this.getMetadataPayload(cliVersion, service, version, projectPath, platform, build, this.extractDebugId(context)),
            ],
            ['source_map', { type: 'file', path: this.sourcemapPath, options: { filename: 'source_map' } }],
        ]);
        if (this.gitData !== undefined && this.gitData.gitRepositoryPayload !== undefined) {
            content.set('repository', {
                type: 'string',
                options: {
                    contentType: 'application/json',
                    filename: 'repository',
                },
                value: this.gitData.gitRepositoryPayload,
            });
        }
        return {
            content,
        };
    }
    getMetadataPayload(cliVersion, service, version, projectPath, platform, build, debugId) {
        const metadata = {
            build_number: build,
            bundle_name: this.bundleName,
            cli_version: cliVersion,
            platform,
            project_path: projectPath,
            service,
            type: 'react_native_sourcemap',
            version,
            debug_id: debugId,
        };
        if (this.gitData !== undefined) {
            metadata.git_repository_url = this.gitData.gitRepositoryURL;
            metadata.git_commit_sha = this.gitData.gitCommitSha;
        }
        return {
            type: 'string',
            options: {
                contentType: 'application/json',
                filename: 'event',
            },
            value: JSON.stringify(metadata),
        };
    }
}
exports.RNSourcemap = RNSourcemap;
exports.RN_SUPPORTED_PLATFORMS = ['ios', 'android'];
//# sourceMappingURL=interfaces.js.map