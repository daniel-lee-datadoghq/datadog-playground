import type { PagedAsyncIterableIterator } from '@azure/core-paging';
import { Site } from '@azure/arm-appservice';
import { DefaultAzureCredential } from '@azure/identity';
import { Command } from 'clipanion';
import { AasConfigOptions } from './interfaces';
export declare const SIDECAR_CONTAINER_NAME = "datadog-sidecar";
export declare const SIDECAR_IMAGE = "index.docker.io/datadog/serverless-init:latest";
export declare const SIDECAR_PORT = "8126";
export declare const AAS_DD_SETTING_NAMES: readonly ["DD_API_KEY", "DD_SITE", "DD_AAS_INSTANCE_LOGGING_ENABLED", "DD_SERVICE", "DD_ENV", "DD_VERSION", "DD_SERVERLESS_LOG_PATH", "DD_DOTNET_TRACER_HOME", "DD_TRACE_LOG_DIRECTORY", "CORECLR_ENABLE_PROFILING", "CORECLR_PROFILER", "CORECLR_PROFILER_PATH", "DD_TAGS"];
/**
 * Maps Subscription ID to Resource Group to App Service names.
 */
export type AasBySubscriptionAndGroup = Record<string, Record<string, string[]>>;
export declare abstract class AasCommand extends Command {
    dryRun: boolean;
    private subscriptionId;
    private resourceGroup;
    private aasName;
    private resourceIds;
    private envVars;
    private configPath;
    private fips;
    private fipsIgnoreError;
    private fipsConfig;
    get dryRunPrefix(): string;
    get additionalConfig(): Partial<AasConfigOptions>;
    enableFips(): void;
    ensureConfig(): Promise<[AasBySubscriptionAndGroup, AasConfigOptions, string[]]>;
    ensureAzureAuth(cred: DefaultAzureCredential): Promise<boolean>;
    ensureLinux(site: Site): boolean;
}
export declare const parseEnvVars: (envVars: string[] | undefined) => Record<string, string>;
export declare const getEnvVars: (config: AasConfigOptions) => Record<string, string>;
export declare const isWindows: (site: Site) => boolean;
export declare const isDotnet: (site: Site) => boolean;
export declare const isLinuxContainer: (site: Site) => boolean;
export declare const collectAsyncIterator: <T>(it: PagedAsyncIterableIterator<T, T[], import("@azure/core-paging").PageSettings>) => Promise<T[]>;
/**
 * Formats an error (usually an Azure RestError) object into a string for display.
 */
export declare const formatError: (error: any) => string;
interface Resource {
    subscriptionId: string;
    resourceGroup: string;
    name: string;
}
export declare const parseResourceId: (resourceId: string) => Resource | undefined;
export {};
