"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = exports.evaluateGateRules = void 0;
const utils_1 = require("../../helpers/utils");
const evaluateGateRules = (request) => (evaluateRequest, write) => __awaiter(void 0, void 0, void 0, function* () {
    const payload = JSON.stringify({
        data: {
            id: evaluateRequest.requestId,
            type: 'gate_evaluation',
            attributes: {
                tags: evaluateRequest.spanTags,
                user_scope: evaluateRequest.userScope,
                start_time_ms: evaluateRequest.startTimeMs,
                options: {
                    no_wait: evaluateRequest.options.noWait,
                    dry_run: evaluateRequest.options.dryRun,
                    is_last_retry: evaluateRequest.options.isLastRetry,
                    pull_request_sha: evaluateRequest.options.pull_request_sha,
                },
            },
        },
    });
    return request({
        data: payload,
        headers: {
            'Content-Type': 'application/json',
        },
        method: 'POST',
        url: '/api/v2/quality-gates/evaluate',
    });
});
exports.evaluateGateRules = evaluateGateRules;
const apiConstructor = (baseIntakeUrl, apiKey, appKey) => {
    const serviceRequest = (0, utils_1.getRequestBuilder)({ baseUrl: baseIntakeUrl, apiKey, appKey });
    return {
        evaluateGateRules: (0, exports.evaluateGateRules)(serviceRequest),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map