import { Command } from 'clipanion';
export declare class UploadCommand extends Command {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private basePath;
    private configPath;
    private dryRun;
    private maxConcurrency;
    private cliVersion;
    private fips;
    private fipsIgnoreError;
    private fipsConfig;
    private config;
    execute(): Promise<0 | 1>;
    private loadConfig;
    private createServices;
    private processAndUploadDsyms;
    private prepareSearchDirectory;
    private findDsyms;
    /**
     * Parses the output of `dwarfdump --uuid` command (ref.: https://www.unix.com/man-page/osx/1/dwarfdump/).
     * It returns one or many DWARF UUID and arch read from the output.
     *
     * Example `dwarfdump --uuid` output:
     * ```
     * $ dwarfdump --uuid DDTest.framework.dSYM
     * UUID: C8469F85-B060-3085-B69D-E46C645560EA (armv7) DDTest.framework.dSYM/Contents/Resources/DWARF/DDTest
     * UUID: 06EE3D68-D605-3E92-B92D-2F48C02A505E (arm64) DDTest.framework.dSYM/Contents/Resources/DWARF/DDTest
     * ```
     */
    private parseDwarfdumpOutput;
    /**
     * It takes `N` dSYMs and returns `N` or more dSYMs. If a dSYM includes more than one arch slice,
     * it will be thinned by extracting each arch to a new dSYM in `output`.
     */
    private processDsyms;
    /**
     * It takes fat dSYM as input and returns multiple dSYMs by extracting **each arch**
     * to separate dSYM file. New files are saved to `output` and named by their object uuid (`<uuid>.dSYM`).
     *
     * For example, given `<source path>/Foo.dSYM/Contents/Resources/DWARF/Foo` dSYM with two arch slices: `arm64` (uuid1)
     * and `x86_64` (uuid2), it will:
     * - create `<intermediate path>/<uuid1>.dSYM/Contents/Resources/DWARF/Foo` for `arm64`,
     * - create `<intermediate path>/<uuid2>.dSYM/Contents/Resources/DWARF/Foo` for `x86_64`.
     */
    private thinDsym;
    private copyInfoPlist;
    private compressDsyms;
    private createRequestBuilder;
    private createUploadFunction;
}
