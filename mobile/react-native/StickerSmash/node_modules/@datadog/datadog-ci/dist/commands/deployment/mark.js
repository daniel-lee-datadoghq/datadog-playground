"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentMarkCommand = void 0;
const clipanion_1 = require("clipanion");
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const tag_1 = require("../tag/tag");
const constants_2 = require("./constants");
/**
 * This command is a wrapper around the datadog-ci tag command, allowing customers to mark CI jobs
 * as deployments and setting specific properties, like the environment or the revision in a simple way.
 */
class DeploymentMarkCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.noFail = clipanion_1.Option.Boolean('--no-fail', false);
        this.isRollback = clipanion_1.Option.Boolean('--is-rollback', false);
        this.env = clipanion_1.Option.String('--env', {
            description: 'Example: prod',
        });
        this.revision = clipanion_1.Option.String('--revision', {
            description: 'Example: 1.0.0',
        });
        this.service = clipanion_1.Option.String('--service', {
            description: 'Example: payment-service',
        });
        this.tags = clipanion_1.Option.Array('--tags');
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.config = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.config.fips, this.fipsIgnoreError || this.config.fipsIgnoreError);
            const tagJobCommand = new tag_1.TagCommand();
            tagJobCommand.setLevel('job');
            tagJobCommand.setTags(this.createJobDeploymentTags());
            tagJobCommand.context = this.context;
            tagJobCommand.setSilent(false);
            const tagPipelineCommand = new tag_1.TagCommand();
            tagPipelineCommand.setLevel('pipeline');
            tagPipelineCommand.setTags(this.createPipelineDeploymentTags());
            tagPipelineCommand.context = this.context;
            tagPipelineCommand.setSilent(true);
            if (this.noFail) {
                tagJobCommand.setNoFail(true);
                tagPipelineCommand.setNoFail(true);
            }
            const tagJobCommandExitCode = yield tagJobCommand.execute();
            if (tagJobCommandExitCode === 0) {
                return tagPipelineCommand.execute();
            }
            else {
                return tagJobCommandExitCode;
            }
        });
    }
    createJobDeploymentTags() {
        const tags = [constants_2.IS_DEPLOYMENT_TAG];
        if (this.env) {
            tags.push(constants_2.ENV_TAG + this.env);
        }
        if (this.revision) {
            tags.push(constants_2.REVISION_TAG + this.revision);
        }
        if (this.service) {
            tags.push(constants_2.SERVICE_TAG + this.service);
        }
        if (this.isRollback) {
            tags.push(constants_2.IS_ROLLBACK_TAG);
        }
        if (this.tags) {
            tags.push(constants_2.CUSTOM_TAGS_TAG + this.tags.join(','));
        }
        return tags;
    }
    createPipelineDeploymentTags() {
        return [constants_2.CONTAINS_DEPLOYMENT_TAG];
    }
}
exports.DeploymentMarkCommand = DeploymentMarkCommand;
DeploymentMarkCommand.paths = [['deployment', 'mark']];
DeploymentMarkCommand.usage = clipanion_1.Command.Usage({
    category: 'CI Visibility',
    description: 'Mark a CI job as a deployment.',
    details: `
      This command will mark a CI job as a deployment.\n
      See README for details.
    `,
    examples: [
        ['Mark a CI job as a deployment', 'datadog-ci deployment mark'],
        ['Mark a CI job as a deployment to the staging environment', 'datadog-ci deployment mark --env:staging'],
        ['Mark a CI job as a rollback deployment', 'datadog-ci deployment mark --is-rollback'],
        ['Mark a CI job as a deployment of the v123-456 version', 'datadog-ci deployment mark --revision:v123-456'],
        [
            'Mark a CI job as a deployment for service payment-service',
            'datadog-ci deployment mark --service:payment-service',
        ],
    ],
});
//# sourceMappingURL=mark.js.map