"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderUpload = exports.renderRetriedUpload = exports.renderFailedUpload = exports.renderGeneralizedError = exports.renderMissingAndroidMappingFile = exports.renderInvalidSymbolsDir = exports.renderMissingDartSymbolsDir = exports.renderVersionBuildNumberWarning = exports.renderVersionNotSemver = exports.renderPubspecMissingVersionError = exports.renderInvalidPubspecError = exports.renderMissingPubspecError = exports.renderMinifiedPathPrefixRequired = exports.renderArgumentMissingError = exports.renderGitWarning = exports.renderCommandSummary = exports.renderCommandInfo = void 0;
const chalk_1 = __importDefault(require("chalk"));
const formatting_1 = require("../../helpers/formatting");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const renderCommandInfo = (dryRun, version, service, flavor, uploadInfo) => {
    let fullString = '';
    if (dryRun) {
        fullString += chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} DRY-RUN MODE ENABLED. WILL NOT UPLOAD SOURCEMAPS\n`);
    }
    const startStr = chalk_1.default.green('Starting upload. \n');
    fullString += startStr;
    uploadInfo.forEach((ui) => {
        fullString += chalk_1.default.green(`Uploading ${ui.platform} ${ui.fileType} at location ${ui.location}\n`);
    });
    const serviceVersionProjectPathStr = chalk_1.default.green(`  version: ${version} service: ${service} flavor: ${flavor}\n`);
    fullString += serviceVersionProjectPathStr;
    fullString += chalk_1.default.green(`Please ensure you use the same values during SDK initialization to guarantee the success of the symbolication process.\n`);
    fullString += chalk_1.default.green(`After upload is successful symbol files will be processed and ready to use within the next 5 minutes.\n`);
    return fullString;
};
exports.renderCommandInfo = renderCommandInfo;
const renderCommandSummary = (statuses, duration, dryRun) => {
    const results = new Map();
    statuses.forEach((status) => {
        if (!results.has(status)) {
            results.set(status, 0);
        }
        results.set(status, results.get(status) + 1);
    });
    const output = ['', chalk_1.default.bold('Command summary:')];
    if (results.get(upload_1.UploadStatus.Failure)) {
        output.push(chalk_1.default.red(`${formatting_1.ICONS.FAILED} Some symbol files may not been uploaded correctly.`));
    }
    else if (results.get(upload_1.UploadStatus.Skipped)) {
        output.push(chalk_1.default.yellow(`${formatting_1.ICONS.WARNING}  Some symbol files have been skipped.`));
    }
    else if (results.get(upload_1.UploadStatus.Success)) {
        if (dryRun) {
            output.push(chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} [DRYRUN] Handled symbol ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'file', 'files')} with success in ${duration} seconds.`));
        }
        else {
            output.push(chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} Uploaded symbol ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'file', 'files')} in ${duration} seconds.`));
        }
    }
    else {
        output.push(chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} No actions were taken. Did you specify the correct path?`));
    }
    return output.join('\n') + '\n';
};
exports.renderCommandSummary = renderCommandSummary;
const renderGitWarning = (errorMessage) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} An error occured while invoking git: ${errorMessage}
Make sure the command is running within your git repository to fully leverage Datadog's git integration.
To ignore this warning use the --disable-git flag.\n`);
exports.renderGitWarning = renderGitWarning;
const renderArgumentMissingError = (argumentName) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Error: parameter "${argumentName}" is required.\n`);
exports.renderArgumentMissingError = renderArgumentMissingError;
const renderMinifiedPathPrefixRequired = () => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Error: --minified-path-prefix is required when using --web-sourcemaps`);
exports.renderMinifiedPathPrefixRequired = renderMinifiedPathPrefixRequired;
const renderMissingPubspecError = (pubspecLocation) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Could not find pubspec at '${pubspecLocation}'. A pubspec.yaml is required or the --version argument must be specified.\n`);
exports.renderMissingPubspecError = renderMissingPubspecError;
const renderInvalidPubspecError = (pubspecLocation) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Could not parse pubspec at '${pubspecLocation}'. Check your pubspec for errors.\n`);
exports.renderInvalidPubspecError = renderInvalidPubspecError;
const renderPubspecMissingVersionError = (pubspecLocation) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} pubspec at '${pubspecLocation}' does not contain a version. Supply a version in the pubspec or use the --version argument.\n`);
exports.renderPubspecMissingVersionError = renderPubspecMissingVersionError;
const renderVersionNotSemver = (pubspecLocation, versionNumber) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} Could not parse the version specified in ${pubspecLocation} as a Semantic Version. Version is: "${versionNumber}"`);
exports.renderVersionNotSemver = renderVersionNotSemver;
const renderVersionBuildNumberWarning = (pubspecLocation) => {
    let str = chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} Your pubspec at '${pubspecLocation}' specifies a build (a value after a '+') or pre-release (a value after a '-').\n`);
    str += chalk_1.default.yellow('The Datadog Flutter SDK does not send these by default, so they are removed by the datadog-ci tool.\n');
    str += '\n';
    str +=
        'If you need to include build or pre-release data in your version number, please use --version and specify a custom version during configuration of the Flutter SDK.';
    return str;
};
exports.renderVersionBuildNumberWarning = renderVersionBuildNumberWarning;
const renderMissingDartSymbolsDir = (symbolsDirectory) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Error: Could not locate Dart Symbols at ${symbolsDirectory}.\n`);
exports.renderMissingDartSymbolsDir = renderMissingDartSymbolsDir;
const renderInvalidSymbolsDir = (symbolsDirectory) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Failed to get symbols files - ${symbolsDirectory} is not a directory.\n`);
exports.renderInvalidSymbolsDir = renderInvalidSymbolsDir;
const renderMissingAndroidMappingFile = (mappingLocation) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Error: Could not locate Android Mapping file at ${mappingLocation}.\n`);
exports.renderMissingAndroidMappingFile = renderMissingAndroidMappingFile;
const renderGeneralizedError = (error) => {
    let str = chalk_1.default.red(`${formatting_1.ICONS.FAILED} Error: ${error}\n`);
    str += error.stack;
    return str;
};
exports.renderGeneralizedError = renderGeneralizedError;
const renderFailedUpload = (filePath, errorMessage) => {
    const filePathBold = `[${chalk_1.default.bold.dim(filePath)}]`;
    return chalk_1.default.red(`${formatting_1.ICONS.FAILED} Failed upload for ${filePathBold}: ${errorMessage}\n`);
};
exports.renderFailedUpload = renderFailedUpload;
const renderRetriedUpload = (filePath, errorMessage, attempt) => {
    const sourcemapPathBold = `[${chalk_1.default.bold.dim(filePath)}]`;
    return chalk_1.default.yellow(`[attempt ${attempt}] Retrying upload ${sourcemapPathBold}: ${errorMessage}\n`);
};
exports.renderRetriedUpload = renderRetriedUpload;
const renderUpload = (type, filePath) => `Uploading ${type} ${filePath}\n`;
exports.renderUpload = renderUpload;
//# sourceMappingURL=renderer.js.map