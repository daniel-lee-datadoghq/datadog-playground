"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const constants_1 = require("../../constants");
const apikey_1 = require("../../helpers/apikey");
const base_intake_url_1 = require("../../helpers/base-intake-url");
const concurrency_1 = require("../../helpers/concurrency");
const env_1 = require("../../helpers/env");
const errors_1 = require("../../helpers/errors");
const fips_1 = require("../../helpers/fips");
const format_git_sourcemaps_data_1 = require("../../helpers/git/format-git-sourcemaps-data");
const metrics_1 = require("../../helpers/metrics");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("../../helpers/utils");
const validation = __importStar(require("../../helpers/validation"));
const validation_1 = require("../../helpers/validation");
const version_1 = require("../../helpers/version");
const interfaces_1 = require("./interfaces");
const renderer_1 = require("./renderer");
const utils_2 = require("./utils");
const validation_2 = require("./validation");
class UploadCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.buildVersion = clipanion_1.Option.String('--build-version');
        this.bundle = clipanion_1.Option.String('--bundle');
        this.configPath = clipanion_1.Option.String('--config');
        this.disableGit = clipanion_1.Option.Boolean('--disable-git');
        this.dryRun = clipanion_1.Option.Boolean('--dry-run', false);
        this.maxConcurrency = clipanion_1.Option.String('--max-concurrency', '20', { validator: validation.isInteger() });
        this.platform = clipanion_1.Option.String('--platform');
        this.projectPath = clipanion_1.Option.String('--project-path', process.cwd() || '');
        this.releaseVersion = clipanion_1.Option.String('--release-version');
        this.removeSourcesContent = clipanion_1.Option.Boolean('--remove-sources-content', false);
        this.repositoryURL = clipanion_1.Option.String('--repository-url');
        this.service = clipanion_1.Option.String('--service');
        this.sourcemap = clipanion_1.Option.String('--sourcemap');
        this.cliVersion = version_1.version;
        this.config = {
            datadogSite: 'datadoghq.com',
        };
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.fipsConfig = {
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
        // Fills the 'repository' field of each payload with data gathered using git.
        this.addRepositoryDataToPayloads = (payloads) => __awaiter(this, void 0, void 0, function* () {
            try {
                const repositoryData = yield (0, format_git_sourcemaps_data_1.getRepositoryData)(yield (0, format_git_sourcemaps_data_1.newSimpleGit)(), this.repositoryURL);
                payloads.forEach((payload) => {
                    const repositoryPayload = this.getRepositoryPayload(repositoryData, payload.sourcemapPath);
                    payload.addRepositoryData({
                        gitCommitSha: repositoryData.hash,
                        gitRepositoryPayload: repositoryPayload,
                        gitRepositoryURL: repositoryData.remote,
                    });
                });
            }
            catch (e) {
                this.context.stdout.write((0, renderer_1.renderGitWarning)(e));
            }
        });
        // Looks for the sourcemaps on disk and returns the associated payloads.
        this.getMatchingRNSourcemapFiles = (bundleName) => [
            new interfaces_1.RNSourcemap(bundleName, this.sourcemap),
        ];
        this.getPayloadsToUpload = (useGit, bundleName) => __awaiter(this, void 0, void 0, function* () {
            const payloads = this.getMatchingRNSourcemapFiles(bundleName);
            if (!useGit) {
                return payloads;
            }
            yield this.addRepositoryDataToPayloads(payloads);
            return payloads;
        });
        // GetRepositoryPayload generates the repository payload for a specific sourcemap.
        // It specifically looks for the list of tracked files that are associated to the source paths
        // declared inside the sourcemap.
        this.getRepositoryPayload = (repositoryData, sourcemapPath) => {
            const onSourcesNotFound = () => {
                this.context.stdout.write((0, renderer_1.renderSourcesNotFoundWarning)(sourcemapPath));
            };
            let repositoryPayload;
            try {
                const files = repositoryData.trackedFilesMatcher.matchSourcemap(sourcemapPath, onSourcesNotFound);
                if (files) {
                    repositoryPayload = JSON.stringify({
                        data: [
                            {
                                files,
                                hash: repositoryData.hash,
                                repository_url: repositoryData.remote,
                            },
                        ],
                        // Make sure to update the version if the format of the JSON payloads changes in any way.
                        version: 1,
                    });
                }
                return repositoryPayload;
            }
            catch (error) {
                this.context.stdout.write((0, renderer_1.renderGitDataNotAttachedWarning)(sourcemapPath, error.message));
                return undefined;
            }
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.fipsConfig.fips, this.fipsIgnoreError || this.fipsConfig.fipsIgnoreError);
            if (!this.releaseVersion) {
                this.context.stderr.write('Missing release version\n');
                return 1;
            }
            if (!this.buildVersion) {
                this.context.stderr.write('Missing build version\n');
                return 1;
            }
            if (!this.service) {
                this.context.stderr.write('Missing service\n');
                return 1;
            }
            if (!this.platform) {
                this.context.stderr.write('Missing platform\n');
                return 1;
            }
            if (!interfaces_1.RN_SUPPORTED_PLATFORMS.includes(this.platform)) {
                this.context.stderr.write(`Platform ${this.platform} is not supported.\nSupported platforms are ios and android.\n`);
                return 1;
            }
            if (!this.sourcemap) {
                this.context.stderr.write('Missing sourcemap file path\n');
                return 1;
            }
            const bundleName = (0, utils_2.getBundleName)(this.bundle, this.platform);
            this.context.stdout.write((0, renderer_1.renderCommandInfo)(this.bundle, this.sourcemap, this.platform, this.releaseVersion, this.service, this.maxConcurrency, this.dryRun, this.projectPath, this.buildVersion, bundleName));
            this.config = yield (0, utils_1.resolveConfigFromFileAndEnvironment)(this.config, {
                apiKey: process.env.DATADOG_API_KEY || process.env.DD_API_KEY,
                datadogSite: process.env.DATADOG_SITE || process.env.DD_SITE,
            }, {
                configPath: this.configPath,
                defaultConfigPaths: ['datadog-ci.json', '../datadog-ci.json'],
                configFromFileCallback: (configFromFile) => {
                    (0, validation_1.checkAPIKeyOverride)(process.env.DATADOG_API_KEY || process.env.DD_API_KEY, configFromFile.apiKey, this.context.stdout);
                },
            });
            const metricsLogger = (0, metrics_1.getMetricsLogger)({
                apiKey: this.config.apiKey,
                datadogSite: this.config.datadogSite,
                defaultTags: [
                    `version:${this.releaseVersion}`,
                    `build:${this.buildVersion}`,
                    `service:${this.service}`,
                    `cli_version:${this.cliVersion}`,
                    'react-native:true',
                    `platform:${this.platform}`,
                ],
                prefix: 'datadog.ci.sourcemaps.upload.',
            });
            const apiKeyValidator = (0, apikey_1.newApiKeyValidator)({
                apiKey: this.config.apiKey,
                datadogSite: this.config.datadogSite,
                metricsLogger: metricsLogger.logger,
            });
            const useGit = this.disableGit === undefined || !this.disableGit;
            const initialTime = Date.now();
            const payloads = yield this.getPayloadsToUpload(useGit, bundleName);
            const requestBuilder = this.getRequestBuilder();
            const uploadMultipart = this.upload(requestBuilder, metricsLogger, apiKeyValidator);
            try {
                const results = yield (0, concurrency_1.doWithMaxConcurrency)(this.maxConcurrency, payloads, uploadMultipart);
                const totalTime = (Date.now() - initialTime) / 1000;
                this.context.stdout.write((0, renderer_1.renderSuccessfulCommand)(results, totalTime, this.dryRun));
                metricsLogger.logger.gauge('duration', totalTime);
                return results.some((result) => result !== upload_1.UploadStatus.Success) ? 1 : 0;
            }
            catch (error) {
                if (error instanceof errors_1.InvalidConfigurationError) {
                    this.context.stdout.write((0, renderer_1.renderConfigurationError)(error));
                    return 1;
                }
                // Otherwise unknown error, let's propagate the exception
                throw error;
            }
            finally {
                try {
                    yield metricsLogger.flush();
                }
                catch (err) {
                    this.context.stdout.write(`WARN: ${err}\n`);
                }
            }
        });
    }
    getRequestBuilder() {
        if (!this.config.apiKey) {
            throw new errors_1.InvalidConfigurationError(`Missing ${chalk_1.default.bold('DATADOG_API_KEY')} or ${chalk_1.default.bold('DD_API_KEY')} in your environment.`);
        }
        return (0, utils_1.getRequestBuilder)({
            apiKey: this.config.apiKey,
            baseUrl: (0, base_intake_url_1.getBaseSourcemapIntakeUrl)(this.config.datadogSite),
            headers: new Map([
                ['DD-EVP-ORIGIN', 'datadog-ci_react-native'],
                ['DD-EVP-ORIGIN-VERSION', this.cliVersion],
            ]),
            overrideUrl: 'api/v2/srcmap',
        });
    }
    upload(requestBuilder, metricsLogger, apiKeyValidator) {
        return (sourcemap) => __awaiter(this, void 0, void 0, function* () {
            try {
                (0, validation_2.validatePayload)(sourcemap);
            }
            catch (error) {
                if (error instanceof validation_2.InvalidPayload) {
                    this.context.stdout.write((0, renderer_1.renderFailedUpload)(sourcemap, error.message));
                    metricsLogger.logger.increment('skipped_sourcemap', 1, [`reason:${error.reason}`]);
                }
                else {
                    this.context.stdout.write((0, renderer_1.renderFailedUpload)(sourcemap, `Skipping sourcemap ${sourcemap.sourcemapPath} because of error: ${error.message}`));
                    metricsLogger.logger.increment('skipped_sourcemap', 1, ['reason:unknown']);
                }
                return upload_1.UploadStatus.Skipped;
            }
            if (this.removeSourcesContent) {
                try {
                    this.context.stdout.write((0, renderer_1.renderRemoveSourcesContentWarning)());
                    sourcemap.removeSourcesContentFromSourceMap();
                }
                catch (error) {
                    this.context.stdout.write((0, renderer_1.renderFailedSourcesContentRemovalError)(sourcemap, error.message));
                }
            }
            const payload = sourcemap.asMultipartPayload(this.cliVersion, this.service, this.releaseVersion, this.projectPath, this.platform, this.buildVersion, this.context);
            if (this.dryRun) {
                this.context.stdout.write(`[DRYRUN] ${(0, renderer_1.renderUpload)(sourcemap)}`);
                return upload_1.UploadStatus.Success;
            }
            return (0, upload_1.upload)(requestBuilder)(payload, {
                apiKeyValidator,
                onError: (e) => {
                    this.context.stdout.write((0, renderer_1.renderFailedUpload)(sourcemap, e.message));
                    metricsLogger.logger.increment('failed', 1);
                },
                onRetry: (e, attempts) => {
                    this.context.stdout.write((0, renderer_1.renderRetriedUpload)(sourcemap, e.message, attempts));
                    metricsLogger.logger.increment('retries', 1);
                },
                onUpload: () => {
                    this.context.stdout.write((0, renderer_1.renderUpload)(sourcemap));
                },
                retries: 5,
                useGzip: true,
            });
        });
    }
}
exports.UploadCommand = UploadCommand;
UploadCommand.paths = [['react-native', 'upload']];
UploadCommand.usage = clipanion_1.Command.Usage({
    category: 'RUM',
    description: 'Upload React Native sourcemaps to Datadog.',
    details: `
      This command will upload React Native sourcemaps and their corresponding JavaScript bundle to Datadog in order to un-minify front-end stack traces received by Datadog.\n
      See README for details.
    `,
    examples: [
        [
            'Upload ios sourcemaps',
            'datadog-ci react-native upload --platform ios --service com.company.app --bundle ./main.jsbundle --sourcemap ./main.jsbundle.map --release-version 1.23.4 --build-version 1234',
        ],
        [
            'Upload android sourcemaps',
            'datadog-ci react-native upload --platform android --service com.company.app --bundle ./index.android.bundle --sourcemap ./index.android.bundle.map --release-version 1.23.4 --build-version 1234',
        ],
    ],
});
//# sourceMappingURL=upload.js.map