"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanCommand = void 0;
const clipanion_1 = require("clipanion");
const validation = __importStar(require("../../helpers/validation"));
const helper_1 = require("../trace/helper");
class SpanCommand extends helper_1.CustomSpanCommand {
    constructor() {
        super(...arguments);
        this.name = clipanion_1.Option.String('--name');
        this.durationInMs = clipanion_1.Option.String('--duration', {
            validator: validation.isInteger(),
        });
        this.startTimeInMs = clipanion_1.Option.String('--start-time', {
            validator: validation.isInteger(),
        });
        this.endTimeInMs = clipanion_1.Option.String('--end-time', {
            validator: validation.isInteger(),
        });
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            this.tryEnableFips();
            if (!this.name) {
                this.context.stdout.write(`The span name must be provided.\n`);
                return 1;
            }
            if ((this.startTimeInMs && !this.endTimeInMs) ||
                (!this.startTimeInMs && this.endTimeInMs) ||
                (this.durationInMs && (this.startTimeInMs || this.endTimeInMs))) {
                this.context.stdout.write(`Either duration or start and end time must be provided.\n`);
                return 1;
            }
            if (this.startTimeInMs && this.endTimeInMs) {
                this.durationInMs = this.endTimeInMs - this.startTimeInMs;
            }
            if (!this.durationInMs) {
                this.context.stdout.write(`The span duration must be provided or start-time and end-time.\n`);
                return 1;
            }
            if (this.durationInMs < 0) {
                this.context.stdout.write(`The span duration must be positive / end time must be after start time.\n`);
                return 1;
            }
            const endTime = this.endTimeInMs ? new Date(this.endTimeInMs) : new Date();
            const startTime = new Date(endTime.getTime() - this.durationInMs);
            return this.executeReportCustomSpan(this.generateSpanId(), startTime, endTime, {
                name: this.name,
                error_message: '',
                exit_code: 0,
                command: 'datadog-ci trace span',
            });
        });
    }
}
exports.SpanCommand = SpanCommand;
SpanCommand.paths = [['trace', 'span']];
SpanCommand.usage = clipanion_1.Command.Usage({
    category: 'CI Visibility',
    description: 'Report a custom span to Datadog with name, start / end time or duration, tags and measures.',
    details: `
      This command reports a span with custom name and custom duration to Datadog.\n
      See README for details.
    `,
    examples: [
        [
            'Create span with name "Get Dependencies" and duration of 10s and report to Datadog',
            'datadog-ci trace span --name "Get Dependencies" --duration 10000',
        ],
        [
            'Create span with name "Build" and duration of 10s using timestamps and report to Datadog',
            'datadog-ci trace span --name "Build" --start-time 1744357891967 --end-time 1744357901967',
        ],
        [
            'Create span with name "Get Dependencies" and duration of 10s and report to Datadog with tags and measures',
            'datadog-ci trace span --name "Get Dependencies" --duration 10000 --tags "dependency-set:notify" --measures "n-dependencies:42"',
        ],
    ],
});
//# sourceMappingURL=span.js.map