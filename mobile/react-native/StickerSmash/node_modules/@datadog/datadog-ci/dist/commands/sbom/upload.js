"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadSbomCommand = void 0;
const fs_1 = __importDefault(require("fs"));
const process_1 = __importDefault(require("process"));
const axios_1 = require("axios");
const clipanion_1 = require("clipanion");
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const tags_1 = require("../../helpers/tags");
const renderer_1 = require("../sarif/renderer");
const api_1 = require("./api");
const payload_1 = require("./payload");
const renderer_2 = require("./renderer");
const validation_1 = require("./validation");
class UploadSbomCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.basePath = clipanion_1.Option.String();
        this.serviceFromCli = clipanion_1.Option.String('--service');
        this.env = clipanion_1.Option.String('--env', 'ci');
        this.tags = clipanion_1.Option.Array('--tags');
        this.gitPath = clipanion_1.Option.String('--git-repository');
        this.debug = clipanion_1.Option.Boolean('--debug');
        this.noCiTags = clipanion_1.Option.Boolean('--no-ci-tags', false);
        this.config = {
            apiKey: process_1.default.env.DATADOG_API_KEY || process_1.default.env.DD_API_KEY,
            appKey: process_1.default.env.DATADOG_APP_KEY || process_1.default.env.DD_APP_KEY || '',
            env: process_1.default.env.DD_ENV,
            envVarTags: process_1.default.env.DD_TAGS,
            fips: process_1.default.env[constants_1.FIPS_ENV_VAR],
        };
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.fipsConfig = {
            fips: (_a = (0, env_1.toBoolean)(process_1.default.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process_1.default.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    /**
     * Execute the command, which means parse the SBOM file, ensure they are
     * compliant with their schema and upload them to datadog.
     */
    execute() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.fipsConfig.fips, this.fipsIgnoreError || this.fipsConfig.fipsIgnoreError);
            // TODO(julien): remove this notice in April 2025
            if (this.serviceFromCli !== undefined) {
                this.context.stderr.write('The CLI flag `--service` is deprecated and will be removed in a future version of datadog-ci\n');
                this.context.stderr.write('To associate findings with services, consider using the service-to-repo mapping from service catalog\n');
                this.context.stderr.write('Learn more at https://docs.datadoghq.com/getting_started/code_security/?tab=staticcodeanalysissast#link-datadog-services-to-repository-scan-results\n');
            }
            const service = 'datadog-ci';
            const environment = this.env;
            if (!this.basePath || !this.basePath.length) {
                this.context.stderr.write('Missing basePath\n');
                return 1;
            }
            if (!this.config.apiKey) {
                this.context.stderr.write('API key not defined, define the environment variable DD_API_KEY.\n');
                return 1;
            }
            if (!this.config.appKey) {
                this.context.stderr.write('APP key not defined, define the environment variable DD_APP_KEY.\n');
                return 1;
            }
            // Get the API helper to send the payload
            const api = (0, api_1.getApiHelper)(this.config.apiKey, this.config.appKey);
            const tags = yield (0, tags_1.getSpanTags)(this.config, this.tags, !this.noCiTags, this.gitPath);
            // Gather any missing mandatory git fields to display to the user
            const missingGitFields = (0, tags_1.getMissingRequiredGitTags)(tags);
            if (missingGitFields.length > 0) {
                this.context.stdout.write((0, renderer_1.renderMissingTags)(missingGitFields));
                return 1;
            }
            const validator = (0, validation_1.getValidator)();
            const startTimeMs = Date.now();
            const basePath = this.basePath;
            if (this.debug) {
                this.context.stdout.write(`Processing file ${basePath}\n`);
            }
            if (!(0, validation_1.validateSbomFileAgainstSchema)(basePath, validator, !!this.debug)) {
                this.context.stdout.write('SBOM file not fully compliant against CycloneDX 1.4, 1.5 or 1.6 specifications (use --debug to get validation error)\n');
            }
            if (!(0, validation_1.validateFileAgainstToolRequirements)(basePath, !!this.debug)) {
                this.context.stdout.write((0, renderer_2.renderInvalidFile)(basePath));
                return 1;
            }
            const jsonContent = JSON.parse(fs_1.default.readFileSync(basePath).toString('utf8'));
            // Upload content
            try {
                const scaPayload = (0, payload_1.generatePayload)(jsonContent, tags, service, environment);
                if (!scaPayload) {
                    this.context.stdout.write((0, renderer_2.renderInvalidPayload)(basePath));
                    return 1;
                }
                this.context.stdout.write((0, renderer_2.renderPayloadWarning)(scaPayload.dependencies));
                scaPayload.dependencies = (0, validation_1.filterInvalidDependencies)(scaPayload.dependencies);
                this.context.stdout.write((0, renderer_2.renderUploading)(basePath, scaPayload));
                yield api(scaPayload);
                if (this.debug) {
                    this.context.stdout.write(`Upload done for ${basePath}.\n`);
                }
            }
            catch (error) {
                if ((0, axios_1.isAxiosError)(error)) {
                    if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 409) {
                        const sha = tags[tags_1.GIT_SHA] || 'sha-not-found';
                        const branch = tags[tags_1.GIT_BRANCH] || 'branch-not-found';
                        this.context.stderr.write((0, renderer_2.renderDuplicateUpload)(branch, sha));
                        return 0;
                    }
                    if (((_b = error.response) === null || _b === void 0 ? void 0 : _b.status) === 412) {
                        const repositoryUrl = tags[tags_1.GIT_REPOSITORY_URL] || 'repo-url-not-found';
                        this.context.stderr.write((0, renderer_2.renderNoDefaultBranch)(repositoryUrl));
                        return 1;
                    }
                }
                this.context.stderr.write((0, renderer_2.renderFailedUpload)(basePath, error, !!this.debug));
                return 1;
            }
            const uploadTimeMs = (Date.now() - startTimeMs) / 1000;
            this.context.stdout.write((0, renderer_2.renderSuccessfulCommand)(uploadTimeMs));
            return 0;
        });
    }
}
exports.UploadSbomCommand = UploadSbomCommand;
UploadSbomCommand.paths = [['sbom', 'upload']];
UploadSbomCommand.usage = clipanion_1.Command.Usage({
    category: 'Static Analysis',
    description: 'Upload SBOM files to Datadog.',
    details: `
      This command uploads SBOM files to Datadog for dependency tracking.
    `,
    examples: [['Upload the SBOM file sbom.json', 'datadog-ci sbom upload file.sbom']],
});
//# sourceMappingURL=upload.js.map