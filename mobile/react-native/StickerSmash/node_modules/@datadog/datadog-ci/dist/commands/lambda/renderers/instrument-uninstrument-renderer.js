"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updatingFunctionsConfigFromRegionSpinner = exports.updatingFunctionsSpinner = exports.fetchingFunctionsConfigSpinner = exports.fetchingFunctionsSpinner = exports.renderFailedUpdatingEveryLambdaFunctionFromRegion = exports.renderFailedUpdatingEveryLambdaFunction = exports.renderFailedUpdatingLambdaFunctions = exports.renderFailedUpdatingLambdaFunction = exports.renderFailedFetchingLambdaConfigurationsFromRegion = exports.renderFailedFetchingLambdaFunctions = exports.renderUpdatedLambdaFunctionsFromRegion = exports.renderUpdatedLambdaFunctions = exports.renderFetchedLambdaConfigurationsFromRegion = exports.renderFetchedLambdaFunctions = exports.renderUninstrumentingFunctionsSoftWarning = exports.renderInstrumentingFunctionsSoftWarning = exports.renderConfirmationNeededSoftWarning = exports.renderWillApplyUpdates = exports.renderNoUpdatesApplied = exports.renderInvalidStringBooleanSpecifiedError = exports.renderInvalidExtensionVersionError = exports.renderInvalidLayerVersionError = exports.renderExtraTagsDontComplyError = exports.renderTagsNotConfiguredWarning = exports.renderCouldntFetchLambdaFunctionsError = exports.renderCouldntFindLambdaFunctionsInRegionError = exports.renderConfigureDatadog = exports.renderConfigureAWSRegion = exports.renderEnsureToLockLayerVersionsWarning = exports.renderFunctionsToBeUpdated = exports.renderInstrumentInStagingFirst = exports.renderSourceCodeIntegrationWarning = exports.renderFail = exports.renderSuccess = exports.renderWarning = exports.renderFailureDuringUpdateError = exports.renderCouldntGroupFunctionsError = exports.renderRegexSetWithARNError = exports.renderFunctionsAndFunctionsRegexOptionsBothSetError = exports.renderExtensionAndForwarderOptionsBothSetError = exports.renderNoFunctionsSpecifiedError = exports.renderLambdaHeader = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const renderer_1 = require("../../../helpers/renderer");
const uninstrument_1 = require("../uninstrument");
/**
 * @returns a header indicating which `lambda` subcommand is running.
 * @param command current selected lambda subcommand.
 *
 * ```txt
 * [Dry Run] 🐶 Instrumenting Lambda function
 * ```
 */
const renderLambdaHeader = (commandType, isDryRun) => {
    const prefix = isDryRun ? `${renderer_1.dryRunTag} ` : '';
    let commandVerb = 'Instrumenting';
    if (commandType === uninstrument_1.UninstrumentCommand.prototype) {
        commandVerb = 'Uninstrumenting';
    }
    return `\n${prefix}🐶 ${commandVerb} Lambda function\n`;
};
exports.renderLambdaHeader = renderLambdaHeader;
/**
 * @param commandType the type of command being used.
 * @returns a message indicating that no functions are specified depending on the given command.
 *
 * ```txt
 * [Error] No functions specified for instrumentation.
 * or
 * [Error] No functions specified for uninstrumentation.
 * ```
 */
const renderNoFunctionsSpecifiedError = (commandType) => {
    let commandWords = 'instrument';
    if (commandType === uninstrument_1.UninstrumentCommand.prototype) {
        commandWords = 'remove instrumentation';
    }
    return (0, renderer_1.renderError)(`No functions specified to ${commandWords}.`);
};
exports.renderNoFunctionsSpecifiedError = renderNoFunctionsSpecifiedError;
/**
 * @returns a message indicating that both options `--extensionVersion` and `--forwarder` are set.
 *
 * ```txt
 * [Error] "extensionVersion" and "forwarder" should not be used at the same time.
 * ```
 */
const renderExtensionAndForwarderOptionsBothSetError = () => (0, renderer_1.renderError)('"extensionVersion" and "forwarder" should not be used at the same time.');
exports.renderExtensionAndForwarderOptionsBothSetError = renderExtensionAndForwarderOptionsBothSetError;
/**
 * @param functionsCommandUsed a boolean indicating which command was used for the specified functions.
 * @returns a message indicating that option `--functions-regex`
 * is being used along with either `--functions` or the parameter
 * `functions` in a config file.
 *
 * ```txt
 * [Error] "--functions" and "--functions-regex" should not be used at the same time.
 * or
 * [Error] Functions in config file and "--functions-regex" should not be used at the same time.
 * ```
 */
const renderFunctionsAndFunctionsRegexOptionsBothSetError = (functionsCommandUsed) => {
    const usedCommand = functionsCommandUsed ? '"--functions"' : 'Functions in config file';
    return (0, renderer_1.renderError)(`${usedCommand} and "--functions-regex" should not be used at the same time.`);
};
exports.renderFunctionsAndFunctionsRegexOptionsBothSetError = renderFunctionsAndFunctionsRegexOptionsBothSetError;
/**
 * @returns a message indicating that `--functions-regex` argument contains `:` which is mainly used with ARNs.
 *
 * ```txt
 * [Error] "--functions-regex" isn't meant to be used with ARNs.
 * ```
 */
const renderRegexSetWithARNError = () => (0, renderer_1.renderError)(`"--functions-regex" isn't meant to be used with ARNs.`);
exports.renderRegexSetWithARNError = renderRegexSetWithARNError;
/**
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that an error occurred while grouping functions.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [Error] Couldn't group functions. The provided error goes here!
 * ```
 */
const renderCouldntGroupFunctionsError = (error) => (0, renderer_1.renderError)(`Couldn't group functions. ${error}`);
exports.renderCouldntGroupFunctionsError = renderCouldntGroupFunctionsError;
/**
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that an error occurred while updating.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [Error] Failure during update. The provided error goes here!
 * ```
 */
const renderFailureDuringUpdateError = (error) => (0, renderer_1.renderError)(`Failure during update. ${error}`);
exports.renderFailureDuringUpdateError = renderFailureDuringUpdateError;
/**
 * @param warning the message to warn about.
 * @returns the provided warning prefixed by {@link warningTag}.
 *
 * ```txt
 * [Warning] The provided warning goes here!
 * ```
 */
const renderWarning = (warning) => `${renderer_1.warningTag} ${warning}\n`;
exports.renderWarning = renderWarning;
/**
 * @param message the message to set with the success tag.
 * @returns the provided message prefixed by {@link successCheckmarkTag}.
 *
 * ```txt
 * [✔] The provided message goes here!
 * ```
 */
const renderSuccess = (message) => `${renderer_1.successCheckmarkTag} ${message}\n`;
exports.renderSuccess = renderSuccess;
/**
 * @param message the message to set with the fail tag.
 * @returns the provided message prefixed by {@link failCrossTag}.
 *
 * ```txt
 * [✖] The provided message goes here!
 * ```
 */
const renderFail = (message) => `${renderer_1.failCrossTag} ${message}\n`;
exports.renderFail = renderFail;
/**
 * @param sourceCodeIntegrationError the error encountered when trying to enable source code integration.
 * @returns a warning message, with the source code integration error attached.
 *
 * ```txt
 * [Warning] Couldn't add source code integration. The provided error goes here!
 * ```
 */
const renderSourceCodeIntegrationWarning = (sourceCodeIntegrationError) => `\n${(0, exports.renderWarning)(`Couldn't add source code integration, continuing without it. ${sourceCodeIntegrationError}.`)}`;
exports.renderSourceCodeIntegrationWarning = renderSourceCodeIntegrationWarning;
/**
 * @returns a message suggesting to instrument in dev or staging environment first.
 *
 * ```txt
 * [Warning] Instrument your Lambda functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run `uninstrument` with the same arguments to revert the changes.
 * ```
 */
const renderInstrumentInStagingFirst = () => `\n${(0, exports.renderWarning)(`Instrument your ${chalk_1.default
    .hex('#FF9900')
    .bold('Lambda')} functions in a dev or staging environment first. Should the instrumentation result be unsatisfactory, run \`${chalk_1.default.bold('uninstrument')}\` with the same arguments to revert the changes.`)}`;
exports.renderInstrumentInStagingFirst = renderInstrumentInStagingFirst;
/**
 * @returns a soft warning message indicating that functions are going to be updated.
 *
 * ```txt
 * Functions to be updated:
 * ```
 */
const renderFunctionsToBeUpdated = () => `\n${(0, renderer_1.renderSoftWarning)('Functions to be updated:')}`;
exports.renderFunctionsToBeUpdated = renderFunctionsToBeUpdated;
/**
 * @returns a warning message reminding the user to lock versions for production.
 *
 * ```txt
 *    [Warning] At least one latest layer version is being used. Ensure to lock in versions for production applications using `--layerVersion` and `--extensionVersion`.
 * ```
 */
const renderEnsureToLockLayerVersionsWarning = () => `\t${(0, exports.renderWarning)('At least one latest layer version is being used. Ensure to lock in versions for production applications using `--layerVersion` and `--extensionVersion`.')}`;
exports.renderEnsureToLockLayerVersionsWarning = renderEnsureToLockLayerVersionsWarning;
/**
 * @returns a message indicating to configure AWS region.
 *
 * ```txt
 * [!] Configure AWS region.
 * ```
 */
const renderConfigureAWSRegion = () => `\n${(0, renderer_1.renderSoftWarning)('Configure AWS region.')}`;
exports.renderConfigureAWSRegion = renderConfigureAWSRegion;
/**
 * @returns a message indicating to configure Datadog settings.
 *
 * ```txt
 * [!] Configure Datadog settings.
 * ```
 */
const renderConfigureDatadog = () => `\n${(0, renderer_1.renderSoftWarning)('Configure Datadog settings.')}`;
exports.renderConfigureDatadog = renderConfigureDatadog;
/**
 * @returns a message indicating that no Lambda functions were found
 * in the specified region.
 *
 * ```txt
 * [Error] Couldn't find any Lambda functions in the specified region.
 * ```
 */
const renderCouldntFindLambdaFunctionsInRegionError = () => (0, renderer_1.renderError)("Couldn't find any Lambda functions in the specified region.");
exports.renderCouldntFindLambdaFunctionsInRegionError = renderCouldntFindLambdaFunctionsInRegionError;
/**
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that no Lambda functions were fetched.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [Error] Couldn't fetch Lambda functions. The provided error goes here!
 * ```
 */
const renderCouldntFetchLambdaFunctionsError = (error) => (0, renderer_1.renderError)(`Couldn't fetch Lambda functions. ${error}`);
exports.renderCouldntFetchLambdaFunctionsError = renderCouldntFetchLambdaFunctionsError;
/**
 * @param tagsMissing an array containing the tags that are not configured
 * @returns a message indicating which tags are not configured and where to
 * learn more about Datadog's unified service tagging.
 *
 * ```txt
 * [Warning] The service tag has not been configures. Learn more about Datadog unified service tagging: https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment.
 * ```
 */
const renderTagsNotConfiguredWarning = (tagsMissing) => {
    const tags = tagsMissing.join(', ').replace(/, ([^,]*)$/, ' and $1');
    const plural = tagsMissing.length > 1;
    return `\n${(0, exports.renderWarning)(`The ${tags} tag${plural ? 's have' : ' has'} not been configured. Learn more about Datadog unified service tagging: ${chalk_1.default.underline(chalk_1.default.blueBright('https://docs.datadoghq.com/getting_started/tagging/unified_service_tagging/#serverless-environment'))}.`)}`;
};
exports.renderTagsNotConfiguredWarning = renderTagsNotConfiguredWarning;
/**
 * @returns a message indicating that the extra tags provided do not comply
 * with the <key>:<value> array standard.
 *
 * ```txt
 * [Error] Extra tags do not comply with the <key>:<value> array.
 * ```
 */
const renderExtraTagsDontComplyError = () => (0, renderer_1.renderError)('Extra tags do not comply with the <key>:<value> array.');
exports.renderExtraTagsDontComplyError = renderExtraTagsDontComplyError;
/**
 * @returns a message indicating that the `--layerVersion` argument provided is invalid.
 *
 * ```txt
 * [Error] Invalid layer version "provided value".
 * ```
 */
const renderInvalidLayerVersionError = (layerVersion) => (0, renderer_1.renderError)(`Invalid layer version "${layerVersion}".`);
exports.renderInvalidLayerVersionError = renderInvalidLayerVersionError;
/**
 * @returns a message indicating that the `--extensionVersion` argument provided is invalid.
 *
 * ```txt
 * [Error] Invalid extension version "provided value".
 * ```
 */
const renderInvalidExtensionVersionError = (extensionVersion) => (0, renderer_1.renderError)(`Invalid extension version "${extensionVersion}".`);
exports.renderInvalidExtensionVersionError = renderInvalidExtensionVersionError;
/**
 * @returns a message indicating that the provided argument for a specific string boolean
 * field was invalid.
 *
 * ```txt
 * [Error] Invalid boolean specified for "string boolean field".
 * ```
 */
const renderInvalidStringBooleanSpecifiedError = (stringBoolean) => (0, renderer_1.renderError)(`Invalid boolean specified for ${stringBoolean}.`);
exports.renderInvalidStringBooleanSpecifiedError = renderInvalidStringBooleanSpecifiedError;
/**
 * @param isDryRun a boolean to define if a prefix should be added.
 * @returns a message indicating that no updates will be applied.
 *
 * ```txt
 * [Dry Run] No updates will be applied.
 * or
 * No updates will be applied.
 * ```
 */
const renderNoUpdatesApplied = (isDryRun) => {
    const prefix = isDryRun ? `${renderer_1.dryRunTag} ` : '';
    return `\n${prefix}No updates will be applied.\n`;
};
exports.renderNoUpdatesApplied = renderNoUpdatesApplied;
/**
 * @param isDryRun a boolean to define if a prefix should be added.
 * @returns a message indicating that updates will be applied.
 *
 * ```txt
 * [Dry Run] Will apply the following updates:
 * or
 * Will apply the following updates:
 * ```
 */
const renderWillApplyUpdates = (isDryRun) => {
    const prefix = isDryRun ? `${renderer_1.dryRunTag} ` : '';
    return `\n${prefix}Will apply the following updates:\n`;
};
exports.renderWillApplyUpdates = renderWillApplyUpdates;
/**
 * @returns a soft warning message indicating that confirmation is needed.
 *
 * ```txt
 * [!] Confirmation needed.
 * ```
 */
const renderConfirmationNeededSoftWarning = () => (0, renderer_1.renderSoftWarning)('Confirmation needed.');
exports.renderConfirmationNeededSoftWarning = renderConfirmationNeededSoftWarning;
/**
 * @returns a soft warning message indicating that functions are being instrumented.
 *
 * ```txt
 * [!] Instrumenting functions.
 * ```
 */
const renderInstrumentingFunctionsSoftWarning = () => (0, renderer_1.renderSoftWarning)('Instrumenting functions.');
exports.renderInstrumentingFunctionsSoftWarning = renderInstrumentingFunctionsSoftWarning;
/**
 * @returns a soft warning message indicating the removal of instrumentation
 * for functions.
 *
 * ```txt
 * [!] Uninstrumenting functions.
 * ```
 */
const renderUninstrumentingFunctionsSoftWarning = () => (0, renderer_1.renderSoftWarning)('Uninstrumenting functions.');
exports.renderUninstrumentingFunctionsSoftWarning = renderUninstrumentingFunctionsSoftWarning;
/**
 * @param functionsLength the number of Lambda functions that were fetched.
 * @returns a message indicating that it fetched Lambda functions.
 *
 * ```txt
 * Fetched 42 Lambda functions.
 * ```
 */
const renderFetchedLambdaFunctions = (functionsLength) => {
    const plural = functionsLength > 1;
    return `Fetched ${chalk_1.default.bold(functionsLength)} ${chalk_1.default.hex('#FF9900').bold('Lambda')} function${plural ? 's' : ''}.\n`;
};
exports.renderFetchedLambdaFunctions = renderFetchedLambdaFunctions;
/**
 * @param region the AWS region where the Lambda configs belong to.
 * @param configsLength the number of Lambda configuration that were fetched.
 * @returns a message indicating that it updated Lambda functions.
 *
 * ```txt
 * [us-east-1] Fetched 42 Lambda configurations.
 * ```
 */
const renderFetchedLambdaConfigurationsFromRegion = (region, configsLength) => `${chalk_1.default.bold(`[${region}]`)} Fetched ${chalk_1.default.bold(configsLength)} ${chalk_1.default
    .hex('#FF9900')
    .bold('Lambda')} configurations.\n`;
exports.renderFetchedLambdaConfigurationsFromRegion = renderFetchedLambdaConfigurationsFromRegion;
/**
 * @param functionsLength the number of Lambda functions that were updated.
 * @returns a message indicating that it updated Lambda functions.
 *
 * ```txt
 * Updated 42 Lambda functions.
 * ```
 */
const renderUpdatedLambdaFunctions = (functionsLength) => {
    const plural = functionsLength > 1;
    return `Updated ${chalk_1.default.bold(functionsLength)} ${chalk_1.default.hex('#FF9900').bold('Lambda')} function${plural ? 's' : ''}.\n`;
};
exports.renderUpdatedLambdaFunctions = renderUpdatedLambdaFunctions;
/**
 * @param region the AWS region where the Lambda functions belong to.
 * @param functionsLength the number of Lambda functions that were updated.
 * @returns a message indicating that it updated Lambda functions from a certain region.
 *
 * ```txt
 * [us-east-1] Updated 42 Lambda functions.
 * ```
 */
const renderUpdatedLambdaFunctionsFromRegion = (region, functionsLength) => {
    const plural = functionsLength > 1;
    return `${chalk_1.default.bold(`[${region}]`)} Updated ${chalk_1.default.bold(functionsLength)} ${chalk_1.default
        .hex('#FF9900')
        .bold('Lambda')} function${plural ? 's' : ''}.\n`;
};
exports.renderUpdatedLambdaFunctionsFromRegion = renderUpdatedLambdaFunctionsFromRegion;
/**
 * @returns a message indicating that it failed to fetch Lambda functions.
 *
 * ```txt
 * Failed fetching Lambda functions.
 * ```
 */
const renderFailedFetchingLambdaFunctions = () => `Failed fetching ${chalk_1.default.hex('#FF9900').bold('Lambda')} configurations.\n`;
exports.renderFailedFetchingLambdaFunctions = renderFailedFetchingLambdaFunctions;
/**
 * @param region the AWS region where the Lambda configs belong to.
 * @returns a message indicating that it failed to fetch Lambda configurations.
 * from a region.
 *
 * ```txt
 * [us-east-1] Failed fetching Lambda configurations.
 * ```
 */
const renderFailedFetchingLambdaConfigurationsFromRegion = (region) => `${chalk_1.default.bold(`[${region}]`)} Failed fetching ${chalk_1.default.hex('#FF9900').bold('Lambda')} configurations.\n`;
exports.renderFailedFetchingLambdaConfigurationsFromRegion = renderFailedFetchingLambdaConfigurationsFromRegion;
/**
 * @param f the Lambda function which failed to update.
 * @param error an error message or an object of type `unknown`*.
 * @returns a message indicating that it failed while updating the Lambda function,
 * and the given error.
 *
 * * Using unknown since we're not type guarding.
 *
 * ```txt
 * [us-east-1] Failed updating ARN Provided error goes here..
 * ```
 */
const renderFailedUpdatingLambdaFunction = (f, error) => (0, renderer_1.renderError)(`Failed updating ${chalk_1.default.bold(f)} ${error}`);
exports.renderFailedUpdatingLambdaFunction = renderFailedUpdatingLambdaFunction;
/**
 * @returns a message indicating that it failed to update Lambda functions.
 *
 * ```txt
 * Failed updating Lambda functions.
 * ```
 */
const renderFailedUpdatingLambdaFunctions = () => `Failed updating ${chalk_1.default.hex('#FF9900').bold('Lambda')} functions.\n`;
exports.renderFailedUpdatingLambdaFunctions = renderFailedUpdatingLambdaFunctions;
/**
 * @returns a message indicating that it failed to update all Lambda functions.
 *
 * ```txt
 * Failed updating every Lambda function.
 * ```
 */
const renderFailedUpdatingEveryLambdaFunction = () => `Failed updating every ${chalk_1.default.hex('#FF9900').bold('Lambda')} function.\n`;
exports.renderFailedUpdatingEveryLambdaFunction = renderFailedUpdatingEveryLambdaFunction;
/**
 * @param region the AWS region where the Lambda configs belong to.
 * @returns a message indicating that it failed to update all Lambda functions
 * from the given region.
 *
 * ```txt
 * [us-east-1] Failed updating every Lambda function.
 * ```
 */
const renderFailedUpdatingEveryLambdaFunctionFromRegion = (region) => `${chalk_1.default.bold(`[${region}]`)} Failed updating every ${chalk_1.default.hex('#FF9900').bold('Lambda')} function.\n`;
exports.renderFailedUpdatingEveryLambdaFunctionFromRegion = renderFailedUpdatingEveryLambdaFunctionFromRegion;
/**
 * Returns a spinner instance with text for lambda functions fetching.
 *
 * @returns an instance of an {@link ora} spinner.
 *
 * ```txt
 * ⠋ Fetching Lambda functions.
 * ```
 */
const fetchingFunctionsSpinner = () => (0, ora_1.default)({
    color: 'magenta',
    discardStdin: false,
    text: `Fetching ${chalk_1.default.hex('#FF9900').bold('Lambda')} functions.\n`,
});
exports.fetchingFunctionsSpinner = fetchingFunctionsSpinner;
/**
 * Returns a spinner instance with text for lambda configurations fetching.
 *
 * @returns an instance of {@link ora} spinner.
 *
 * ```txt
 * ⠋ [us-east-1] Fetching Lambda configurations.
 * ```
 */
const fetchingFunctionsConfigSpinner = (region) => (0, ora_1.default)({
    color: 'magenta',
    discardStdin: false,
    text: `${chalk_1.default.bold(`[${region}]`)} Fetching ${chalk_1.default.hex('#FF9900').bold('Lambda')} configurations.\n`,
});
exports.fetchingFunctionsConfigSpinner = fetchingFunctionsConfigSpinner;
/**
 * Returns a spinner instance with text for lambda functions updating.
 *
 * @returns an instance of an {@link ora} spinner.
 *
 * ```txt
 * ⠋ Updating 5 Lambda functions.
 * ```
 */
const updatingFunctionsSpinner = (functions) => (0, ora_1.default)({
    color: 'magenta',
    discardStdin: false,
    text: `Updating ${chalk_1.default.bold(functions)} ${chalk_1.default.hex('#FF9900').bold('Lambda')} functions.\n`,
});
exports.updatingFunctionsSpinner = updatingFunctionsSpinner;
/**
 * Returns a spinner instance with text for Lambda functions being updated
 * from the given region.
 *
 * @returns an instance of {@link ora} spinner.
 *
 * ```txt
 * ⠋ [us-east-1] Updating Lambda functions.
 * ```
 */
const updatingFunctionsConfigFromRegionSpinner = (region, functions) => (0, ora_1.default)({
    color: 'magenta',
    discardStdin: false,
    text: `${chalk_1.default.bold(`[${region}]`)} Updating ${chalk_1.default.bold(functions)} ${chalk_1.default
        .hex('#FF9900')
        .bold('Lambda')} functions.\n`,
});
exports.updatingFunctionsConfigFromRegionSpinner = updatingFunctionsConfigFromRegionSpinner;
//# sourceMappingURL=instrument-uninstrument-renderer.js.map