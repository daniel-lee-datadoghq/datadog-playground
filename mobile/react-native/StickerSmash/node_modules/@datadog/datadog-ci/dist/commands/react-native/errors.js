"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodepushHistoryCommandError = exports.CodepushHistoryParseError = exports.NoCodepushReleaseError = void 0;
class NoCodepushReleaseError extends Error {
    constructor(appCenterAppName, appCenterDeployment) {
        super(`No codepush release has been created yet for ${appCenterAppName} ${appCenterDeployment}`);
    }
}
exports.NoCodepushReleaseError = NoCodepushReleaseError;
class CodepushHistoryParseError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.CodepushHistoryParseError = CodepushHistoryParseError;
class CodepushHistoryCommandError extends Error {
    constructor(message, command) {
        let errorMessage;
        try {
            errorMessage = JSON.parse(message).errorMessage;
            // Error returned when there is no network
            if (errorMessage.match('Cannot read properties of undefined')) {
                super(`You need to have network access to be able to get the latest codepush label.\nCheck that ${command} returns a correct value.\nAlternatively, you can directly use the "datadog-ci react-native upload" command to upload your sourcemaps with the correct release version.`);
                return;
            }
        }
        catch (e) {
            errorMessage = message;
        }
        super(errorMessage);
    }
}
exports.CodepushHistoryCommandError = CodepushHistoryCommandError;
//# sourceMappingURL=errors.js.map