import { Command } from 'clipanion';
export declare class XCodeCommand extends Command {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private composeSourcemapsPath;
    private configPath;
    private disableGit;
    private dryRun;
    private force;
    private infoPlistPath;
    private removeSourcesContent;
    private repositoryURL;
    private service;
    private scriptPath;
    private fips;
    private fipsIgnoreError;
    private config;
    private _reactNativePath;
    private _datadogReactNativePath;
    private _defaultScriptPath;
    private get reactNativePath();
    private get datadogReactNativePath();
    private get defaultScriptPath();
    execute(): Promise<number>;
    /**
     * Resolves the Debug ID from the bundle file and writes it into the sourcemap.
     */
    private copyDebugIdFromBundle;
    /**
     * Fallback method to copy the debug ID from the temporary file created by the Metro plugin.
     * This is used when the debug ID is not found in the bundle file.
     */
    private copyDebugIdFromTempFile;
    /**
     * Writes the debug ID into the sourcemap file.
     * If the sourcemap already contains a debug ID, it will skip the update unless `force` is true.
     * If the debug ID in the sourcemap does not match the provided debug ID, it will log a warning.
     */
    private writeDebugIdInSourcemap;
    private bundleReactNativeCodeAndImages;
    private getBundleReactNativeCodeAndImagesEnvironment;
    private composeHermesSourcemaps;
    private getBuildVersion;
    private getBundleLocation;
    private getPlistValue;
    private getReleaseVersion;
    private getSourcemapsLocation;
    /**
     * This function reflects the logic in the react-native-xcode.sh bundle script.
     * When the composition issue is fixed in React Native, this function should
     * return false if the React Native version is at least 0.71 where it was fixed.
     */
    private shouldComposeHermesSourcemaps;
    private isHermesEnabled;
    private shouldUploadSourcemaps;
    private shouldBundleRNCode;
    private verifyFolderPath;
}
