"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractRepeatedPath = exports.getMinifiedFilePath = void 0;
const upath_1 = __importDefault(require("upath"));
const getMinifiedFilePath = (sourcemapPath) => {
    if (upath_1.default.extname(sourcemapPath) !== '.map') {
        throw Error('cannot get minified file path from a file which is not a sourcemap');
    }
    return sourcemapPath.replace(new RegExp('\\.map$'), '');
};
exports.getMinifiedFilePath = getMinifiedFilePath;
// ExtractRepeatedPath checks if the last part of paths of the first arg are repeated at the start of the second arg.
const extractRepeatedPath = (path1, path2) => {
    const splitOnSlashes = new RegExp(/[\/]+|[\\]+/);
    const trimSlashes = new RegExp(/^[\/]+|^[\\]+|[\/]+$|[\\]+$/);
    const path1split = path1.trim().replace(trimSlashes, '').split(splitOnSlashes);
    const path2split = path2.trim().replace(trimSlashes, '').split(splitOnSlashes);
    const normalizedpath2 = path2split.join('/');
    for (let i = path1split.length; i > 0; i--) {
        const path1subset = path1split.slice(-i).join('/');
        if (normalizedpath2.startsWith(path1subset)) {
            return path1subset;
        }
    }
    return undefined;
};
exports.extractRepeatedPath = extractRepeatedPath;
//# sourceMappingURL=utils.js.map