"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceCommand = void 0;
const child_process_1 = require("child_process");
const os_1 = __importDefault(require("os"));
const clipanion_1 = require("clipanion");
const helper_1 = require("./helper");
// We use 127 as exit code for invalid commands since that is what *sh terminals return
const BAD_COMMAND_EXIT_CODE = 127;
class TraceCommand extends helper_1.CustomSpanCommand {
    constructor() {
        super(...arguments);
        this.command = clipanion_1.Option.Rest({ required: 1 });
        this.name = clipanion_1.Option.String('--name');
        this.noFail = clipanion_1.Option.Boolean('--no-fail');
    }
    execute() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.tryEnableFips();
            if (!this.command || !this.command.length) {
                this.context.stderr.write('Missing command to run\n');
                return 1;
            }
            const id = this.generateSpanId();
            const [command, ...args] = this.command;
            const startTime = new Date();
            const childProcess = (0, child_process_1.spawn)(command, args, {
                env: Object.assign(Object.assign({}, process.env), { DD_CUSTOM_PARENT_ID: id }),
                stdio: ['inherit', 'inherit', 'pipe'],
            });
            const chunks = [];
            childProcess.stderr.pipe(this.context.stderr);
            const stderrCatcher = new Promise((resolve, reject) => {
                childProcess.stderr.on('data', (chunk) => chunks.push(Buffer.from(chunk)));
                childProcess.stderr.on('error', (err) => reject(err));
                childProcess.stderr.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));
            });
            const [status, signal] = yield new Promise((resolve, reject) => {
                childProcess.on('error', (error) => {
                    reject(error);
                });
                childProcess.on('close', (exitStatus, exitSignal) => {
                    resolve([exitStatus, exitSignal]);
                });
            });
            const stderr = yield stderrCatcher;
            const endTime = new Date();
            const exitCode = (_a = status !== null && status !== void 0 ? status : this.signalToNumber(signal)) !== null && _a !== void 0 ? _a : BAD_COMMAND_EXIT_CODE;
            const commandStr = this.command.join(' ');
            const res = yield this.executeReportCustomSpan(id, startTime, endTime, {
                command: commandStr,
                name: (_b = this.name) !== null && _b !== void 0 ? _b : commandStr,
                error_message: stderr,
                exit_code: exitCode,
            });
            if (res !== 0) {
                if (this.noFail) {
                    console.log('note: Not failing since --no-fail provided');
                    return exitCode;
                }
                return res;
            }
            return exitCode;
        });
    }
    signalToNumber(signal) {
        if (!signal) {
            return undefined;
        }
        return os_1.default.constants.signals[signal] + 128;
    }
}
exports.TraceCommand = TraceCommand;
TraceCommand.paths = [['trace']];
TraceCommand.usage = clipanion_1.Command.Usage({
    category: 'CI Visibility',
    description: 'Trace a command with a custom span and report it to Datadog.',
    details: `
      This command wraps another command, which it will launch, and report a custom span to Datadog.\n
      See README for details.
    `,
    examples: [
        [
            'Trace a command with name "Say Hello" and report to Datadog',
            'datadog-ci trace --name "Say Hello" -- echo "Hello World"',
        ],
        [
            'Trace a command with name "Say Hello", extra tags and measures and report to Datadog',
            'datadog-ci trace --name "Say Hello" --tags key1:value1 --tags key2:value2 --measures key3:3.5 --measures key4:8 -- echo "Hello World"',
        ],
        [
            'Trace a command and report to the datadoghq.eu site',
            'DD_SITE=datadoghq.eu datadog-ci trace -- echo "Hello World"',
        ],
    ],
});
//# sourceMappingURL=trace.js.map