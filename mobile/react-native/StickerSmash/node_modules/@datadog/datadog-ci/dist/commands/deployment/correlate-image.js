"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentCorrelateImageCommand = void 0;
const axios_1 = require("axios");
const chalk_1 = __importDefault(require("chalk"));
const clipanion_1 = require("clipanion");
const constants_1 = require("../../constants");
const env_1 = require("../../helpers/env");
const fips_1 = require("../../helpers/fips");
const logger_1 = require("../../helpers/logger");
const retry_1 = require("../../helpers/retry");
const utils_1 = require("../../helpers/utils");
class DeploymentCorrelateImageCommand extends clipanion_1.Command {
    constructor() {
        var _a, _b;
        super(...arguments);
        this.commitSha = clipanion_1.Option.String('--commit-sha');
        this.repositoryUrl = clipanion_1.Option.String('--repository-url');
        this.image = clipanion_1.Option.String('--image');
        this.fips = clipanion_1.Option.Boolean('--fips', false);
        this.fipsIgnoreError = clipanion_1.Option.Boolean('--fips-ignore-error', false);
        this.dryRun = clipanion_1.Option.Boolean('--dry-run', false);
        this.logger = new logger_1.Logger((s) => this.context.stdout.write(s), logger_1.LogLevel.INFO);
        this.config = {
            apiKey: process.env.DD_API_KEY,
            appKey: process.env.DD_APP_KEY,
            fips: (_a = (0, env_1.toBoolean)(process.env[constants_1.FIPS_ENV_VAR])) !== null && _a !== void 0 ? _a : false,
            fipsIgnoreError: (_b = (0, env_1.toBoolean)(process.env[constants_1.FIPS_IGNORE_ERROR_ENV_VAR])) !== null && _b !== void 0 ? _b : false,
        };
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            (0, fips_1.enableFips)(this.fips || this.config.fips, this.fipsIgnoreError || this.config.fipsIgnoreError);
            if (!this.config.apiKey) {
                this.logger.error(`Missing ${chalk_1.default.red.bold('DD_API_KEY')} in your environment.`);
                return 1;
            }
            if (!this.config.appKey) {
                this.logger.error(`Missing ${chalk_1.default.red.bold('DD_APP_KEY')} in your environment.`);
                return 1;
            }
            if (!this.commitSha) {
                this.logger.error('Missing commit SHA. It must be provided with --commit-sha');
                return 1;
            }
            if (!this.repositoryUrl) {
                this.logger.error('Missing repository URL. It must be provided with --repository-url');
                return 1;
            }
            if (!this.image) {
                this.logger.error('Missing image. It must be provided with --image');
                return 1;
            }
            const site = process.env.DD_SITE || 'datadoghq.com';
            const baseAPIURL = `https://${(0, utils_1.getApiHostForSite)(site)}`;
            const request = (0, utils_1.getRequestBuilder)({ baseUrl: baseAPIURL, apiKey: this.config.apiKey, appKey: this.config.appKey });
            const correlateEvent = {
                type: 'ci_deployment_correlate_image',
                attributes: {
                    commit_sha: this.commitSha,
                    repository_url: this.repositoryUrl,
                    image: this.image,
                },
            };
            if (this.dryRun) {
                this.logger.info(`[DRYRUN] Sending correlation event\n data: ` + JSON.stringify(correlateEvent, undefined, 2));
                return 0;
            }
            const doRequest = () => request({
                data: {
                    data: correlateEvent,
                },
                method: 'post',
                url: '/api/v2/ci/deployments/correlate-image',
            });
            try {
                yield (0, retry_1.retryRequest)(doRequest, {
                    maxTimeout: 30000,
                    minTimeout: 5000,
                    onRetry: (e, attempt) => {
                        this.logger.warn(`[attempt ${attempt}] Could not send correlation event. Retrying...: ${e.message}\n`);
                    },
                    retries: 5,
                });
            }
            catch (error) {
                this.handleError(error);
            }
            return 0;
        });
    }
    handleError(error) {
        var _a, _b;
        this.context.stderr.write(`${chalk_1.default.red.bold('[ERROR]')} Could not send deployment correlation data: ${(0, axios_1.isAxiosError)(error)
            ? JSON.stringify({
                status: (_a = error.response) === null || _a === void 0 ? void 0 : _a.status,
                response: (_b = error.response) === null || _b === void 0 ? void 0 : _b.data,
            }, undefined, 2)
            : error.message}\n`);
    }
}
exports.DeploymentCorrelateImageCommand = DeploymentCorrelateImageCommand;
DeploymentCorrelateImageCommand.paths = [['deployment', 'correlate-image']];
DeploymentCorrelateImageCommand.usage = clipanion_1.Command.Usage({
    category: 'CI Visibility',
    description: 'Correlate images with their source commit.',
    details: 'This command will correlate the image with a commit of the application repository.',
});
//# sourceMappingURL=correlate-image.js.map