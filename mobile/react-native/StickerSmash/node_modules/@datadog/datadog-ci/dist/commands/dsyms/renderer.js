"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderUpload = exports.renderCommandDetail = exports.renderCommandInfo = exports.renderSuccessfulCommand = exports.renderRetriedUpload = exports.renderFailedUpload = exports.renderDSYMSlimmingFailure = exports.renderInvalidDsymWarning = exports.renderConfigurationError = void 0;
const chalk_1 = __importDefault(require("chalk"));
const upath_1 = __importDefault(require("upath"));
const formatting_1 = require("../../helpers/formatting");
const upload_1 = require("../../helpers/upload");
const utils_1 = require("./utils");
const renderConfigurationError = (error) => chalk_1.default.red(`${formatting_1.ICONS.FAILED} Configuration error: ${error}.\n`);
exports.renderConfigurationError = renderConfigurationError;
const renderInvalidDsymWarning = (dSYMPath) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} Invalid dSYM file, will be skipped: ${dSYMPath}\n`);
exports.renderInvalidDsymWarning = renderInvalidDsymWarning;
const renderDSYMSlimmingFailure = (dSYM, dwarf, error) => chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} Failed to export '${dwarf.arch}' arch (${dwarf.uuid}) from ${dSYM.bundle}: ${error}\n`);
exports.renderDSYMSlimmingFailure = renderDSYMSlimmingFailure;
const renderFailedUpload = (dSYM, errorMessage) => {
    const dSYMPathBold = `[${chalk_1.default.bold.dim(dSYM.dsym.bundle)}]`;
    return chalk_1.default.red(`${formatting_1.ICONS.FAILED} Failed upload dSYM for ${dSYMPathBold}: ${errorMessage}\n`);
};
exports.renderFailedUpload = renderFailedUpload;
const renderRetriedUpload = (dSYM, errorMessage, attempt) => {
    const dSYMPathBold = `[${chalk_1.default.bold.dim(dSYM.dsym.bundle)}]`;
    return chalk_1.default.yellow(`[attempt ${attempt}] Retrying dSYM upload ${dSYMPathBold}: ${errorMessage}\n`);
};
exports.renderRetriedUpload = renderRetriedUpload;
const renderSuccessfulCommand = (statuses, duration, dryRun) => {
    const results = new Map();
    statuses.forEach((status) => {
        if (!results.has(status)) {
            results.set(status, 0);
        }
        results.set(status, results.get(status) + 1);
    });
    const output = ['', chalk_1.default.bold('Command summary:')];
    if (results.get(upload_1.UploadStatus.Failure)) {
        output.push(chalk_1.default.red(`${formatting_1.ICONS.FAILED} Some dSYMS have not been uploaded correctly.`));
    }
    else if (results.get(upload_1.UploadStatus.Skipped)) {
        output.push(chalk_1.default.yellow(`${formatting_1.ICONS.WARNING}  Some dSYMs have been skipped.`));
    }
    else if (results.get(upload_1.UploadStatus.Success)) {
        if (dryRun) {
            output.push(chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} [DRYRUN] Handled ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'dSYM', 'dSYMs')} with success in ${duration} seconds.`));
        }
        else {
            output.push(chalk_1.default.green(`${formatting_1.ICONS.SUCCESS} Uploaded ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'dSYM', 'dSYMs')} in ${duration} seconds.`));
        }
    }
    else {
        output.push(chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} No dSYMs detected. Did you specify the correct directory?`));
    }
    if (results.get(upload_1.UploadStatus.Failure) || results.get(upload_1.UploadStatus.Skipped)) {
        output.push(`Details about the found ${(0, utils_1.pluralize)(statuses.length, 'dSYM', 'dSYMs')}:`);
        if (results.get(upload_1.UploadStatus.Success)) {
            output.push(`  * ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Success), 'dSYM', 'dSYMs')} successfully uploaded`);
        }
        if (results.get(upload_1.UploadStatus.Skipped)) {
            output.push(chalk_1.default.yellow(`  * ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Skipped), 'dSYM was', 'dSYMs were')} skipped`));
        }
        if (results.get(upload_1.UploadStatus.Failure)) {
            output.push(chalk_1.default.red(`  * ${(0, utils_1.pluralize)(results.get(upload_1.UploadStatus.Failure), 'dSYM', 'dSYMs')} failed to upload`));
        }
    }
    return output.join('\n') + '\n';
};
exports.renderSuccessfulCommand = renderSuccessfulCommand;
const renderCommandInfo = (basePath, poolLimit, dryRun) => {
    let fullStr = '';
    if (dryRun) {
        fullStr += chalk_1.default.yellow(`${formatting_1.ICONS.WARNING} DRY-RUN MODE ENABLED. WILL NOT UPLOAD DSYMS\n`);
    }
    const startStr = chalk_1.default.green(`Starting upload with concurrency ${poolLimit}. \n`);
    fullStr += startStr;
    const basePathStr = chalk_1.default.green(`Will look for dSYMs in ${basePath}\n`);
    fullStr += basePathStr;
    fullStr += chalk_1.default.green(`Once dSYMs upload is successful files will be processed and ready to use within the next 5 minutes.\n`);
    return fullStr;
};
exports.renderCommandInfo = renderCommandInfo;
const renderCommandDetail = (intermediateDirectory, uploadDirectory) => `Will use temporary intermediate directory: ${intermediateDirectory}\n` +
    `Will use temporary upload directory: ${uploadDirectory}\n`;
exports.renderCommandDetail = renderCommandDetail;
const renderUpload = (dSYM) => {
    const archiveName = upath_1.default.basename(dSYM.archivePath);
    const objectName = dSYM.dsym.dwarf.map((dwarf) => upath_1.default.basename(dwarf.object))[0];
    const archs = dSYM.dsym.dwarf.map((dwarf) => dwarf.arch).join();
    const uuids = dSYM.dsym.dwarf.map((dwarf) => dwarf.uuid).join();
    return `Uploading ${archiveName} (${objectName}, arch: ${archs}, UUID: ${uuids})\n`;
};
exports.renderUpload = renderUpload;
//# sourceMappingURL=renderer.js.map