import { CloudWatchLogsClient, CreateLogGroupCommandInput, DeleteSubscriptionFilterCommandInput, PutSubscriptionFilterCommandInput, SubscriptionFilter } from '@aws-sdk/client-cloudwatch-logs';
import { LogGroupConfiguration } from './interfaces';
export declare enum SubscriptionState {
    Empty = 0,
    CorrectDestination = 1,
    WrongDestinationOwned = 2,
    WrongDestinationUnowned = 3
}
export declare const applyLogGroupConfig: (client: CloudWatchLogsClient, config: LogGroupConfiguration) => Promise<void>;
export declare const createLogGroup: (client: CloudWatchLogsClient, input: CreateLogGroupCommandInput) => Promise<void>;
export declare const deleteSubscriptionFilter: (client: CloudWatchLogsClient, input: DeleteSubscriptionFilterCommandInput) => Promise<void>;
export declare const putSubscriptionFilter: (client: CloudWatchLogsClient, input: PutSubscriptionFilterCommandInput) => Promise<void>;
export declare const calculateLogGroupUpdateRequest: (client: CloudWatchLogsClient, logGroupName: string, forwarderARN: string) => Promise<LogGroupConfiguration | undefined>;
export declare const calculateLogGroupRemoveRequest: (client: CloudWatchLogsClient, logGroupName: string, forwarderARN: string) => Promise<LogGroupConfiguration>;
export declare const hasLogGroup: (client: CloudWatchLogsClient, logGroupName: string) => Promise<boolean>;
export declare const getSubscriptionFilterState: (client: CloudWatchLogsClient, logGroupName: string, forwarderARN: string) => Promise<SubscriptionState>;
export declare const getSubscriptionFilters: (client: CloudWatchLogsClient, logGroupName: string) => Promise<SubscriptionFilter[] | undefined>;
