"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderGitWarning = exports.renderRequest = exports.renderDryRun = exports.renderSuccessfulRequest = exports.renderRetriedRequest = exports.renderFailedRequest = void 0;
const ICONS = {
    FAILED: '❌',
    SUCCESS: '✅',
    WARNING: '⚠️',
};
const renderFailedRequest = (service, error) => `${ICONS.FAILED} Failed to send DORA deployment event for service: ${service}: ` +
    (error.response ? JSON.stringify(error.response.data, undefined, 2) : '');
exports.renderFailedRequest = renderFailedRequest;
const renderRetriedRequest = (service, error, attempt) => `[attempt ${attempt}] Retrying to send DORA deployment event for service: ${service}: ${error.message}`;
exports.renderRetriedRequest = renderRetriedRequest;
const renderSuccessfulRequest = (service) => `${ICONS.SUCCESS} Successfully sent DORA deployment event for service: ${service}`;
exports.renderSuccessfulRequest = renderSuccessfulRequest;
const renderDryRun = (deployment) => `[DRYRUN] ${(0, exports.renderRequest)(deployment.service)}\n data: ` + JSON.stringify(deployment, undefined, 2);
exports.renderDryRun = renderDryRun;
const renderRequest = (service) => `Sending DORA deployment event for service: ${service}`;
exports.renderRequest = renderRequest;
const renderGitWarning = (git) => `${ICONS.WARNING} --git-repository-url or --git-commit-sha not provided.\n` +
    `Assuming deployment of the current HEAD commit: ${git.repoURL} ${git.commitSHA}\n` +
    `This warning can be disabled with --skip-git but git data is required for Change Lead Time.`;
exports.renderGitWarning = renderGitWarning;
//# sourceMappingURL=renderer.js.map