import type { IService, ServicesClient as IServicesClient } from './types';
import type { Logging } from '@google-cloud/logging';
import { Command } from 'clipanion';
import { CloudRunLog } from './interfaces';
export declare const MAX_LOGS = 1000;
export declare class CloudRunFlareCommand extends Command {
    static paths: string[][];
    static usage: import("clipanion").Usage;
    private isDryRun;
    private withLogs;
    private service;
    private project;
    private region;
    private caseId;
    private email;
    private start;
    private end;
    private apiKey?;
    private fips;
    private fipsIgnoreError;
    private config;
    /**
     * Entry point for the `cloud-run flare` command.
     * Gathers Cloud Run service configuration and sends it to Datadog.
     * @returns 0 if the command ran successfully, 1 otherwise.
     */
    execute(): Promise<0 | 1>;
}
/**
 * Call the google-cloud run sdk to get the configuration
 * for the given service.
 * @param runClient the google-cloud run sdk client
 * @param serviceName the name of the service
 * @param projectName the project where the service is deployed
 * @param region the region where the service is deployed
 * @returns the configuration for the given service
 */
export declare const getCloudRunServiceConfig: (runClient: IServicesClient, serviceName: string, projectName: string, region: string) => Promise<IService>;
/**
 * Masks environment variables in a Cloud Run service configuration.
 * Makes a copy as to not modify the config in place.
 * @param config
 * @returns masked config
 */
export declare const maskConfig: (config: any) => IService;
/**
 * Summarizes the Cloud Run config as to not flood the terminal
 * @param config
 * @returns a summarized config
 */
export declare const summarizeConfig: (config: IService) => any;
/**
 * Gets recent logs
 * @param logClient Logging client
 * @param serviceId
 * @param location
 * @param startMillis start time in milliseconds or undefined if no start time is specified
 * @param endMillis end time in milliseconds or undefined if no end time is specified
 * @param severityFilter if included, adds the string to the filter
 * @returns array of logs as CloudRunLog interfaces
 */
export declare const getLogs: (logClient: Logging, serviceId: string, location: string, startMillis?: number, endMillis?: number, severityFilter?: string) => Promise<CloudRunLog[]>;
/**
 * Save logs in a CSV format
 * @param logs array of logs stored as CloudRunLog interfaces
 * @param filePath path to save the CSV file
 */
export declare const saveLogsFile: (logs: CloudRunLog[], filePath: string) => void;
/**
 * Gets recent revisions for a cloud-run service
 * @param service
 * @param location
 * @param project
 * @returns a string array of recent revisions and their deployment timestamp
 */
export declare const getRecentRevisions: (service: string, location: string, project: string) => Promise<string[]>;
/**
 * Generate the insights file
 * @param insightsFilePath path to the insights file
 * @param isDryRun whether or not this is a dry run
 * @param config Cloud run service configuration
 * @param service
 * @param location
 * @param project
 * @param revisions a string array of recent revisions
 */
export declare const generateInsightsFile: (insightsFilePath: string, isDryRun: boolean, config: IService, service: string, location: string, project: string, revisions: string[]) => void;
