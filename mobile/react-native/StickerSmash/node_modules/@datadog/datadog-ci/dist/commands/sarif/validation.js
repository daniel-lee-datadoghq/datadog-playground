"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForError = exports.validateSarif = void 0;
const fs_1 = __importDefault(require("fs"));
const ajv_1 = __importDefault(require("ajv"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const sarif_schema_2_1_0_json_1 = __importDefault(require("./json-schema/sarif-schema-2.1.0.json"));
const maxSarifFileSize = 20 * 1024 * 1024; // 20MB in bytes
/**
 * Validate the SARIF file and check if the file is too large or not valid
 * against the SARIF schema.
 *
 * @param sarifReportPath - the path of the SARIF file
 */
const validateSarif = (sarifReportPath) => {
    try {
        const stats = fs_1.default.statSync(sarifReportPath); // Synchronously get file stats
        const fileSize = stats.size;
        if (fileSize > maxSarifFileSize) {
            return `file size too large (size: ${fileSize / 1024 / 1024} MB, max size: ${maxSarifFileSize / 1024 / 1024} MB)`;
        }
    }
    catch (err) {
        return err.message;
    }
    const ajv = new ajv_1.default({ allErrors: true });
    (0, ajv_formats_1.default)(ajv);
    const sarifJsonSchemaValidate = ajv.compile(sarif_schema_2_1_0_json_1.default);
    try {
        const sarifReportContent = JSON.parse(String(fs_1.default.readFileSync(sarifReportPath)));
        const valid = sarifJsonSchemaValidate(sarifReportContent);
        if (!valid) {
            const errors = sarifJsonSchemaValidate.errors || [];
            const errorMessages = errors.map((error) => {
                return `${error.instancePath}: ${error.message}`;
            });
            return errorMessages.join('\n');
        }
    }
    catch (error) {
        return error.message;
    }
    return undefined;
};
exports.validateSarif = validateSarif;
/**
 * Functions that looks for errors specific to how Datadog processes SARIF file. This way, we
 * show the error directly to the user instead of uploading a file we cannot process in our backend.
 *
 * The function returns a list of errors to show. The return value is empty if there is no error.
 *
 * @param filePath - the path of the SARIF file.
 */
const checkForError = (filePath) => {
    const report = JSON.parse(String(fs_1.default.readFileSync(filePath)));
    const res = [];
    if ('runs' in report) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        for (const run of report['runs']) {
            const rules = [];
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if ('tool' in run && 'driver' in run['tool'] && 'rules' in run['tool']['driver']) {
                for (const rule of run['tool']['driver']['rules']) {
                    if ('id' in rule) {
                        rules.push(rule['id']);
                    }
                }
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if ('tool' in run && 'extensions' in run['tool']) {
                for (const extension of run['tool']['extensions']) {
                    if ('rules' in extension) {
                        for (const rule of extension['rules']) {
                            if ('id' in rule) {
                                rules.push(rule['id']);
                            }
                        }
                    }
                }
            }
            if ('results' in run) {
                for (const result of run['results']) {
                    if (!('ruleId' in result)) {
                        res.push('a result should have a ruleId');
                        continue;
                    }
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
                    const ruleId = result['ruleId'];
                    if (rules.indexOf(ruleId) === -1) {
                        res.push(`result references rule ${ruleId} but rule not found in the tool section`);
                    }
                }
            }
        }
    }
    return res;
};
exports.checkForError = checkForError;
//# sourceMappingURL=validation.js.map