import type { TunnelReporter } from '../tunnel/tunnel';
import type { CommandContext } from '../../../helpers/interfaces';
import { ExecutionRule, MainReporter, Result, SyntheticsOrgSettings, Summary, Test, UserConfigOverride, ResultInBatch, TestRequest } from '../interfaces';
export declare const renderApiRequestDescription: (subType: string | undefined, { request, steps, }: {
    request?: Partial<Omit<TestRequest, "headers" | "timeout">> | undefined;
    steps?: Test['config']['steps'];
}) => string;
export declare const getResultUrlSuffix: (execution: Result) => "" | " (previous attempt)" | " (not yet received)";
export declare class DefaultReporter implements MainReporter {
    private context;
    private testWaitSpinner?;
    private write;
    private totalDuration?;
    constructor({ context }: {
        context: CommandContext;
    });
    error(error: string): void;
    initErrors(errors: string[]): void;
    log(log: string): void;
    reportStart(timings: {
        startTime: number;
    }): void;
    resultEnd(result: Result, baseUrl: string, batchId: string): void;
    resultReceived(result: ResultInBatch): void;
    runEnd(summary: Summary, baseUrl: string, orgSettings?: SyntheticsOrgSettings): void;
    testsWait(tests: Test[], baseUrl: string, batchId: string, skippedCount?: number): void;
    testTrigger(test: Pick<Test, 'name'>, testId: string, executionRule: ExecutionRule, testOverrides: UserConfigOverride): void;
    testWait(test: Test): void;
    private removeSpinner;
}
export declare const getTunnelReporter: (reporter: MainReporter) => TunnelReporter;
