"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployTestsCommand = void 0;
const clipanion_1 = require("clipanion");
const utils_1 = require("../../helpers/utils");
const base_command_1 = require("./base-command");
const deploy_tests_lib_1 = require("./deploy-tests-lib");
const datadogDocsBaseUrl = 'https://docs.datadoghq.com';
const $1 = (0, utils_1.makeTerminalLink)(`${datadogDocsBaseUrl}/continuous_testing/cicd_integrations/configuration#test-files`);
class DeployTestsCommand extends base_command_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.config = DeployTestsCommand.getDefaultConfig();
        this.files = clipanion_1.Option.Array('-f,--files', {
            description: `Glob patterns to detect Synthetic ${$1 `test configuration files`}}.`,
        });
        this.publicIds = clipanion_1.Option.Array('-p,--public-id', { description: 'Public IDs of Synthetic tests to deploy.' });
        this.subdomain = clipanion_1.Option.String('--subdomain', {
            description: 'The custom subdomain to access your Datadog organization. If your URL is `myorg.datadoghq.com`, the custom subdomain is `myorg`.',
        });
        this.excludeFields = clipanion_1.Option.Array('--exclude-field', {
            description: 'Fields to exclude from partial updates, to avoid breaking Main Test Definitions with data specific to Local Test Definitions, like the Start URL. By default, all fields inside `config` are excluded.',
        });
    }
    static getDefaultConfig() {
        return Object.assign(Object.assign({}, super.getDefaultConfig()), { files: [], publicIds: [], subdomain: 'app', excludeFields: ['config'] });
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            // populate the config
            yield this.setup();
            try {
                yield (0, deploy_tests_lib_1.deployTests)(this.reporter, this.config);
            }
            catch (error) {
                this.logger.error(`Error: ${error.message}`);
                return 1;
            }
            return 0;
        });
    }
    resolveConfigFromEnv() {
        var _a, _b, _c;
        return Object.assign(Object.assign({}, super.resolveConfigFromEnv()), { files: (_a = process.env.DATADOG_SYNTHETICS_FILES) === null || _a === void 0 ? void 0 : _a.split(';'), publicIds: (_b = process.env.DATADOG_SYNTHETICS_PUBLIC_IDS) === null || _b === void 0 ? void 0 : _b.split(';'), subdomain: process.env.DATADOG_SUBDOMAIN, excludeFields: (_c = process.env.DATADOG_SYNTHETICS_EXCLUDE_FIELDS) === null || _c === void 0 ? void 0 : _c.split(';') });
    }
    resolveConfigFromCli() {
        return Object.assign(Object.assign({}, super.resolveConfigFromCli()), { files: this.files, publicIds: this.publicIds, subdomain: this.subdomain, excludeFields: this.excludeFields });
    }
}
exports.DeployTestsCommand = DeployTestsCommand;
DeployTestsCommand.paths = [['synthetics', 'deploy-tests']];
DeployTestsCommand.usage = clipanion_1.Command.Usage({
    category: 'Synthetics',
    description: 'Deploy Local Test Definitions as Main Test Definitions in Datadog.',
    details: `
      This command deploys Local Test Definitions as Main Test Definitions in Datadog, usually when a feature branch is merged or during a deployment.
    `,
    examples: [
        [
            'Explicitly specify the local test definitions to deploy',
            'datadog-ci synthetics deploy-tests --public-id pub-lic-id1 --public-id pub-lic-id2',
        ],
        [
            'Override the default glob pattern',
            'datadog-ci synthetics deploy-tests -f ./component-1/**/*.synthetics.json -f ./component-2/**/*.synthetics.json',
        ],
    ],
});
//# sourceMappingURL=deploy-tests-command.js.map