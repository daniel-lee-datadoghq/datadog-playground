"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTimeout = exports.is5xxError = exports.isBadRequestError = exports.is4xxError = exports.getStatus = exports.parseScope = exports.getBaseIntakeUrl = exports.getBaseUrl = void 0;
const app_1 = require("../../helpers/app");
const getBaseUrl = () => {
    const site = process.env.DD_SITE || 'datadoghq.com';
    const subdomain = process.env.DD_SUBDOMAIN || '';
    return (0, app_1.getCommonAppBaseURL)(site, subdomain);
};
exports.getBaseUrl = getBaseUrl;
const getBaseIntakeUrl = () => {
    if (process.env.DD_SITE) {
        return `https://quality-gates.${process.env.DD_SITE}`;
    }
    return 'https://quality-gates.datadoghq.com';
};
exports.getBaseIntakeUrl = getBaseIntakeUrl;
/**
 * Receives an array of the form ['key:value', 'key2:value2_1', 'key2:value2_2']
 * and returns an object of the form {key: ['value'], key2: ['value2_1, value2_2']}
 */
const parseScope = (scope) => {
    try {
        return scope.reduce((acc, keyValuePair) => {
            if (!keyValuePair.includes(':')) {
                return acc;
            }
            const firstColon = keyValuePair.indexOf(':');
            const key = keyValuePair.substring(0, firstColon);
            const value = keyValuePair.substring(firstColon + 1);
            if (acc.hasOwnProperty(key)) {
                if (!acc[key].includes(value)) {
                    acc[key].push(value);
                }
            }
            else {
                acc[key] = [value];
            }
            return acc;
        }, {});
    }
    catch (e) {
        return {};
    }
};
exports.parseScope = parseScope;
const getStatus = (error) => {
    var _a;
    return (_a = error.response) === null || _a === void 0 ? void 0 : _a.status;
};
exports.getStatus = getStatus;
const is4xxError = (error) => {
    const status = (0, exports.getStatus)(error);
    return status && status >= 400 && status <= 499;
};
exports.is4xxError = is4xxError;
const isBadRequestError = (error) => {
    const status = (0, exports.getStatus)(error);
    return status && status === 400;
};
exports.isBadRequestError = isBadRequestError;
const is5xxError = (error) => {
    const status = (0, exports.getStatus)(error);
    return status && status >= 500 && status <= 599;
};
exports.is5xxError = is5xxError;
const isTimeout = (error) => {
    return error.message === 'wait';
};
exports.isTimeout = isTimeout;
//# sourceMappingURL=utils.js.map