"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiConstructor = void 0;
const utils_1 = require("../../helpers/utils");
const requestGateEvaluation = (request) => (evaluationRequest) => __awaiter(void 0, void 0, void 0, function* () {
    const payload = {
        data: {
            type: 'deployment_gates_evaluation_request',
            attributes: Object.assign(Object.assign(Object.assign({ service: evaluationRequest.service, env: evaluationRequest.env, identifier: evaluationRequest.identifier }, (evaluationRequest.version && { version: evaluationRequest.version })), (evaluationRequest.apm_primary_tag && { apm_primary_tag: evaluationRequest.apm_primary_tag })), (evaluationRequest.monitor_variable && { monitor_variable: evaluationRequest.monitor_variable })),
        },
    };
    return request({
        data: JSON.stringify(payload),
        headers: {
            'Content-Type': 'application/json',
        },
        method: 'POST',
        url: '/api/unstable/deployments/gates/evaluation',
    });
});
const getGateEvaluationResult = (request) => (evaluationId) => __awaiter(void 0, void 0, void 0, function* () {
    return request({
        method: 'GET',
        url: `/api/unstable/deployments/gates/evaluation/${evaluationId}`,
    });
});
const apiConstructor = (baseUrl, apiKey, appKey) => {
    const requestBuilder = (0, utils_1.getRequestBuilder)({ baseUrl, apiKey, appKey });
    return {
        requestGateEvaluation: requestGateEvaluation(requestBuilder),
        getGateEvaluationResult: getGateEvaluationResult(requestBuilder),
    };
};
exports.apiConstructor = apiConstructor;
//# sourceMappingURL=api.js.map