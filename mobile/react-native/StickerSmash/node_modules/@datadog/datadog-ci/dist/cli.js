#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = exports.BETA_COMMANDS = void 0;
const fs_1 = __importDefault(require("fs"));
const clipanion_1 = require("clipanion");
const version_1 = require("./helpers/version");
exports.BETA_COMMANDS = ['dora', 'deployment', 'elf-symbols'];
const onError = (err) => {
    console.log(err);
    process.exitCode = 1;
};
process.on('uncaughtException', onError);
process.on('unhandledRejection', onError);
const cli = new clipanion_1.Cli({
    binaryLabel: 'Datadog CI',
    binaryName: 'datadog-ci',
    binaryVersion: version_1.version,
});
exports.cli = cli;
cli.register(clipanion_1.Builtins.HelpCommand);
cli.register(clipanion_1.Builtins.VersionCommand);
const commandsPath = `${__dirname}/commands`;
for (const commandFolder of fs_1.default.readdirSync(commandsPath)) {
    const betaCommandsEnabled = process.env.DD_BETA_COMMANDS_ENABLED === '1' || process.env.DD_BETA_COMMANDS_ENABLED === 'true';
    if (exports.BETA_COMMANDS.includes(commandFolder) && !betaCommandsEnabled) {
        continue;
    }
    const commandPath = `${commandsPath}/${commandFolder}`;
    if (fs_1.default.statSync(commandPath).isDirectory()) {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        ;
        require(`${commandPath}/cli`).forEach((command) => cli.register(command));
    }
}
if (require.main === module) {
    void cli.runExit(process.argv.slice(2), {
        stderr: process.stderr,
        stdin: process.stdin,
        stdout: process.stdout,
    });
}
//# sourceMappingURL=cli.js.map