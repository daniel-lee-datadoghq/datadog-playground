"use strict";
/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorTrackingPluginsFromOptions = void 0;
const withAndroidConfiguration_1 = __importDefault(require("./withAndroidConfiguration/withAndroidConfiguration"));
const withAndroidProguardMappingFiles_1 = __importDefault(require("./withAndroidProguardMappingFiles/withAndroidProguardMappingFiles"));
const withAndroidSourcemaps_1 = __importDefault(require("./withAndroidSourcemaps/withAndroidSourcemaps"));
const withIosDsyms_1 = __importDefault(require("./withIosDsyms/withIosDsyms"));
const withIosSourcemaps_1 = __importDefault(require("./withIosSourcemaps/withIosSourcemaps"));
/**
 * By default, all plugins are enabled. To disable a plugin, you have to set it
 * to `false`.
 */
const getErrorTrackingPluginsFromOptions = (options) => {
    const ERROR_TRACKING_CONFIG_PLUGINS_MAP = {
        iosDsyms: withIosDsyms_1.default,
        iosSourcemaps: (0, withIosSourcemaps_1.default)({
            serviceName: options?.serviceName,
        }),
        androidProguardMappingFiles: (0, withAndroidProguardMappingFiles_1.default)(),
        androidSourcemaps: withAndroidSourcemaps_1.default,
    };
    const configPluginsKeys = Object.keys(ERROR_TRACKING_CONFIG_PLUGINS_MAP).filter((option) => !options || options[option] !== false);
    return [
        ...configPluginsKeys.map((key) => ERROR_TRACKING_CONFIG_PLUGINS_MAP[key]),
        (0, withAndroidConfiguration_1.default)({
            serviceName: options?.serviceName,
            datadogGradlePluginVersion: options?.datadogGradlePluginVersion,
        }),
    ];
};
exports.getErrorTrackingPluginsFromOptions = getErrorTrackingPluginsFromOptions;
